{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vladi Gotsin\\\\Desktop\\\\react\\\\src\\\\Chess.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DIM = 8; //8x8 Board\n\nclass Square extends Comment {\n  constructor(x, y, piece, color) {\n    this.x = x;\n    this.y = y;\n    this.piece = piece;\n    this.color = color;\n  }\n}\nclass Board2 extends Comment {\n  constructor() {\n    this.position = [];\n    for (let i = 0; i < DIM; i++) {\n      this.position[i] = [];\n      for (let j = 0; j < DIM; j++) {\n        this.position[i].push(new Square2(i, j));\n      }\n    }\n  }\n}\n\n// function Square({ dark, piece, x, y, move }) {\n//     let c = \"chessSquare piece\";\n//     c = dark ? c + ' dark' : c;\n\n//     let p, cl;\n\n//     if (piece != undefined) {\n//         c = c + ' ' + piece;\n//         p = piece.split('-')[1][0];\n//         p = p == 'k' ? (piece.split('-')[1][1] == 'n' ? 'n' : p) : p;\n//         cl = piece.split('-')[0][0] == 'w' ? true : false;\n//     }\n\n//     return <div className={c} x={x} y={y} onClick={() => move(p, cl, x, y)}></div>\n// }\n\nfunction Board({\n  position,\n  move\n}) {\n  let color;\n  let piece;\n  let rows = [];\n  let key = 1;\n  let white = true;\n  let x = 0;\n  let y = 0;\n  for (let i = 0; i < position.length; i++) {\n    y = 0;\n    for (let j = 0; j < position[i].length; j++) {\n      if (position[i].charCodeAt(j) >= 97 && position[i].charCodeAt(j) <= 122) {\n        color = 'black';\n      } else if (position[i].charCodeAt(j) >= 65 && position[i].charCodeAt(j) <= 90) {\n        color = 'white';\n      } else {\n        color = undefined;\n      }\n      switch (position[i][j].toLowerCase()) {\n        case \"p\":\n          piece = 'pawn';\n          break;\n        case 'n':\n          piece = 'knight';\n          break;\n        case 'k':\n          piece = 'king';\n          break;\n        case 'q':\n          piece = 'queen';\n          break;\n        case 'b':\n          piece = 'bishop';\n          break;\n        case 'r':\n          piece = 'rook';\n          break;\n        default:\n          piece = undefined;\n          break;\n      }\n      if (piece != undefined && color != undefined) {\n        rows.push( /*#__PURE__*/_jsxDEV(Square, {\n          dark: white ? false : true,\n          piece: color + '-' + piece,\n          x: x,\n          y: y,\n          move: move\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 27\n        }, this));\n        if (key % 8 != 0) {\n          white = !white;\n        }\n        key++;\n        y++;\n      } else {\n        for (let k = 0; k < Number(position[i][j]); k++) {\n          rows.push( /*#__PURE__*/_jsxDEV(Square, {\n            dark: white ? false : true,\n            x: x,\n            y: y,\n            move: move\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 31\n          }, this));\n          if (key % 8 != 0) {\n            white = !white;\n          }\n          key++;\n          y++;\n        }\n      }\n    }\n    x++;\n  }\n  return rows;\n}\n_c = Board;\nexport default function Chess() {\n  _s();\n  const [boardPosition, setBoardPosition] = useState(['rnbqkbnr', 'pppppppp', '8', '8', '8', '8', 'PPPPPPPP', 'RNBQKBNR']);\n  const [selectedPiece, setSelectedPiece] = useState('');\n  const [oldX, setOldX] = useState('');\n  const [oldY, setOldY] = useState('');\n  const [allowedMoves, setAllowedMoves] = useState([]);\n  const [whiteToMove, setWhiteToMove] = useState(true);\n  const [canWhiteShortCastle, setCanWhiteShortCastle] = useState(true);\n  const [canWhiteLongCastle, setCanWhiteLongCastle] = useState(true);\n  const [canBlackShortCastle, setCanBlackShortCastle] = useState(true);\n  const [canBlackLongCastle, setCanBlackLongCastle] = useState(true);\n  const [isWhiteInCheck, setIsWhiteInCheck] = useState(false);\n  const [isBlackInCheck, setIsBlackInCheck] = useState(false);\n  function handleCapture(x, y, pieceToCapture) {\n    if (selectedPiece.charCodeAt(0) >= 65 && selectedPiece.charCodeAt(0) <= 90) {\n      if (pieceToCapture.charCodeAt(0) >= 65 && pieceToCapture.charCodeAt(0) <= 90) {\n        return;\n      }\n    }\n    if (selectedPiece.charCodeAt(0) >= 97 && selectedPiece.charCodeAt(0) <= 122) {\n      if (pieceToCapture.charCodeAt(0) >= 97 && pieceToCapture.charCodeAt(0) <= 122) {\n        return;\n      }\n    }\n    let oldRow = boardPosition[oldX];\n    let newRow = boardPosition[x];\n    oldRow = convertFenToString(oldRow);\n    newRow = convertFenToString(newRow);\n    oldRow = oldRow.substring(0, oldY) + ' ' + oldRow.substring(oldY + 1, oldRow.length);\n    newRow = newRow.substring(0, y) + selectedPiece + newRow.substring(y + 1, newRow.length);\n    oldRow = convertStringToFen(oldRow);\n    newRow = convertStringToFen(newRow);\n    let newBoard = [];\n    for (let i = 0; i < boardPosition.length; i++) {\n      if (i == x || i == oldX) {\n        if (x == oldX) {\n          //TO DO: Implement capturing on the same row\n          console.warn(\"Implement capturing on the same row\");\n        } else if (i == x) {\n          newBoard.push(newRow);\n        } else if (i == oldX) {\n          newBoard.push(oldRow);\n        }\n      } else {\n        newBoard.push(boardPosition[i]);\n      }\n    }\n    setBoardPosition(newBoard);\n    setWhiteToMove(!whiteToMove);\n  }\n  function convertFenToString(fen) {\n    let result = '';\n    for (let i = 0; i < fen.length; i++) {\n      if (fen.charCodeAt(i) >= 48 && fen.charCodeAt(i) <= 57) {\n        result += ' '.repeat(Number(fen[i]));\n      } else {\n        result += fen[i];\n      }\n    }\n    return result;\n  }\n  function convertStringToFen(str) {\n    for (let i = str.length - 1; i >= 0; i--) {\n      if (str[i] == ' ') {\n        if (i < str.length - 1) {\n          if (str.charCodeAt(i + 1) >= 48 && str.charCodeAt(i + 1) <= 57) {\n            str = str.substring(0, i) + (Number(str[i + 1]) + 1).toString() + str.substring(i + 1, str.length);\n            str = str.slice(0, i + 1) + str.slice(i + 2);\n          } else {\n            str = str.substring(0, i) + '1' + str.substring(i + 1, str.length);\n          }\n        } else {\n          str = str.substring(0, i) + '1' + str.substring(i + 1, str.length);\n        }\n      }\n    }\n    return str;\n  }\n  const Move = (p, c, x, y) => {\n    if (selectedPiece) {\n      //allows to deselect a piece\n      if (x == oldX) {\n        if (y == oldY) {\n          setSelectedPiece('');\n          setOldX('');\n          setOldY('');\n          return;\n        }\n      }\n\n      //allow only king moves if in check\n      //TO DO: Allow check blocks and attacking pieces captures\n      if (whiteToMove) {\n        if (isWhiteInCheck) {\n          if (p != 'k') {\n            setSelectedPiece('');\n            setOldX('');\n            setOldY('');\n            return;\n          }\n        }\n      } else {\n        if (isBlackInCheck) {\n          if (p != 'k') {\n            setSelectedPiece('');\n            setOldX('');\n            setOldY('');\n            return;\n          }\n        }\n      }\n      let row = boardPosition[x];\n      let newRow = '';\n      let oldRow = '';\n      let allowed = false;\n\n      //check if the move you're making is legal\n      for (let i = 0; i < allowedMoves.length; i++) {\n        let move = allowedMoves[i];\n        if (x == move[0]) {\n          if (y == move[1]) {\n            allowed = true;\n          }\n        }\n      }\n\n      //stop if illegal move is used\n      if (!allowed) {\n        setOldX('');\n        setOldY('');\n        setSelectedPiece('');\n        return;\n      }\n\n      //convert FEN to string, update the position and convert back to FEN\n      newRow = convertFenToString(row);\n      if (newRow[y] != ' ') {\n        handleCapture(x, y, newRow[y]);\n        setOldX('');\n        setOldY('');\n        setSelectedPiece('');\n        return;\n      }\n      newRow = newRow.substring(0, y) + selectedPiece + newRow.substring(y + 1, newRow.length);\n      newRow = convertStringToFen(newRow);\n\n      //get the old position; if same row, get the current new position\n      row = x == oldX ? newRow : boardPosition[oldX];\n\n      //convert FEN to string, update the old position and convert back to FEN\n      oldRow = convertFenToString(row);\n      oldRow = oldRow.substring(0, oldY) + ' ' + oldRow.substring(oldY + 1, oldRow.length);\n      oldRow = convertStringToFen(oldRow);\n\n      //create a new board position and update the board\n      let newBoard = [];\n      for (let i = 0; i < boardPosition.length; i++) {\n        if (i == x || i == oldX) {\n          //use the old position if it's the same row as the old position will be updating the current newPosition and will have the most up-to-date values\n          if (x == oldX) {\n            newBoard.push(oldRow);\n          } else if (i == x) {\n            newBoard.push(newRow);\n          } else if (i == oldX) {\n            newBoard.push(oldRow);\n          }\n        } else {\n          newBoard.push(boardPosition[i]);\n        }\n      }\n\n      //removes the right to castle if the rook has moved for white\n      if (selectedPiece == 'R') {\n        if (oldX == 7 && oldY == 0) {\n          setCanWhiteLongCastle(false);\n        }\n        if (oldX == 7 && oldY == 7) {\n          setCanWhiteShortCastle(false);\n        }\n      }\n\n      //removes the right to castle if the rook has moved for black\n      if (selectedPiece == 'r') {\n        if (oldX == 0 && oldY == 0) {\n          setCanBlackLongCastle(false);\n        }\n        if (oldX == 0 && oldY == 7) {\n          setCanBlackShortCastle(false);\n        }\n      }\n\n      //block castling when king moves for black\n      if (selectedPiece == 'k') {\n        setCanBlackLongCastle(false);\n        setCanBlackShortCastle(false);\n      }\n\n      //block castling when king moves for white\n      if (selectedPiece == 'K') {\n        setCanWhiteLongCastle(false);\n        setCanWhiteShortCastle(false);\n      }\n\n      //handle castling for white\n      if (selectedPiece == 'K') {\n        if (y - oldY == 2) {\n          let castleRow = newBoard[7];\n          castleRow = convertFenToString(castleRow);\n          castleRow = castleRow.substring(0, 5) + \"RK \";\n          castleRow = convertStringToFen(castleRow);\n          newBoard[7] = castleRow;\n        }\n        if (oldY - y == 2) {\n          let castleRow = newBoard[7];\n          castleRow = convertFenToString(castleRow);\n          castleRow = \"  KR \" + castleRow.substring(5, 8);\n          castleRow = convertStringToFen(castleRow);\n          newBoard[7] = castleRow;\n        }\n      }\n\n      //handle castling for black\n      if (selectedPiece == 'k') {\n        if (y - oldY == 2) {\n          let castleRow = newBoard[0];\n          castleRow = convertFenToString(castleRow);\n          castleRow = castleRow.substring(0, 5) + \"rk \";\n          castleRow = convertStringToFen(castleRow);\n          newBoard[0] = castleRow;\n        }\n        if (oldY - y == 2) {\n          let castleRow = newBoard[0];\n          castleRow = convertFenToString(castleRow);\n          castleRow = \"  kr \" + castleRow.substring(5, 8);\n          castleRow = convertStringToFen(castleRow);\n          newBoard[0] = castleRow;\n        }\n      }\n\n      //update the board and reset the variables\n      setBoardPosition(newBoard);\n      setOldX('');\n      setOldY('');\n      setSelectedPiece('');\n      setWhiteToMove(!whiteToMove);\n    } else {\n      if (c != whiteToMove) {\n        return;\n      }\n      switch (p) {\n        case \"p\":\n          let pawnMoves = [];\n          if (c) {\n            if (x == 6) {\n              pawnMoves.push([x - 1, y]);\n              pawnMoves.push([x - 2, y]);\n            } else {\n              pawnMoves.push([x - 1, y]);\n            }\n            if (x > 0) {\n              if (y > 0) {\n                let currentRowPosition = boardPosition[x - 1];\n                currentRowPosition = convertFenToString(currentRowPosition);\n                if (currentRowPosition[y - 1] != ' ') {\n                  pawnMoves.push([x - 1, y - 1]);\n                }\n              }\n              if (y < 8) {\n                let currentRowPosition = boardPosition[x - 1];\n                currentRowPosition = convertFenToString(currentRowPosition);\n                if (currentRowPosition[y + 1] != ' ') {\n                  pawnMoves.push([x - 1, y + 1]);\n                }\n              }\n            }\n          } else {\n            if (x == 1) {\n              pawnMoves.push([x + 1, y]);\n              pawnMoves.push([x + 2, y]);\n            } else {\n              pawnMoves.push([x + 1, y]);\n            }\n            if (x < 8) {\n              if (y > 0) {\n                let currentRowPosition = boardPosition[x + 1];\n                currentRowPosition = convertFenToString(currentRowPosition);\n                if (currentRowPosition[y - 1] != ' ') {\n                  pawnMoves.push([x + 1, y - 1]);\n                }\n              }\n              if (y < 8) {\n                let currentRowPosition = boardPosition[x + 1];\n                currentRowPosition = convertFenToString(currentRowPosition);\n                if (currentRowPosition[y + 1] != ' ') {\n                  pawnMoves.push([x + 1, y + 1]);\n                }\n              }\n            }\n          }\n          setAllowedMoves(pawnMoves);\n          break;\n        case \"r\":\n          let rookMoves = [];\n          for (let i = 0; i < 8; i++) {\n            rookMoves.push([i, y]);\n            rookMoves.push([x, i]);\n          }\n          setAllowedMoves(rookMoves);\n          break;\n        case \"n\":\n          let knightMoves = [];\n          if (x - 2 >= 0 && y - 1 >= 0) {\n            knightMoves.push([x - 2, y - 1]);\n          }\n          if (x - 2 >= 0 && y + 1 < 8) {\n            knightMoves.push([x - 2, y + 1]);\n          }\n          if (x + 2 < 8 && y - 1 >= 0) {\n            knightMoves.push([x + 2, y - 1]);\n          }\n          if (x + 2 < 8 && y + 1 < 8) {\n            knightMoves.push([x + 2, y + 1]);\n          }\n          if (x - 1 >= 0 && y - 2 >= 0) {\n            knightMoves.push([x - 1, y - 2]);\n          }\n          if (x + 1 < 8 && y - 2 >= 0) {\n            knightMoves.push([x + 1, y - 2]);\n          }\n          if (x - 1 >= 0 && y + 2 < 8) {\n            knightMoves.push([x - 1, y + 2]);\n          }\n          if (x + 1 < 8 && y + 2 < 8) {\n            knightMoves.push([x + 1, y + 2]);\n          }\n          setAllowedMoves(knightMoves);\n          break;\n        case \"b\":\n          let bishopMoves = [];\n          for (let i = 1; i <= 8; i++) {\n            if (x - i >= 0 && y - 1 >= 0) {\n              bishopMoves.push([x - i, y - i]);\n            }\n            if (x + 1 < 8 && y + i < 8) {\n              bishopMoves.push([x + i, y + i]);\n            }\n            if (x + 1 < 8 && y - 1 >= 0) {\n              bishopMoves.push([x + i, y - i]);\n            }\n            if (x - i >= 0 && y + 1 < 8) {\n              bishopMoves.push([x - i, y + i]);\n            }\n          }\n          setAllowedMoves(bishopMoves);\n          break;\n        case \"q\":\n          let queenMoves = [];\n          for (let i = 1; i <= 8; i++) {\n            if (x - i >= 0 && y - 1 >= 0) {\n              queenMoves.push([x - i, y - i]);\n            }\n            if (x + 1 < 8 && y + i < 8) {\n              queenMoves.push([x + i, y + i]);\n            }\n            if (x + 1 < 8 && y - 1 >= 0) {\n              queenMoves.push([x + i, y - i]);\n            }\n            if (x - i >= 0 && y + 1 < 8) {\n              queenMoves.push([x - i, y + i]);\n            }\n          }\n          for (let i = 0; i < 8; i++) {\n            queenMoves.push([i, y]);\n            queenMoves.push([x, i]);\n          }\n          setAllowedMoves(queenMoves);\n          break;\n        case \"k\":\n          let kingMoves = [];\n          for (let i = x - 1; i <= x + 1; i++) {\n            for (let j = y - 1; j <= y + 1; j++) {\n              //handle edges\n              if (i >= 0 && i < 8) {\n                if (j >= 0 && j < 8) {\n                  kingMoves.push([i, j]);\n                }\n              }\n            }\n          }\n\n          //handle castling\n          if (c) {\n            let lastRow = boardPosition[7];\n            lastRow = convertFenToString(lastRow);\n            if (canWhiteShortCastle) {\n              if (lastRow[5] == ' ' && lastRow[6] == ' ') {\n                kingMoves.push([x, y + 2]);\n              }\n            }\n            if (canWhiteLongCastle) {\n              if (lastRow[1] == ' ' && lastRow[2] == ' ' && lastRow[3] == ' ') {\n                kingMoves.push([x, y - 2]);\n              }\n            }\n          } else {\n            let firstRow = boardPosition[0];\n            firstRow = convertFenToString(firstRow);\n            if (canBlackShortCastle) {\n              if (firstRow[5] == ' ' && firstRow[6] == ' ') {\n                kingMoves.push([x, y + 2]);\n              }\n            }\n            if (canBlackLongCastle) {\n              if (firstRow[1] == ' ' && firstRow[2] == ' ' && firstRow[3] == ' ') {\n                kingMoves.push([x, y - 2]);\n              }\n            }\n          }\n          setAllowedMoves(kingMoves);\n          break;\n        default:\n          break;\n      }\n      if (p != undefined && c != undefined) {\n        p = c ? p.toUpperCase() : p;\n        setSelectedPiece(p);\n        setOldX(x);\n        setOldY(y);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"grid\",\n        className: \"chessGrid\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          position: boardPosition,\n          move: Move\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 615,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(Chess, \"IhlxSP5GS1lVgwjDIGSJHLPT3iM=\");\n_c2 = Chess;\nvar _c, _c2;\n$RefreshReg$(_c, \"Board\");\n$RefreshReg$(_c2, \"Chess\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","DIM","Square","Comment","constructor","x","y","piece","color","Board2","position","i","j","push","Square2","Board","move","rows","key","white","length","charCodeAt","undefined","toLowerCase","dark","fileName","_jsxFileName","lineNumber","columnNumber","k","Number","_c","Chess","_s","boardPosition","setBoardPosition","selectedPiece","setSelectedPiece","oldX","setOldX","oldY","setOldY","allowedMoves","setAllowedMoves","whiteToMove","setWhiteToMove","canWhiteShortCastle","setCanWhiteShortCastle","canWhiteLongCastle","setCanWhiteLongCastle","canBlackShortCastle","setCanBlackShortCastle","canBlackLongCastle","setCanBlackLongCastle","isWhiteInCheck","setIsWhiteInCheck","isBlackInCheck","setIsBlackInCheck","handleCapture","pieceToCapture","oldRow","newRow","convertFenToString","substring","convertStringToFen","newBoard","console","warn","fen","result","repeat","str","toString","slice","Move","p","c","row","allowed","castleRow","pawnMoves","currentRowPosition","rookMoves","knightMoves","bishopMoves","queenMoves","kingMoves","lastRow","firstRow","toUpperCase","children","className","id","_c2","$RefreshReg$"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/src/Chess.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nconst DIM = 8; //8x8 Board\r\n\r\nclass Square extends Comment {\r\n    constructor(x, y, piece, color) {\r\n        this.x = x\r\n        this.y = y\r\n        this.piece = piece\r\n        this.color = color\r\n    }\r\n\r\n    onClick = function () {\r\n        //TODO: Implement clicking a square\r\n    }\r\n}\r\n\r\nclass Board2 extends Comment {\r\n    constructor() {\r\n        this.position = []\r\n\r\n        for (let i = 0; i < DIM; i++) {\r\n            this.position[i] = [];\r\n\r\n            for (let j = 0; j < DIM; j++) {\r\n                this.position[i].push(new Square2(i, j))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// function Square({ dark, piece, x, y, move }) {\r\n//     let c = \"chessSquare piece\";\r\n//     c = dark ? c + ' dark' : c;\r\n\r\n//     let p, cl;\r\n\r\n//     if (piece != undefined) {\r\n//         c = c + ' ' + piece;\r\n//         p = piece.split('-')[1][0];\r\n//         p = p == 'k' ? (piece.split('-')[1][1] == 'n' ? 'n' : p) : p;\r\n//         cl = piece.split('-')[0][0] == 'w' ? true : false;\r\n//     }\r\n\r\n//     return <div className={c} x={x} y={y} onClick={() => move(p, cl, x, y)}></div>\r\n// }\r\n\r\nfunction Board({ position, move }) {\r\n\r\n    let color;\r\n    let piece;\r\n    let rows = [];\r\n    let key = 1;\r\n    let white = true;\r\n    let x = 0;\r\n    let y = 0;\r\n\r\n    for (let i = 0; i < position.length; i++) {\r\n        y = 0;\r\n        for (let j = 0; j < position[i].length; j++) {\r\n            if (position[i].charCodeAt(j) >= 97 && position[i].charCodeAt(j) <= 122) {\r\n                color = 'black';\r\n            } else if (position[i].charCodeAt(j) >= 65 && position[i].charCodeAt(j) <= 90) {\r\n                color = 'white';\r\n            } else {\r\n                color = undefined;\r\n            }\r\n\r\n            switch (position[i][j].toLowerCase()) {\r\n                case \"p\":\r\n                    piece = 'pawn';\r\n                    break;\r\n                case 'n':\r\n                    piece = 'knight';\r\n                    break;\r\n                case 'k':\r\n                    piece = 'king';\r\n                    break;\r\n                case 'q':\r\n                    piece = 'queen';\r\n                    break;\r\n                case 'b':\r\n                    piece = 'bishop';\r\n                    break;\r\n                case 'r':\r\n                    piece = 'rook';\r\n                    break;\r\n                default:\r\n                    piece = undefined;\r\n                    break;\r\n            }\r\n\r\n            if (piece != undefined && color != undefined) {\r\n                rows.push(<Square dark={white ? false : true} key={key} piece={color + '-' + piece} x={x} y={y} move={move}></Square>)\r\n                if (key % 8 != 0) {\r\n                    white = !white;\r\n                }\r\n                key++\r\n                y++;\r\n            } else {\r\n                for (let k = 0; k < Number(position[i][j]); k++) {\r\n                    rows.push(<Square dark={white ? false : true} key={key} x={x} y={y} move={move}></Square>)\r\n                    if (key % 8 != 0) {\r\n                        white = !white;\r\n                    }\r\n                    key++;\r\n                    y++\r\n                }\r\n            }\r\n        }\r\n        x++;\r\n    }\r\n\r\n    return rows;\r\n}\r\n\r\nexport default function Chess() {\r\n\r\n    const [boardPosition, setBoardPosition] = useState(\r\n        [\r\n            'rnbqkbnr',\r\n            'pppppppp',\r\n            '8',\r\n            '8',\r\n            '8',\r\n            '8',\r\n            'PPPPPPPP',\r\n            'RNBQKBNR'\r\n        ]);\r\n\r\n    const [selectedPiece, setSelectedPiece] = useState('');\r\n    const [oldX, setOldX] = useState('');\r\n    const [oldY, setOldY] = useState('');\r\n    const [allowedMoves, setAllowedMoves] = useState([])\r\n    const [whiteToMove, setWhiteToMove] = useState(true);\r\n    const [canWhiteShortCastle, setCanWhiteShortCastle] = useState(true);\r\n    const [canWhiteLongCastle, setCanWhiteLongCastle] = useState(true);\r\n    const [canBlackShortCastle, setCanBlackShortCastle] = useState(true);\r\n    const [canBlackLongCastle, setCanBlackLongCastle] = useState(true);\r\n    const [isWhiteInCheck, setIsWhiteInCheck] = useState(false);\r\n    const [isBlackInCheck, setIsBlackInCheck] = useState(false);\r\n\r\n    function handleCapture(x, y, pieceToCapture) {\r\n        if (selectedPiece.charCodeAt(0) >= 65 && selectedPiece.charCodeAt(0) <= 90) {\r\n            if (pieceToCapture.charCodeAt(0) >= 65 && pieceToCapture.charCodeAt(0) <= 90) {\r\n                return\r\n            }\r\n        }\r\n\r\n        if (selectedPiece.charCodeAt(0) >= 97 && selectedPiece.charCodeAt(0) <= 122) {\r\n            if (pieceToCapture.charCodeAt(0) >= 97 && pieceToCapture.charCodeAt(0) <= 122) {\r\n                return\r\n            }\r\n        }\r\n\r\n        let oldRow = boardPosition[oldX];\r\n        let newRow = boardPosition[x];\r\n\r\n        oldRow = convertFenToString(oldRow);\r\n        newRow = convertFenToString(newRow);\r\n\r\n        oldRow = oldRow.substring(0, oldY) + ' ' + oldRow.substring(oldY + 1, oldRow.length)\r\n        newRow = newRow.substring(0, y) + selectedPiece + newRow.substring(y + 1, newRow.length)\r\n\r\n        oldRow = convertStringToFen(oldRow)\r\n        newRow = convertStringToFen(newRow)\r\n\r\n        let newBoard = [];\r\n\r\n        for (let i = 0; i < boardPosition.length; i++) {\r\n            if (i == x || i == oldX) {\r\n                if (x == oldX) {\r\n                    //TO DO: Implement capturing on the same row\r\n                    console.warn(\"Implement capturing on the same row\")\r\n                }\r\n                else if (i == x) {\r\n                    newBoard.push(newRow);\r\n                } else if (i == oldX) {\r\n                    newBoard.push(oldRow);\r\n                }\r\n            } else {\r\n                newBoard.push(boardPosition[i]);\r\n            }\r\n        }\r\n\r\n        setBoardPosition(newBoard)\r\n        setWhiteToMove(!whiteToMove)\r\n    }\r\n\r\n    function convertFenToString(fen) {\r\n        let result = '';\r\n\r\n        for (let i = 0; i < fen.length; i++) {\r\n            if (fen.charCodeAt(i) >= 48 && fen.charCodeAt(i) <= 57) {\r\n                result += ' '.repeat(Number(fen[i]))\r\n            } else {\r\n                result += fen[i];\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function convertStringToFen(str) {\r\n        for (let i = str.length - 1; i >= 0; i--) {\r\n            if (str[i] == ' ') {\r\n                if (i < str.length - 1) {\r\n                    if (str.charCodeAt(i + 1) >= 48 && str.charCodeAt(i + 1) <= 57) {\r\n                        str = str.substring(0, i) + (Number(str[i + 1]) + 1).toString() + str.substring(i + 1, str.length);\r\n                        str = str.slice(0, i + 1) + str.slice(i + 2);\r\n                    } else {\r\n                        str = str.substring(0, i) + '1' + str.substring(i + 1, str.length);\r\n                    }\r\n                } else {\r\n                    str = str.substring(0, i) + '1' + str.substring(i + 1, str.length);\r\n                }\r\n            }\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n    const Move = (p, c, x, y) => {\r\n        if (selectedPiece) {\r\n\r\n            //allows to deselect a piece\r\n            if (x == oldX) {\r\n                if (y == oldY) {\r\n                    setSelectedPiece('')\r\n                    setOldX('')\r\n                    setOldY('')\r\n                    return\r\n                }\r\n            }\r\n\r\n            //allow only king moves if in check\r\n            //TO DO: Allow check blocks and attacking pieces captures\r\n            if (whiteToMove) {\r\n                if (isWhiteInCheck) {\r\n                    if (p != 'k') {\r\n                        setSelectedPiece('')\r\n                        setOldX('')\r\n                        setOldY('')\r\n                        return\r\n                    }\r\n                }\r\n            } else {\r\n                if (isBlackInCheck) {\r\n                    if (p != 'k') {\r\n                        setSelectedPiece('')\r\n                        setOldX('')\r\n                        setOldY('')\r\n                        return\r\n                    }\r\n                }\r\n            }\r\n\r\n            let row = boardPosition[x];\r\n            let newRow = '';\r\n            let oldRow = '';\r\n            let allowed = false;\r\n\r\n            //check if the move you're making is legal\r\n            for (let i = 0; i < allowedMoves.length; i++) {\r\n                let move = allowedMoves[i];\r\n\r\n                if (x == move[0]) {\r\n                    if (y == move[1]) {\r\n                        allowed = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            //stop if illegal move is used\r\n            if (!allowed) {\r\n                setOldX('')\r\n                setOldY('')\r\n                setSelectedPiece('')\r\n                return\r\n            }\r\n\r\n            //convert FEN to string, update the position and convert back to FEN\r\n            newRow = convertFenToString(row);\r\n\r\n            if (newRow[y] != ' ') {\r\n                handleCapture(x, y, newRow[y]);\r\n                setOldX('')\r\n                setOldY('')\r\n                setSelectedPiece('')\r\n                return;\r\n            }\r\n\r\n            newRow = newRow.substring(0, y) + selectedPiece + newRow.substring(y + 1, newRow.length);\r\n            newRow = convertStringToFen(newRow);\r\n\r\n            //get the old position; if same row, get the current new position\r\n            row = x == oldX ? newRow : boardPosition[oldX];\r\n\r\n            //convert FEN to string, update the old position and convert back to FEN\r\n            oldRow = convertFenToString(row);\r\n            oldRow = oldRow.substring(0, oldY) + ' ' + oldRow.substring(oldY + 1, oldRow.length);\r\n            oldRow = convertStringToFen(oldRow);\r\n\r\n            //create a new board position and update the board\r\n            let newBoard = [];\r\n\r\n            for (let i = 0; i < boardPosition.length; i++) {\r\n                if (i == x || i == oldX) {\r\n                    //use the old position if it's the same row as the old position will be updating the current newPosition and will have the most up-to-date values\r\n                    if (x == oldX) {\r\n                        newBoard.push(oldRow);\r\n                    }\r\n                    else if (i == x) {\r\n                        newBoard.push(newRow);\r\n                    } else if (i == oldX) {\r\n                        newBoard.push(oldRow);\r\n                    }\r\n                } else {\r\n                    newBoard.push(boardPosition[i]);\r\n                }\r\n            }\r\n\r\n            //removes the right to castle if the rook has moved for white\r\n            if (selectedPiece == 'R') {\r\n                if (oldX == 7 && oldY == 0) {\r\n                    setCanWhiteLongCastle(false)\r\n                }\r\n                if (oldX == 7 && oldY == 7) {\r\n                    setCanWhiteShortCastle(false)\r\n                }\r\n            }\r\n\r\n            //removes the right to castle if the rook has moved for black\r\n            if (selectedPiece == 'r') {\r\n                if (oldX == 0 && oldY == 0) {\r\n                    setCanBlackLongCastle(false)\r\n                }\r\n                if (oldX == 0 && oldY == 7) {\r\n                    setCanBlackShortCastle(false)\r\n                }\r\n            }\r\n\r\n            //block castling when king moves for black\r\n            if (selectedPiece == 'k') {\r\n                setCanBlackLongCastle(false)\r\n                setCanBlackShortCastle(false)\r\n            }\r\n\r\n            //block castling when king moves for white\r\n            if (selectedPiece == 'K') {\r\n                setCanWhiteLongCastle(false)\r\n                setCanWhiteShortCastle(false)\r\n            }\r\n\r\n            //handle castling for white\r\n            if (selectedPiece == 'K') {\r\n                if (y - oldY == 2) {\r\n                    let castleRow = newBoard[7];\r\n                    castleRow = convertFenToString(castleRow)\r\n                    castleRow = castleRow.substring(0, 5) + \"RK \"\r\n                    castleRow = convertStringToFen(castleRow)\r\n                    newBoard[7] = castleRow\r\n                }\r\n\r\n                if (oldY - y == 2) {\r\n                    let castleRow = newBoard[7];\r\n                    castleRow = convertFenToString(castleRow)\r\n                    castleRow = \"  KR \" + castleRow.substring(5, 8)\r\n                    castleRow = convertStringToFen(castleRow)\r\n                    newBoard[7] = castleRow\r\n                }\r\n            }\r\n\r\n            //handle castling for black\r\n            if (selectedPiece == 'k') {\r\n                if (y - oldY == 2) {\r\n                    let castleRow = newBoard[0];\r\n                    castleRow = convertFenToString(castleRow)\r\n                    castleRow = castleRow.substring(0, 5) + \"rk \"\r\n                    castleRow = convertStringToFen(castleRow)\r\n                    newBoard[0] = castleRow\r\n                }\r\n\r\n                if (oldY - y == 2) {\r\n                    let castleRow = newBoard[0];\r\n                    castleRow = convertFenToString(castleRow)\r\n                    castleRow = \"  kr \" + castleRow.substring(5, 8)\r\n                    castleRow = convertStringToFen(castleRow)\r\n                    newBoard[0] = castleRow\r\n                }\r\n            }\r\n\r\n            //update the board and reset the variables\r\n            setBoardPosition(newBoard);\r\n            setOldX('')\r\n            setOldY('')\r\n            setSelectedPiece('')\r\n\r\n            setWhiteToMove(!whiteToMove)\r\n        } else {\r\n            if (c != whiteToMove) {\r\n                return\r\n            }\r\n\r\n            switch (p) {\r\n                case \"p\":\r\n                    let pawnMoves = [];\r\n                    if (c) {\r\n                        if (x == 6) {\r\n                            pawnMoves.push([x - 1, y])\r\n                            pawnMoves.push([x - 2, y])\r\n                        } else {\r\n                            pawnMoves.push([x - 1, y])\r\n                        }\r\n\r\n                        if (x > 0) {\r\n                            if (y > 0) {\r\n                                let currentRowPosition = boardPosition[x - 1];\r\n                                currentRowPosition = convertFenToString(currentRowPosition);\r\n                                if (currentRowPosition[y - 1] != ' ') {\r\n                                    pawnMoves.push([x - 1, y - 1])\r\n                                }\r\n                            }\r\n\r\n                            if (y < 8) {\r\n                                let currentRowPosition = boardPosition[x - 1];\r\n                                currentRowPosition = convertFenToString(currentRowPosition);\r\n                                if (currentRowPosition[y + 1] != ' ') {\r\n                                    pawnMoves.push([x - 1, y + 1])\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (x == 1) {\r\n                            pawnMoves.push([x + 1, y])\r\n                            pawnMoves.push([x + 2, y])\r\n                        } else {\r\n                            pawnMoves.push([x + 1, y])\r\n                        }\r\n\r\n                        if (x < 8) {\r\n                            if (y > 0) {\r\n                                let currentRowPosition = boardPosition[x + 1];\r\n                                currentRowPosition = convertFenToString(currentRowPosition);\r\n                                if (currentRowPosition[y - 1] != ' ') {\r\n                                    pawnMoves.push([x + 1, y - 1])\r\n                                }\r\n                            }\r\n\r\n                            if (y < 8) {\r\n                                let currentRowPosition = boardPosition[x + 1];\r\n                                currentRowPosition = convertFenToString(currentRowPosition);\r\n                                if (currentRowPosition[y + 1] != ' ') {\r\n                                    pawnMoves.push([x + 1, y + 1])\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    setAllowedMoves(pawnMoves)\r\n                    break;\r\n                case \"r\":\r\n                    let rookMoves = [];\r\n                    for (let i = 0; i < 8; i++) {\r\n                        rookMoves.push([i, y]);\r\n                        rookMoves.push([x, i]);\r\n                    }\r\n                    setAllowedMoves(rookMoves)\r\n                    break;\r\n                case \"n\":\r\n                    let knightMoves = [];\r\n\r\n                    if (x - 2 >= 0 && y - 1 >= 0) {\r\n                        knightMoves.push([x - 2, y - 1]);\r\n                    }\r\n\r\n                    if (x - 2 >= 0 && y + 1 < 8) {\r\n                        knightMoves.push([x - 2, y + 1]);\r\n                    }\r\n\r\n                    if (x + 2 < 8 && y - 1 >= 0) {\r\n                        knightMoves.push([x + 2, y - 1]);\r\n                    }\r\n\r\n                    if (x + 2 < 8 && y + 1 < 8) {\r\n                        knightMoves.push([x + 2, y + 1]);\r\n                    }\r\n\r\n                    if (x - 1 >= 0 && y - 2 >= 0) {\r\n                        knightMoves.push([x - 1, y - 2]);\r\n                    }\r\n\r\n                    if (x + 1 < 8 && y - 2 >= 0) {\r\n                        knightMoves.push([x + 1, y - 2]);\r\n                    }\r\n\r\n                    if (x - 1 >= 0 && y + 2 < 8) {\r\n                        knightMoves.push([x - 1, y + 2]);\r\n                    }\r\n\r\n                    if (x + 1 < 8 && y + 2 < 8) {\r\n                        knightMoves.push([x + 1, y + 2]);\r\n                    }\r\n\r\n                    setAllowedMoves(knightMoves)\r\n                    break;\r\n                case \"b\":\r\n                    let bishopMoves = [];\r\n                    for (let i = 1; i <= 8; i++) {\r\n                        if (x - i >= 0 && y - 1 >= 0) {\r\n                            bishopMoves.push([x - i, y - i]);\r\n                        }\r\n\r\n                        if (x + 1 < 8 && y + i < 8) {\r\n                            bishopMoves.push([x + i, y + i]);\r\n                        }\r\n\r\n                        if (x + 1 < 8 && y - 1 >= 0) {\r\n                            bishopMoves.push([x + i, y - i]);\r\n                        }\r\n\r\n                        if (x - i >= 0 && y + 1 < 8) {\r\n                            bishopMoves.push([x - i, y + i]);\r\n                        }\r\n                    }\r\n                    setAllowedMoves(bishopMoves);\r\n                    break;\r\n                case \"q\":\r\n                    let queenMoves = [];\r\n                    for (let i = 1; i <= 8; i++) {\r\n                        if (x - i >= 0 && y - 1 >= 0) {\r\n                            queenMoves.push([x - i, y - i]);\r\n                        }\r\n\r\n                        if (x + 1 < 8 && y + i < 8) {\r\n                            queenMoves.push([x + i, y + i]);\r\n                        }\r\n\r\n                        if (x + 1 < 8 && y - 1 >= 0) {\r\n                            queenMoves.push([x + i, y - i]);\r\n                        }\r\n\r\n                        if (x - i >= 0 && y + 1 < 8) {\r\n                            queenMoves.push([x - i, y + i]);\r\n                        }\r\n                    }\r\n                    for (let i = 0; i < 8; i++) {\r\n                        queenMoves.push([i, y]);\r\n                        queenMoves.push([x, i]);\r\n                    }\r\n                    setAllowedMoves(queenMoves)\r\n                    break;\r\n                case \"k\":\r\n                    let kingMoves = [];\r\n                    for (let i = x - 1; i <= x + 1; i++) {\r\n                        for (let j = y - 1; j <= y + 1; j++) {\r\n                            //handle edges\r\n                            if (i >= 0 && i < 8) {\r\n                                if (j >= 0 && j < 8) {\r\n                                    kingMoves.push([i, j]);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    //handle castling\r\n                    if (c) {\r\n                        let lastRow = boardPosition[7]\r\n                        lastRow = convertFenToString(lastRow)\r\n                        if (canWhiteShortCastle) {\r\n                            if (lastRow[5] == ' ' && lastRow[6] == ' ') {\r\n                                kingMoves.push([x, y + 2])\r\n                            }\r\n                        }\r\n\r\n                        if (canWhiteLongCastle) {\r\n                            if (lastRow[1] == ' ' && lastRow[2] == ' ' && lastRow[3] == ' ') {\r\n                                kingMoves.push([x, y - 2]);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        let firstRow = boardPosition[0]\r\n                        firstRow = convertFenToString(firstRow)\r\n\r\n                        if (canBlackShortCastle) {\r\n                            if (firstRow[5] == ' ' && firstRow[6] == ' ') {\r\n                                kingMoves.push([x, y + 2])\r\n                            }\r\n                        }\r\n\r\n                        if (canBlackLongCastle) {\r\n                            if (firstRow[1] == ' ' && firstRow[2] == ' ' && firstRow[3] == ' ') {\r\n                                kingMoves.push([x, y - 2]);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    setAllowedMoves(kingMoves);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            if (p != undefined && c != undefined) {\r\n                p = c ? p.toUpperCase() : p;\r\n\r\n                setSelectedPiece(p);\r\n                setOldX(x);\r\n                setOldY(y);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (<>\r\n        <div className=\"chessContainer\">\r\n            <div id=\"grid\" className=\"chessGrid\">\r\n                <Board position={boardPosition} move={Move}></Board>\r\n            </div>\r\n        </div>\r\n    </>)\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}