{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vladi Gotsin\\\\Desktop\\\\react\\\\src\\\\Board.js\";\nimport { Component } from \"react\";\nimport { Square } from \"./Square.js\";\nimport { ConvertFENPieceToPiece, ConvertFenToString } from \"./HelperMethods.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DIM = 8; //8x8 Board\n\nexport class Board extends Component {\n  constructor(props) {\n    super(props);\n    this.movePiece = (x, y) => {\n      let squares = this.renderSquares();\n      let currentSquare = squares.find(s => s.props.x == x && s.props.y == y);\n      let selectedSquare = squares.find(s => s.props.x == this.state.selectedSquareX && s.props.y == this.state.selectedSquareY);\n    };\n    this.updatePossibleMoves = moves => {\n      this.setState({\n        possibleMoves: moves\n      });\n    };\n    this.updateSelectedSquareX = x => {\n      this.setState({\n        selectedSquareX: x\n      });\n    };\n    this.updateSelectedSquareY = y => {\n      this.setState({\n        selectedSquareY: y\n      });\n    };\n    this.state = {\n      position: ['rnbqkbnr', 'pppppppp', '8', '8', '8', '8', 'PPPPPPPP', 'RNBQKBNR'],\n      possibleMoves: [],\n      selectedSquareX: \"\",\n      selectedSquareY: \"\",\n      piece: \"\"\n    };\n  }\n  getPossibleMoves(square) {\n    const squares = this.renderSquares();\n    let possibleMoves = [];\n    if (square.state.piece) {\n      let color = square.state.piece.split('-')[0];\n      let piece = square.state.piece.split('-')[1];\n      switch (piece) {\n        case \"pawn\":\n          if (color === \"white\") {\n            //move one square ahead\n            const targetSquare1 = squares.find(s => s.props.x === square.x - 1 && s.props.y === square.y);\n            if (targetSquare1 && !targetSquare1.props.piece) {\n              possibleMoves.push({\n                x: square.x - 1,\n                y: square.y\n              });\n            }\n\n            //move two squares on the very first move\n            const targetSquare2 = squares.find(s => s.props.x === square.x - 2 && s.props.y === square.y);\n            if (square.x === 6 && targetSquare2 && !targetSquare2.props.piece && !targetSquare1.props.piece) {\n              possibleMoves.push({\n                x: square.x - 2,\n                y: square.y\n              });\n            }\n\n            //capture to the left diagonal\n            const leftNeigborToPotentuallyCapture1 = squares.find(s => s.props.x === square.x - 1 && s.props.y === square.y - 1);\n            if (leftNeigborToPotentuallyCapture1 && leftNeigborToPotentuallyCapture1.props.piece && ConvertFENPieceToPiece(leftNeigborToPotentuallyCapture1.props.piece).split('-')[0] != square.piece.split(\"-\")[0]) {\n              possibleMoves.push({\n                x: square.x - 1,\n                y: square.y - 1\n              });\n            }\n\n            //capture to the right diagonal\n            const leftNeigborToPotentuallyCapture2 = squares.find(s => s.props.x === square.x - 1 && s.props.y === square.y + 1);\n            if (leftNeigborToPotentuallyCapture2 && leftNeigborToPotentuallyCapture2.props.piece && ConvertFENPieceToPiece(leftNeigborToPotentuallyCapture2.props.piece).split('-')[0] != square.piece.split(\"-\")[0]) {\n              possibleMoves.push({\n                x: square.x - 1,\n                y: square.y + 1\n              });\n            }\n\n            //TODO: Implement the french fancy move - En passant\n            //TODO: Implement promotion\n          } else {\n            const targetSquare1 = squares.find(s => s.props.x === square.x + 1 && s.props.y === square.y);\n            if (targetSquare1 && !targetSquare1.props.piece) {\n              possibleMoves.push({\n                x: square.x + 1,\n                y: square.y\n              });\n            }\n\n            //move two squares on the very first move\n            const targetSquare2 = squares.find(s => s.props.x === square.x + 2 && s.props.y === square.y);\n            if (square.x === 1 && targetSquare2 && !targetSquare2.props.piece && !targetSquare1.props.piece) {\n              possibleMoves.push({\n                x: square.x + 2,\n                y: square.y\n              });\n            }\n\n            //capture to the left diagonal\n            const leftNeigborToPotentuallyCapture1 = squares.find(s => s.props.x === square.x + 1 && s.props.y === square.y - 1);\n            if (leftNeigborToPotentuallyCapture1 && leftNeigborToPotentuallyCapture1.props.piece && ConvertFENPieceToPiece(leftNeigborToPotentuallyCapture1.props.piece).split('-')[0] != square.piece.split(\"-\")[0]) {\n              possibleMoves.push({\n                x: square.x + 1,\n                y: square.y - 1\n              });\n            }\n\n            //capture to the right diagonal\n            const leftNeigborToPotentuallyCapture2 = squares.find(s => s.props.x === square.x + 1 && s.props.y === square.y + 1);\n            if (leftNeigborToPotentuallyCapture2 && leftNeigborToPotentuallyCapture2.props.piece && ConvertFENPieceToPiece(leftNeigborToPotentuallyCapture2.props.piece).split('-')[0] != square.piece.split(\"-\")[0]) {\n              possibleMoves.push({\n                x: square.x + 1,\n                y: square.y + 1\n              });\n            }\n\n            //TODO: Implement the french fancy move - En passant\n            //TODO: Implement promotion\n          }\n          break;\n        case \"rook\":\n          for (let i = square.x - 1; i >= 0; i--) {\n            let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.y);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: i,\n                y: square.y\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: i,\n                  y: square.y\n                });\n              }\n              break;\n            }\n          }\n          for (let i = square.y - 1; i >= 0; i--) {\n            let targetSquare = squares.find(s => s.props.x === square.x && s.props.y === i);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: square.x,\n                y: i\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: square.x,\n                  y: i\n                });\n              }\n              break;\n            }\n          }\n          for (let i = square.x + 1; i < DIM; i++) {\n            let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.y);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: i,\n                y: square.y\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: i,\n                  y: square.y\n                });\n              }\n              break;\n            }\n          }\n          for (let i = square.y + 1; i < DIM; i++) {\n            let targetSquare = squares.find(s => s.props.x === square.x && s.props.y === i);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: square.x,\n                y: i\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: square.x,\n                  y: i\n                });\n              }\n              break;\n            }\n          }\n          break;\n        case \"bishop\":\n          for (let i = 1; i <= DIM; i++) {\n            if (square.x - i >= 0 && square.y - i >= 0) {\n              let targetPiece = squares.find(s => s.props.x == square.x - i && s.props.y == square.y - i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.x - i,\n                  y: square.y - i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.x - i,\n                    y: square.y - i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          for (let i = 1; i <= DIM; i++) {\n            if (square.x + i < DIM && square.y + i < DIM) {\n              let targetPiece = squares.find(s => s.props.x == square.x + i && s.props.y == square.y + i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.x + i,\n                  y: square.y + i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.x + i,\n                    y: square.y + i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          for (let i = 1; i <= DIM; i++) {\n            if (square.x - i >= 0 && square.y + i < DIM) {\n              let targetPiece = squares.find(s => s.props.x == square.x - i && s.props.y == square.y + i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.x - i,\n                  y: square.y + i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.x - i,\n                    y: square.y + i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          for (let i = 1; i <= DIM; i++) {\n            if (square.x + i < DIM && square.y - i >= 0) {\n              let targetPiece = squares.find(s => s.props.x == square.x + i && s.props.y == square.y - i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.x + i,\n                  y: square.y - i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.x + i,\n                    y: square.y - i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          break;\n        case \"knight\":\n          let targetPiece1 = squares.find(s => s.props.x == square.x - 2 && s.props.y == square.y - 1);\n          let targetPiece2 = squares.find(s => s.props.x == square.x - 2 && s.props.y == square.y + 1);\n          let targetPiece3 = squares.find(s => s.props.x == square.x + 2 && s.props.y == square.y - 1);\n          let targetPiece4 = squares.find(s => s.props.x == square.x + 2 && s.props.y == square.y + 1);\n          let targetPiece5 = squares.find(s => s.props.x == square.x - 1 && s.props.y == square.y - 2);\n          let targetPiece6 = squares.find(s => s.props.x == square.x + 1 && s.props.y == square.y - 2);\n          let targetPiece7 = squares.find(s => s.props.x == square.x - 1 && s.props.y == square.y + 2);\n          let targetPiece8 = squares.find(s => s.props.x == square.x + 1 && s.props.y == square.y + 2);\n          if (targetPiece1) {\n            if (!targetPiece1.props.piece) {\n              possibleMoves.push({\n                x: targetPiece1.props.x,\n                y: targetPiece1.props.y\n              });\n            } else {\n              if (targetPiece1.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece1.props.x,\n                  y: targetPiece1.props.y\n                });\n              }\n            }\n          }\n          if (targetPiece2) {\n            if (!targetPiece2.props.piece) {\n              possibleMoves.push({\n                x: targetPiece2.props.x,\n                y: targetPiece2.props.y\n              });\n            } else {\n              if (targetPiece2.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece2.props.x,\n                  y: targetPiece2.props.y\n                });\n              }\n            }\n          }\n          if (targetPiece3) {\n            if (!targetPiece3.props.piece) {\n              possibleMoves.push({\n                x: targetPiece3.props.x,\n                y: targetPiece3.props.y\n              });\n            } else {\n              if (targetPiece3.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece3.props.x,\n                  y: targetPiece3.props.y\n                });\n              }\n            }\n          }\n          if (targetPiece4) {\n            if (!targetPiece4.props.piece) {\n              possibleMoves.push({\n                x: targetPiece4.props.x,\n                y: targetPiece4.props.y\n              });\n            } else {\n              if (targetPiece4.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece4.props.x,\n                  y: targetPiece4.props.y\n                });\n              }\n            }\n          }\n          if (targetPiece5) {\n            if (!targetPiece5.props.piece) {\n              possibleMoves.push({\n                x: targetPiece5.props.x,\n                y: targetPiece5.props.y\n              });\n            } else {\n              if (targetPiece5.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece5.props.x,\n                  y: targetPiece5.props.y\n                });\n              }\n            }\n          }\n          if (targetPiece6) {\n            if (!targetPiece6.props.piece) {\n              possibleMoves.push({\n                x: targetPiece6.props.x,\n                y: targetPiece6.props.y\n              });\n            } else {\n              if (targetPiece6.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece6.props.x,\n                  y: targetPiece6.props.y\n                });\n              }\n            }\n          }\n          if (targetPiece7) {\n            if (!targetPiece7.props.piece) {\n              possibleMoves.push({\n                x: targetPiece7.props.x,\n                y: targetPiece7.props.y\n              });\n            } else {\n              if (targetPiece7.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece7.props.x,\n                  y: targetPiece7.props.y\n                });\n              }\n            }\n          }\n          if (targetPiece8) {\n            if (!targetPiece8.props.piece) {\n              possibleMoves.push({\n                x: targetPiece8.props.x,\n                y: targetPiece8.props.y\n              });\n            } else {\n              if (targetPiece8.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece8.props.x,\n                  y: targetPiece8.props.y\n                });\n              }\n            }\n          }\n          break;\n        case \"king\":\n          for (let i = -1; i < 2; i++) {\n            for (let j = -1; j < 2; j++) {\n              let targetPiece = squares.find(s => s.props.x == square.x + i && s.props.y == square.y + j);\n              if (targetPiece) {\n                if (!targetPiece.props.piece) {\n                  possibleMoves.push({\n                    x: targetPiece.props.x,\n                    y: targetPiece.props.y\n                  });\n                } else {\n                  if (targetPiece.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\n                    possibleMoves.push({\n                      x: targetPiece.props.x,\n                      y: targetPiece.props.y\n                    });\n                  }\n                }\n              }\n            }\n          }\n          break;\n        case \"queen\":\n          for (let i = square.x - 1; i >= 0; i--) {\n            let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.y);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: i,\n                y: square.y\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: i,\n                  y: square.y\n                });\n              }\n              break;\n            }\n          }\n          for (let i = square.y - 1; i >= 0; i--) {\n            let targetSquare = squares.find(s => s.props.x === square.x && s.props.y === i);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: square.x,\n                y: i\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: square.x,\n                  y: i\n                });\n              }\n              break;\n            }\n          }\n          for (let i = square.x + 1; i < DIM; i++) {\n            let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.y);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: i,\n                y: square.y\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: i,\n                  y: square.y\n                });\n              }\n              break;\n            }\n          }\n          for (let i = square.y + 1; i < DIM; i++) {\n            let targetSquare = squares.find(s => s.props.x === square.x && s.props.y === i);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: square.x,\n                y: i\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: square.x,\n                  y: i\n                });\n              }\n              break;\n            }\n          }\n          for (let i = 1; i <= DIM; i++) {\n            if (square.x - i >= 0 && square.y - i >= 0) {\n              let targetPiece = squares.find(s => s.props.x == square.x - i && s.props.y == square.y - i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.x - i,\n                  y: square.y - i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.x - i,\n                    y: square.y - i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          for (let i = 1; i <= DIM; i++) {\n            if (square.x + i < DIM && square.y + i < DIM) {\n              let targetPiece = squares.find(s => s.props.x == square.x + i && s.props.y == square.y + i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.x + i,\n                  y: square.y + i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.x + i,\n                    y: square.y + i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          for (let i = 1; i <= DIM; i++) {\n            if (square.x - i >= 0 && square.y + i < DIM) {\n              let targetPiece = squares.find(s => s.props.x == square.x - i && s.props.y == square.y + i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.x - i,\n                  y: square.y + i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.x - i,\n                    y: square.y + i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          for (let i = 1; i <= DIM; i++) {\n            if (square.x + i < DIM && square.y - i >= 0) {\n              let targetPiece = squares.find(s => s.props.x == square.x + i && s.props.y == square.y - i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.x + i,\n                  y: square.y - i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.x + i,\n                    y: square.y - i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    console.log(\"Possible Moves:\", possibleMoves);\n    this.updatePossibleMoves(possibleMoves);\n  }\n  pieceUpdate() {\n    this.setState({\n      piece: value\n    });\n  }\n  renderSquares() {\n    let squareColorIsWhite = true;\n    const squares = [];\n    for (let i = 0; i < DIM; i++) {\n      let row = ConvertFenToString(this.state.position[i]);\n      for (let j = 0; j < DIM; j++) {\n        const piece = row.charAt(j);\n        let color = squareColorIsWhite ? \"\" : \"dark\";\n        squares.push( /*#__PURE__*/_jsxDEV(Square, {\n          getPossibleMoves: this.getPossibleMoves.bind(this),\n          x: i,\n          y: j,\n          piece: ConvertFENPieceToPiece(piece.trim()),\n          color: color,\n          selectedSquareX: this.state.selectedSquareX,\n          setSelectedSquareX: this.updateSelectedSquareX,\n          selectedSquareY: this.state.selectedSquareY,\n          setSelectedSquareY: this.updateSelectedSquareY,\n          possibleMoves: this.state.possibleMoves,\n          updatePossibleMoves: this.updatePossibleMoves,\n          movePiece: this.movePiece,\n          onPieceUpdate: this.pieceUpdate\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 21\n        }, this));\n        squareColorIsWhite = !squareColorIsWhite;\n      }\n      squareColorIsWhite = !squareColorIsWhite;\n    }\n    return squares;\n  }\n  render() {\n    const squares = this.renderSquares();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessGrid\",\n      children: squares\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 13\n    }, this);\n  }\n}","map":{"version":3,"names":["Component","Square","ConvertFENPieceToPiece","ConvertFenToString","jsxDEV","_jsxDEV","DIM","Board","constructor","props","movePiece","x","y","squares","renderSquares","currentSquare","find","s","selectedSquare","state","selectedSquareX","selectedSquareY","updatePossibleMoves","moves","setState","possibleMoves","updateSelectedSquareX","updateSelectedSquareY","position","piece","getPossibleMoves","square","color","split","targetSquare1","push","targetSquare2","leftNeigborToPotentuallyCapture1","leftNeigborToPotentuallyCapture2","i","targetSquare","targetPiece","targetPiece1","targetPiece2","targetPiece3","targetPiece4","targetPiece5","targetPiece6","targetPiece7","targetPiece8","j","console","log","pieceUpdate","value","squareColorIsWhite","row","charAt","bind","trim","setSelectedSquareX","setSelectedSquareY","onPieceUpdate","fileName","_jsxFileName","lineNumber","columnNumber","render","className","children"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/src/Board.js"],"sourcesContent":["import { Component } from \"react\";\r\nimport { Square } from \"./Square.js\"\r\nimport { ConvertFENPieceToPiece, ConvertFenToString } from \"./HelperMethods.js\";\r\n\r\nconst DIM = 8; //8x8 Board\r\n\r\nexport class Board extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            position: [\r\n                'rnbqkbnr',\r\n                'pppppppp',\r\n                '8',\r\n                '8',\r\n                '8',\r\n                '8',\r\n                'PPPPPPPP',\r\n                'RNBQKBNR'\r\n            ],\r\n            possibleMoves: [],\r\n            selectedSquareX: \"\",\r\n            selectedSquareY: \"\",\r\n            piece: \"\"\r\n        };\r\n    }\r\n\r\n    movePiece = (x, y) => {\r\n        let squares = this.renderSquares();\r\n\r\n        let currentSquare = squares.find(s => s.props.x == x && s.props.y == y)\r\n        let selectedSquare = squares.find(s => s.props.x == this.state.selectedSquareX && s.props.y == this.state.selectedSquareY)\r\n    }\r\n\r\n    updatePossibleMoves = (moves) => {\r\n        this.setState({ possibleMoves: moves });\r\n    };\r\n\r\n    updateSelectedSquareX = (x) => {\r\n        this.setState({ selectedSquareX: x })\r\n    }\r\n\r\n    updateSelectedSquareY = (y) => {\r\n        this.setState({ selectedSquareY: y })\r\n    }\r\n\r\n    getPossibleMoves(square) {\r\n        const squares = this.renderSquares();\r\n        let possibleMoves = [];\r\n\r\n        if (square.state.piece) {\r\n            let color = square.state.piece.split('-')[0];\r\n            let piece = square.state.piece.split('-')[1];\r\n            switch (piece) {\r\n                case \"pawn\":\r\n                    if (color === \"white\") {\r\n                        //move one square ahead\r\n                        const targetSquare1 = squares.find(s => s.props.x === square.x - 1 && s.props.y === square.y);\r\n                        if (targetSquare1 && !targetSquare1.props.piece) {\r\n                            possibleMoves.push({ x: square.x - 1, y: square.y });\r\n                        }\r\n\r\n                        //move two squares on the very first move\r\n                        const targetSquare2 = squares.find(s => s.props.x === square.x - 2 && s.props.y === square.y);\r\n                        if (square.x === 6 && targetSquare2 && !targetSquare2.props.piece && !targetSquare1.props.piece) {\r\n                            possibleMoves.push({ x: square.x - 2, y: square.y });\r\n                        }\r\n\r\n                        //capture to the left diagonal\r\n                        const leftNeigborToPotentuallyCapture1 = squares.find(s => s.props.x === square.x - 1 && s.props.y === square.y - 1);\r\n                        if (leftNeigborToPotentuallyCapture1 && leftNeigborToPotentuallyCapture1.props.piece &&\r\n                            ConvertFENPieceToPiece(leftNeigborToPotentuallyCapture1.props.piece).split('-')[0] != square.piece.split(\"-\")[0]) {\r\n                            possibleMoves.push({ x: square.x - 1, y: square.y - 1 });\r\n                        }\r\n\r\n                        //capture to the right diagonal\r\n                        const leftNeigborToPotentuallyCapture2 = squares.find(s => s.props.x === square.x - 1 && s.props.y === square.y + 1);\r\n                        if (leftNeigborToPotentuallyCapture2 && leftNeigborToPotentuallyCapture2.props.piece &&\r\n                            ConvertFENPieceToPiece(leftNeigborToPotentuallyCapture2.props.piece).split('-')[0] != square.piece.split(\"-\")[0]) {\r\n                            possibleMoves.push({ x: square.x - 1, y: square.y + 1 });\r\n                        }\r\n\r\n                        //TODO: Implement the french fancy move - En passant\r\n                        //TODO: Implement promotion\r\n                    } else {\r\n                        const targetSquare1 = squares.find(s => s.props.x === square.x + 1 && s.props.y === square.y);\r\n                        if (targetSquare1 && !targetSquare1.props.piece) {\r\n                            possibleMoves.push({ x: square.x + 1, y: square.y });\r\n                        }\r\n\r\n                        //move two squares on the very first move\r\n                        const targetSquare2 = squares.find(s => s.props.x === square.x + 2 && s.props.y === square.y);\r\n                        if (square.x === 1 && targetSquare2 && !targetSquare2.props.piece && !targetSquare1.props.piece) {\r\n                            possibleMoves.push({ x: square.x + 2, y: square.y });\r\n                        }\r\n\r\n                        //capture to the left diagonal\r\n                        const leftNeigborToPotentuallyCapture1 = squares.find(s => s.props.x === square.x + 1 && s.props.y === square.y - 1);\r\n                        if (leftNeigborToPotentuallyCapture1 && leftNeigborToPotentuallyCapture1.props.piece &&\r\n                            ConvertFENPieceToPiece(leftNeigborToPotentuallyCapture1.props.piece).split('-')[0] != square.piece.split(\"-\")[0]) {\r\n                            possibleMoves.push({ x: square.x + 1, y: square.y - 1 });\r\n                        }\r\n\r\n                        //capture to the right diagonal\r\n                        const leftNeigborToPotentuallyCapture2 = squares.find(s => s.props.x === square.x + 1 && s.props.y === square.y + 1);\r\n                        if (leftNeigborToPotentuallyCapture2 && leftNeigborToPotentuallyCapture2.props.piece &&\r\n                            ConvertFENPieceToPiece(leftNeigborToPotentuallyCapture2.props.piece).split('-')[0] != square.piece.split(\"-\")[0]) {\r\n                            possibleMoves.push({ x: square.x + 1, y: square.y + 1 });\r\n                        }\r\n\r\n                        //TODO: Implement the french fancy move - En passant\r\n                        //TODO: Implement promotion\r\n                    }\r\n                    break;\r\n                case \"rook\":\r\n                    for (let i = square.x - 1; i >= 0; i--) {\r\n                        let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.y);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: i, y: square.y })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: i, y: square.y })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (let i = square.y - 1; i >= 0; i--) {\r\n                        let targetSquare = squares.find(s => s.props.x === square.x && s.props.y === i);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: square.x, y: i })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: square.x, y: i })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (let i = square.x + 1; i < DIM; i++) {\r\n                        let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.y);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: i, y: square.y })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: i, y: square.y })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (let i = square.y + 1; i < DIM; i++) {\r\n                        let targetSquare = squares.find(s => s.props.x === square.x && s.props.y === i);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: square.x, y: i })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: square.x, y: i })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"bishop\":\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.x - i >= 0 && square.y - i >= 0) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.x - i && s.props.y == square.y - i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.x - i, y: square.y - i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.x - i, y: square.y - i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.x + i < DIM && square.y + i < DIM) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.x + i && s.props.y == square.y + i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.x + i, y: square.y + i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.x + i, y: square.y + i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.x - i >= 0 && square.y + i < DIM) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.x - i && s.props.y == square.y + i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.x - i, y: square.y + i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.x - i, y: square.y + i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.x + i < DIM && square.y - i >= 0) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.x + i && s.props.y == square.y - i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.x + i, y: square.y - i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.x + i, y: square.y - i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"knight\":\r\n                    let targetPiece1 = squares.find(s => s.props.x == square.x - 2 && s.props.y == square.y - 1)\r\n                    let targetPiece2 = squares.find(s => s.props.x == square.x - 2 && s.props.y == square.y + 1)\r\n                    let targetPiece3 = squares.find(s => s.props.x == square.x + 2 && s.props.y == square.y - 1)\r\n                    let targetPiece4 = squares.find(s => s.props.x == square.x + 2 && s.props.y == square.y + 1)\r\n                    let targetPiece5 = squares.find(s => s.props.x == square.x - 1 && s.props.y == square.y - 2)\r\n                    let targetPiece6 = squares.find(s => s.props.x == square.x + 1 && s.props.y == square.y - 2)\r\n                    let targetPiece7 = squares.find(s => s.props.x == square.x - 1 && s.props.y == square.y + 2)\r\n                    let targetPiece8 = squares.find(s => s.props.x == square.x + 1 && s.props.y == square.y + 2)\r\n\r\n                    if (targetPiece1) {\r\n                        if (!targetPiece1.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece1.props.x, y: targetPiece1.props.y })\r\n                        } else {\r\n                            if (targetPiece1.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece1.props.x, y: targetPiece1.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (targetPiece2) {\r\n                        if (!targetPiece2.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece2.props.x, y: targetPiece2.props.y })\r\n                        } else {\r\n                            if (targetPiece2.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece2.props.x, y: targetPiece2.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (targetPiece3) {\r\n                        if (!targetPiece3.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece3.props.x, y: targetPiece3.props.y })\r\n                        } else {\r\n                            if (targetPiece3.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece3.props.x, y: targetPiece3.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (targetPiece4) {\r\n                        if (!targetPiece4.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece4.props.x, y: targetPiece4.props.y })\r\n                        } else {\r\n                            if (targetPiece4.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece4.props.x, y: targetPiece4.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (targetPiece5) {\r\n                        if (!targetPiece5.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece5.props.x, y: targetPiece5.props.y })\r\n                        } else {\r\n                            if (targetPiece5.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece5.props.x, y: targetPiece5.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (targetPiece6) {\r\n                        if (!targetPiece6.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece6.props.x, y: targetPiece6.props.y })\r\n                        } else {\r\n                            if (targetPiece6.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece6.props.x, y: targetPiece6.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (targetPiece7) {\r\n                        if (!targetPiece7.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece7.props.x, y: targetPiece7.props.y })\r\n                        } else {\r\n                            if (targetPiece7.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece7.props.x, y: targetPiece7.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (targetPiece8) {\r\n                        if (!targetPiece8.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece8.props.x, y: targetPiece8.props.y })\r\n                        } else {\r\n                            if (targetPiece8.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece8.props.x, y: targetPiece8.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    break;\r\n                case \"king\":\r\n                    for (let i = -1; i < 2; i++) {\r\n                        for (let j = -1; j < 2; j++) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.x + i && s.props.y == square.y + j)\r\n\r\n                            if (targetPiece) {\r\n                                if (!targetPiece.props.piece) {\r\n                                    possibleMoves.push({ x: targetPiece.props.x, y: targetPiece.props.y })\r\n                                } else {\r\n                                    if (targetPiece.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\r\n                                        possibleMoves.push({ x: targetPiece.props.x, y: targetPiece.props.y })\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"queen\":\r\n                    for (let i = square.x - 1; i >= 0; i--) {\r\n                        let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.y);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: i, y: square.y })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: i, y: square.y })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (let i = square.y - 1; i >= 0; i--) {\r\n                        let targetSquare = squares.find(s => s.props.x === square.x && s.props.y === i);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: square.x, y: i })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: square.x, y: i })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (let i = square.x + 1; i < DIM; i++) {\r\n                        let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.y);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: i, y: square.y })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: i, y: square.y })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (let i = square.y + 1; i < DIM; i++) {\r\n                        let targetSquare = squares.find(s => s.props.x === square.x && s.props.y === i);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: square.x, y: i })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: square.x, y: i })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.x - i >= 0 && square.y - i >= 0) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.x - i && s.props.y == square.y - i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.x - i, y: square.y - i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.x - i, y: square.y - i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.x + i < DIM && square.y + i < DIM) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.x + i && s.props.y == square.y + i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.x + i, y: square.y + i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.x + i, y: square.y + i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.x - i >= 0 && square.y + i < DIM) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.x - i && s.props.y == square.y + i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.x - i, y: square.y + i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.x - i, y: square.y + i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.x + i < DIM && square.y - i >= 0) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.x + i && s.props.y == square.y - i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.x + i, y: square.y - i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.state.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.x + i, y: square.y - i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        console.log(\"Possible Moves:\", possibleMoves);\r\n        this.updatePossibleMoves(possibleMoves);\r\n    }\r\n\r\n    pieceUpdate() {\r\n        this.setState({ piece: value })\r\n    }\r\n\r\n    renderSquares() {\r\n        let squareColorIsWhite = true;\r\n        const squares = [];\r\n        for (let i = 0; i < DIM; i++) {\r\n            let row = ConvertFenToString(this.state.position[i]);\r\n            for (let j = 0; j < DIM; j++) {\r\n                const piece = row.charAt(j);\r\n                let color = squareColorIsWhite ? \"\" : \"dark\";\r\n                squares.push(\r\n                    <Square\r\n                        getPossibleMoves={this.getPossibleMoves.bind(this)}\r\n                        key={`${i}-${j}`}\r\n                        x={i}\r\n                        y={j}\r\n                        piece={ConvertFENPieceToPiece(piece.trim())}\r\n                        color={color}\r\n                        selectedSquareX={this.state.selectedSquareX}\r\n                        setSelectedSquareX={this.updateSelectedSquareX}\r\n                        selectedSquareY={this.state.selectedSquareY}\r\n                        setSelectedSquareY={this.updateSelectedSquareY}\r\n                        possibleMoves={this.state.possibleMoves}\r\n                        updatePossibleMoves={this.updatePossibleMoves}\r\n                        movePiece={this.movePiece}\r\n                        onPieceUpdate={this.pieceUpdate}\r\n                    />\r\n                );\r\n                squareColorIsWhite = !squareColorIsWhite;\r\n            }\r\n            squareColorIsWhite = !squareColorIsWhite;\r\n        }\r\n        return squares;\r\n    }\r\n\r\n    render() {\r\n        const squares = this.renderSquares();\r\n        return (\r\n            <div className=\"chessGrid\">\r\n                {squares}\r\n            </div>\r\n        );\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}