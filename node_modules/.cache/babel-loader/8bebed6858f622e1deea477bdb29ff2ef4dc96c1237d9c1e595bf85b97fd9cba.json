{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vladi Gotsin\\\\Desktop\\\\react\\\\src\\\\Chess.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  dark,\n  piece,\n  x,\n  y,\n  move\n}) {\n  let c = \"chessSquare piece\";\n  c = dark ? c + ' dark' : c;\n  let p, cl;\n  if (piece != undefined) {\n    c = c + ' ' + piece;\n    p = piece.split('-')[1][0];\n    p = p == 'k' ? piece.split('-')[1][1] == 'n' ? 'n' : p : p;\n    cl = piece.split('-')[0][0] == 'w' ? true : false;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: c,\n    x: x,\n    y: y,\n    onClick: () => move(p, cl, x, y)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 12\n  }, this);\n}\n_c = Square;\nfunction Board({\n  position,\n  move\n}) {\n  let color;\n  let piece;\n  let rows = [];\n  let key = 1;\n  let white = true;\n  let x = 0;\n  let y = 0;\n  for (let i = 0; i < position.length; i++) {\n    y = 0;\n    for (let j = 0; j < position[i].length; j++) {\n      if (position[i].charCodeAt(j) >= 97 && position[i].charCodeAt(j) <= 122) {\n        color = 'black';\n      } else if (position[i].charCodeAt(j) >= 65 && position[i].charCodeAt(j) <= 90) {\n        color = 'white';\n      } else {\n        color = undefined;\n      }\n      switch (position[i][j].toLowerCase()) {\n        case \"p\":\n          piece = 'pawn';\n          break;\n        case 'n':\n          piece = 'knight';\n          break;\n        case 'k':\n          piece = 'king';\n          break;\n        case 'q':\n          piece = 'queen';\n          break;\n        case 'b':\n          piece = 'bishop';\n          break;\n        case 'r':\n          piece = 'rook';\n          break;\n        default:\n          piece = undefined;\n          break;\n      }\n      if (piece != undefined && color != undefined) {\n        rows.push( /*#__PURE__*/_jsxDEV(Square, {\n          dark: white ? false : true,\n          piece: color + '-' + piece,\n          x: x,\n          y: y,\n          move: move\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 27\n        }, this));\n        if (key % 8 != 0) {\n          white = !white;\n        }\n        key++;\n        y++;\n      } else {\n        for (let k = 0; k < Number(position[i][j]); k++) {\n          rows.push( /*#__PURE__*/_jsxDEV(Square, {\n            dark: white ? false : true,\n            x: x,\n            y: y,\n            move: move\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 31\n          }, this));\n          if (key % 8 != 0) {\n            white = !white;\n          }\n          key++;\n          y++;\n        }\n      }\n    }\n    x++;\n  }\n  return rows;\n}\n_c2 = Board;\nexport default function Chess() {\n  _s();\n  const [boardPosition, setBoardPosition] = useState(['rnbqkbnr', 'pppppppp', '8', '8', '8', '8', 'PPPPPPPP', 'RNBQKBNR']);\n  const [selectedPiece, setSelectedPiece] = useState('');\n  const [oldX, setOldX] = useState('');\n  const [oldY, setOldY] = useState('');\n  const [allowedMoves, setAllowedMoves] = useState([]);\n  const [whiteToMove, setWhiteToMove] = useState(true);\n  const [canWhiteShortCastle, setCanWhiteShortCastle] = useState(true);\n  const [canWhiteLongCastle, setCanWhiteLongCastle] = useState(true);\n  const [canBlackShortCastle, setCanBlackShortCastle] = useState(true);\n  const [canBlackLongCastle, setCanBlackLongCastle] = useState(true);\n  const [isWhiteInCheck, setIsWhiteInCheck] = useState(false);\n  const [isBlackInCheck, setIsBlackInCheck] = useState(false);\n  function handleCapture(x, y, pieceToCapture) {\n    if (selectedPiece.charCodeAt(0) >= 65 && selectedPiece.charCodeAt(0) <= 90) {\n      if (pieceToCapture.charCodeAt(0) >= 65 && pieceToCapture.charCodeAt(0) <= 90) {\n        return;\n      }\n    }\n    if (selectedPiece.charCodeAt(0) >= 97 && selectedPiece.charCodeAt(0) <= 122) {\n      if (pieceToCapture.charCodeAt(0) >= 97 && pieceToCapture.charCodeAt(0) <= 122) {\n        return;\n      }\n    }\n    let oldRow = boardPosition[oldX];\n    let newRow = boardPosition[x];\n    oldRow = convertFenToString(oldRow);\n    newRow = convertFenToString(newRow);\n    oldRow = oldRow.substring(0, oldY) + ' ' + oldRow.substring(oldY + 1, oldRow.length);\n    newRow = newRow.substring(0, y) + selectedPiece + newRow.substring(y + 1, newRow.length);\n    oldRow = convertStringToFen(oldRow);\n    newRow = convertStringToFen(newRow);\n    let newBoard = [];\n    for (let i = 0; i < boardPosition.length; i++) {\n      if (i == x || i == oldX) {\n        if (x == oldX) {\n          //TO DO: Implement capturing on the same row\n          console.warn(\"Implement capturing on the same row\");\n        } else if (i == x) {\n          newBoard.push(newRow);\n        } else if (i == oldX) {\n          newBoard.push(oldRow);\n        }\n      } else {\n        newBoard.push(boardPosition[i]);\n      }\n    }\n    setBoardPosition(newBoard);\n    setWhiteToMove(!whiteToMove);\n  }\n  function convertFenToString(fen) {\n    let result = '';\n    for (let i = 0; i < fen.length; i++) {\n      if (fen.charCodeAt(i) >= 48 && fen.charCodeAt(i) <= 57) {\n        result += ' '.repeat(Number(fen[i]));\n      } else {\n        result += fen[i];\n      }\n    }\n    return result;\n  }\n  function convertStringToFen(str) {\n    for (let i = str.length - 1; i >= 0; i--) {\n      if (str[i] == ' ') {\n        if (i < str.length - 1) {\n          if (str.charCodeAt(i + 1) >= 48 && str.charCodeAt(i + 1) <= 57) {\n            str = str.substring(0, i) + (Number(str[i + 1]) + 1).toString() + str.substring(i + 1, str.length);\n            str = str.slice(0, i + 1) + str.slice(i + 2);\n          } else {\n            str = str.substring(0, i) + '1' + str.substring(i + 1, str.length);\n          }\n        } else {\n          str = str.substring(0, i) + '1' + str.substring(i + 1, str.length);\n        }\n      }\n    }\n    return str;\n  }\n  const Move = (p, c, x, y) => {\n    if (selectedPiece) {\n      //allows to deselect a piece\n      if (x == oldX) {\n        if (y == oldY) {\n          setSelectedPiece('');\n          setOldX('');\n          setOldY('');\n          return;\n        }\n      }\n\n      //allow only king moves if in check\n      //TO DO: Allow check blocks and attacking pieces captures\n      if (whiteToMove) {\n        if (isWhiteInCheck) {\n          if (p != 'k') {\n            setSelectedPiece('');\n            setOldX('');\n            setOldY('');\n            return;\n          }\n        }\n      } else {\n        if (isBlackInCheck) {\n          if (p != 'k') {\n            setSelectedPiece('');\n            setOldX('');\n            setOldY('');\n            return;\n          }\n        }\n      }\n      let row = boardPosition[x];\n      let newRow = '';\n      let oldRow = '';\n      let allowed = false;\n\n      //check if the move you're making is legal\n      for (let i = 0; i < allowedMoves.length; i++) {\n        let move = allowedMoves[i];\n        if (x == move[0]) {\n          if (y == move[1]) {\n            allowed = true;\n          }\n        }\n      }\n\n      //stop if illegal move is used\n      if (!allowed) {\n        setOldX('');\n        setOldY('');\n        setSelectedPiece('');\n        return;\n      }\n\n      //convert FEN to string, update the position and convert back to FEN\n      newRow = convertFenToString(row);\n      if (newRow[y] != ' ') {\n        handleCapture(x, y, newRow[y]);\n        setOldX('');\n        setOldY('');\n        setSelectedPiece('');\n        return;\n      }\n      newRow = newRow.substring(0, y) + selectedPiece + newRow.substring(y + 1, newRow.length);\n      newRow = convertStringToFen(newRow);\n\n      //get the old position; if same row, get the current new position\n      row = x == oldX ? newRow : boardPosition[oldX];\n\n      //convert FEN to string, update the old position and convert back to FEN\n      oldRow = convertFenToString(row);\n      oldRow = oldRow.substring(0, oldY) + ' ' + oldRow.substring(oldY + 1, oldRow.length);\n      oldRow = convertStringToFen(oldRow);\n\n      //create a new board position and update the board\n      let newBoard = [];\n      for (let i = 0; i < boardPosition.length; i++) {\n        if (i == x || i == oldX) {\n          //use the old position if it's the same row as the old position will be updating the current newPosition and will have the most up-to-date values\n          if (x == oldX) {\n            newBoard.push(oldRow);\n          } else if (i == x) {\n            newBoard.push(newRow);\n          } else if (i == oldX) {\n            newBoard.push(oldRow);\n          }\n        } else {\n          newBoard.push(boardPosition[i]);\n        }\n      }\n\n      //removes the right to castle if the rook has moved for white\n      if (selectedPiece == 'R') {\n        if (oldX == 7 && oldY == 0) {\n          setCanWhiteLongCastle(false);\n        }\n        if (oldX == 7 && oldY == 7) {\n          setCanWhiteShortCastle(false);\n        }\n      }\n\n      //removes the right to castle if the rook has moved for black\n      if (selectedPiece == 'r') {\n        if (oldX == 0 && oldY == 0) {\n          setCanBlackLongCastle(false);\n        }\n        if (oldX == 0 && oldY == 7) {\n          setCanBlackShortCastle(false);\n        }\n      }\n\n      //block castling when king moves for black\n      if (selectedPiece == 'k') {\n        setCanBlackLongCastle(false);\n        setCanBlackShortCastle(false);\n      }\n\n      //block castling when king moves for white\n      if (selectedPiece == 'K') {\n        setCanWhiteLongCastle(false);\n        setCanWhiteShortCastle(false);\n      }\n\n      //handle castling for white\n      if (selectedPiece == 'K') {\n        if (y - oldY == 2) {\n          let castleRow = newBoard[7];\n          castleRow = convertFenToString(castleRow);\n          castleRow = castleRow.substring(0, 5) + \"RK \";\n          castleRow = convertStringToFen(castleRow);\n          newBoard[7] = castleRow;\n        }\n        if (oldY - y == 2) {\n          let castleRow = newBoard[7];\n          castleRow = convertFenToString(castleRow);\n          castleRow = \"  KR \" + castleRow.substring(5, 8);\n          castleRow = convertStringToFen(castleRow);\n          newBoard[7] = castleRow;\n        }\n      }\n\n      //handle castling for black\n      if (selectedPiece == 'k') {\n        if (y - oldY == 2) {\n          let castleRow = newBoard[0];\n          castleRow = convertFenToString(castleRow);\n          castleRow = castleRow.substring(0, 5) + \"rk \";\n          castleRow = convertStringToFen(castleRow);\n          newBoard[0] = castleRow;\n        }\n        if (oldY - y == 2) {\n          let castleRow = newBoard[0];\n          castleRow = convertFenToString(castleRow);\n          castleRow = \"  kr \" + castleRow.substring(5, 8);\n          castleRow = convertStringToFen(castleRow);\n          newBoard[0] = castleRow;\n        }\n      }\n\n      //update the board and reset the variables\n      setBoardPosition(newBoard);\n      setOldX('');\n      setOldY('');\n      setSelectedPiece('');\n      setWhiteToMove(!whiteToMove);\n    } else {\n      if (c != whiteToMove) {\n        return;\n      }\n      switch (p) {\n        case \"p\":\n          let pawnMoves = [];\n          if (c) {\n            if (x == 6) {\n              pawnMoves.push([x - 1, y]);\n              pawnMoves.push([x - 2, y]);\n            } else {\n              pawnMoves.push([x - 1, y]);\n            }\n            if (x > 0) {\n              if (y > 0) {\n                let currentRowPosition = boardPosition[x - 1];\n                currentRowPosition = convertFenToString(currentRowPosition);\n                if (currentRowPosition[y - 1] != ' ') {\n                  pawnMoves.push([x - 1, y - 1]);\n                }\n              }\n              if (y < 8) {\n                let currentRowPosition = boardPosition[x - 1];\n                currentRowPosition = convertFenToString(currentRowPosition);\n                if (currentRowPosition[y + 1] != ' ') {\n                  pawnMoves.push([x - 1, y + 1]);\n                }\n              }\n            }\n          } else {\n            if (x == 1) {\n              pawnMoves.push([x + 1, y]);\n              pawnMoves.push([x + 2, y]);\n            } else {\n              pawnMoves.push([x + 1, y]);\n            }\n            if (x < 8) {\n              if (y > 0) {\n                let currentRowPosition = boardPosition[x + 1];\n                currentRowPosition = convertFenToString(currentRowPosition);\n                if (currentRowPosition[y - 1] != ' ') {\n                  pawnMoves.push([x + 1, y - 1]);\n                }\n              }\n              if (y < 8) {\n                let currentRowPosition = boardPosition[x + 1];\n                currentRowPosition = convertFenToString(currentRowPosition);\n                if (currentRowPosition[y + 1] != ' ') {\n                  pawnMoves.push([x + 1, y + 1]);\n                }\n              }\n            }\n          }\n          setAllowedMoves(pawnMoves);\n          break;\n        case \"r\":\n          let rookMoves = [];\n          for (let i = 0; i < 8; i++) {\n            rookMoves.push([i, y]);\n            rookMoves.push([x, i]);\n          }\n          setAllowedMoves(rookMoves);\n          break;\n        case \"n\":\n          let knightMoves = [];\n          if (x - 2 >= 0 && y - 1 >= 0) {\n            knightMoves.push([x - 2, y - 1]);\n          }\n          if (x - 2 >= 0 && y + 1 < 8) {\n            knightMoves.push([x - 2, y + 1]);\n          }\n          if (x + 2 < 8 && y - 1 >= 0) {\n            knightMoves.push([x + 2, y - 1]);\n          }\n          if (x + 2 < 8 && y + 1 < 8) {\n            knightMoves.push([x + 2, y + 1]);\n          }\n          if (x - 1 >= 0 && y - 2 >= 0) {\n            knightMoves.push([x - 1, y - 2]);\n          }\n          if (x + 1 < 8 && y - 2 >= 0) {\n            knightMoves.push([x + 1, y - 2]);\n          }\n          if (x - 1 >= 0 && y + 2 < 8) {\n            knightMoves.push([x - 1, y + 2]);\n          }\n          if (x + 1 < 8 && y + 2 < 8) {\n            knightMoves.push([x + 1, y + 2]);\n          }\n          setAllowedMoves(knightMoves);\n          break;\n        case \"b\":\n          let bishopMoves = [];\n          for (let i = 1; i <= 8; i++) {\n            if (x - i >= 0 && y - 1 >= 0) {\n              bishopMoves.push([x - i, y - i]);\n            }\n            if (x + 1 < 8 && y + i < 8) {\n              bishopMoves.push([x + i, y + i]);\n            }\n            if (x + 1 < 8 && y - 1 >= 0) {\n              bishopMoves.push([x + i, y - i]);\n            }\n            if (x - i >= 0 && y + 1 < 8) {\n              bishopMoves.push([x - i, y + i]);\n            }\n          }\n          setAllowedMoves(bishopMoves);\n          break;\n        case \"q\":\n          let queenMoves = [];\n          for (let i = 1; i <= 8; i++) {\n            if (x - i >= 0 && y - 1 >= 0) {\n              queenMoves.push([x - i, y - i]);\n            }\n            if (x + 1 < 8 && y + i < 8) {\n              queenMoves.push([x + i, y + i]);\n            }\n            if (x + 1 < 8 && y - 1 >= 0) {\n              queenMoves.push([x + i, y - i]);\n            }\n            if (x - i >= 0 && y + 1 < 8) {\n              queenMoves.push([x - i, y + i]);\n            }\n          }\n          for (let i = 0; i < 8; i++) {\n            queenMoves.push([i, y]);\n            queenMoves.push([x, i]);\n          }\n          setAllowedMoves(queenMoves);\n          break;\n        case \"k\":\n          let kingMoves = [];\n          for (let i = x - 1; i <= x + 1; i++) {\n            for (let j = y - 1; j <= y + 1; j++) {\n              //handle edges\n              if (i >= 0 && i < 8) {\n                if (j >= 0 && j < 8) {\n                  kingMoves.push([i, j]);\n                }\n              }\n            }\n          }\n\n          //handle castling\n          if (c) {\n            let lastRow = boardPosition[7];\n            lastRow = convertFenToString(lastRow);\n            if (canWhiteShortCastle) {\n              if (lastRow[5] == ' ' && lastRow[6] == ' ') {\n                kingMoves.push([x, y + 2]);\n              }\n            }\n            if (canWhiteLongCastle) {\n              if (lastRow[1] == ' ' && lastRow[2] == ' ' && lastRow[3] == ' ') {\n                kingMoves.push([x, y - 2]);\n              }\n            }\n          } else {\n            let firstRow = boardPosition[0];\n            firstRow = convertFenToString(firstRow);\n            if (canBlackShortCastle) {\n              if (firstRow[5] == ' ' && firstRow[6] == ' ') {\n                kingMoves.push([x, y + 2]);\n              }\n            }\n            if (canBlackLongCastle) {\n              if (firstRow[1] == ' ' && firstRow[2] == ' ' && firstRow[3] == ' ') {\n                kingMoves.push([x, y - 2]);\n              }\n            }\n          }\n          setAllowedMoves(kingMoves);\n          break;\n        default:\n          break;\n      }\n      if (p != undefined && c != undefined) {\n        p = c ? p.toUpperCase() : p;\n        setSelectedPiece(p);\n        setOldX(x);\n        setOldY(y);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"grid\",\n        className: \"chessGrid\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          position: boardPosition,\n          move: Move\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 586,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(Chess, \"IhlxSP5GS1lVgwjDIGSJHLPT3iM=\");\n_c3 = Chess;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Chess\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","dark","piece","x","y","move","c","p","cl","undefined","split","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","Board","position","color","rows","key","white","i","length","j","charCodeAt","toLowerCase","push","k","Number","_c2","Chess","_s","boardPosition","setBoardPosition","selectedPiece","setSelectedPiece","oldX","setOldX","oldY","setOldY","allowedMoves","setAllowedMoves","whiteToMove","setWhiteToMove","canWhiteShortCastle","setCanWhiteShortCastle","canWhiteLongCastle","setCanWhiteLongCastle","canBlackShortCastle","setCanBlackShortCastle","canBlackLongCastle","setCanBlackLongCastle","isWhiteInCheck","setIsWhiteInCheck","isBlackInCheck","setIsBlackInCheck","handleCapture","pieceToCapture","oldRow","newRow","convertFenToString","substring","convertStringToFen","newBoard","console","warn","fen","result","repeat","str","toString","slice","Move","row","allowed","castleRow","pawnMoves","currentRowPosition","rookMoves","knightMoves","bishopMoves","queenMoves","kingMoves","lastRow","firstRow","toUpperCase","children","id","_c3","$RefreshReg$"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/src/Chess.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nfunction Square({ dark, piece, x, y, move }) {\r\n    let c = \"chessSquare piece\";\r\n    c = dark ? c + ' dark' : c;\r\n\r\n    let p, cl;\r\n\r\n    if (piece != undefined) {\r\n        c = c + ' ' + piece;\r\n        p = piece.split('-')[1][0];\r\n        p = p == 'k' ? (piece.split('-')[1][1] == 'n' ? 'n' : p) : p;\r\n        cl = piece.split('-')[0][0] == 'w' ? true : false;\r\n    }\r\n\r\n    return <div className={c} x={x} y={y} onClick={() => move(p, cl, x, y)}></div>\r\n}\r\n\r\nfunction Board({ position, move }) {\r\n\r\n    let color;\r\n    let piece;\r\n    let rows = [];\r\n    let key = 1;\r\n    let white = true;\r\n    let x = 0;\r\n    let y = 0;\r\n\r\n    for (let i = 0; i < position.length; i++) {\r\n        y = 0;\r\n        for (let j = 0; j < position[i].length; j++) {\r\n            if (position[i].charCodeAt(j) >= 97 && position[i].charCodeAt(j) <= 122) {\r\n                color = 'black';\r\n            } else if (position[i].charCodeAt(j) >= 65 && position[i].charCodeAt(j) <= 90) {\r\n                color = 'white';\r\n            } else {\r\n                color = undefined;\r\n            }\r\n\r\n            switch (position[i][j].toLowerCase()) {\r\n                case \"p\":\r\n                    piece = 'pawn';\r\n                    break;\r\n                case 'n':\r\n                    piece = 'knight';\r\n                    break;\r\n                case 'k':\r\n                    piece = 'king';\r\n                    break;\r\n                case 'q':\r\n                    piece = 'queen';\r\n                    break;\r\n                case 'b':\r\n                    piece = 'bishop';\r\n                    break;\r\n                case 'r':\r\n                    piece = 'rook';\r\n                    break;\r\n                default:\r\n                    piece = undefined;\r\n                    break;\r\n            }\r\n\r\n            if (piece != undefined && color != undefined) {\r\n                rows.push(<Square dark={white ? false : true} key={key} piece={color + '-' + piece} x={x} y={y} move={move}></Square>)\r\n                if (key % 8 != 0) {\r\n                    white = !white;\r\n                }\r\n                key++\r\n                y++;\r\n            } else {\r\n                for (let k = 0; k < Number(position[i][j]); k++) {\r\n                    rows.push(<Square dark={white ? false : true} key={key} x={x} y={y} move={move}></Square>)\r\n                    if (key % 8 != 0) {\r\n                        white = !white;\r\n                    }\r\n                    key++;\r\n                    y++\r\n                }\r\n            }\r\n        }\r\n        x++;\r\n    }\r\n\r\n    return rows;\r\n}\r\n\r\nexport default function Chess() {\r\n\r\n    const [boardPosition, setBoardPosition] = useState(\r\n        [\r\n            'rnbqkbnr',\r\n            'pppppppp',\r\n            '8',\r\n            '8',\r\n            '8',\r\n            '8',\r\n            'PPPPPPPP',\r\n            'RNBQKBNR'\r\n        ]);\r\n\r\n    const [selectedPiece, setSelectedPiece] = useState('');\r\n    const [oldX, setOldX] = useState('');\r\n    const [oldY, setOldY] = useState('');\r\n    const [allowedMoves, setAllowedMoves] = useState([])\r\n    const [whiteToMove, setWhiteToMove] = useState(true);\r\n    const [canWhiteShortCastle, setCanWhiteShortCastle] = useState(true);\r\n    const [canWhiteLongCastle, setCanWhiteLongCastle] = useState(true);\r\n    const [canBlackShortCastle, setCanBlackShortCastle] = useState(true);\r\n    const [canBlackLongCastle, setCanBlackLongCastle] = useState(true);\r\n    const [isWhiteInCheck, setIsWhiteInCheck] = useState(false);\r\n    const [isBlackInCheck, setIsBlackInCheck] = useState(false);\r\n\r\n    function handleCapture(x, y, pieceToCapture) {\r\n        if (selectedPiece.charCodeAt(0) >= 65 && selectedPiece.charCodeAt(0) <= 90) {\r\n            if (pieceToCapture.charCodeAt(0) >= 65 && pieceToCapture.charCodeAt(0) <= 90) {\r\n                return\r\n            }\r\n        }\r\n\r\n        if (selectedPiece.charCodeAt(0) >= 97 && selectedPiece.charCodeAt(0) <= 122) {\r\n            if (pieceToCapture.charCodeAt(0) >= 97 && pieceToCapture.charCodeAt(0) <= 122) {\r\n                return\r\n            }\r\n        }\r\n\r\n        let oldRow = boardPosition[oldX];\r\n        let newRow = boardPosition[x];\r\n\r\n        oldRow = convertFenToString(oldRow);\r\n        newRow = convertFenToString(newRow);\r\n\r\n        oldRow = oldRow.substring(0, oldY) + ' ' + oldRow.substring(oldY + 1, oldRow.length)\r\n        newRow = newRow.substring(0, y) + selectedPiece + newRow.substring(y + 1, newRow.length)\r\n\r\n        oldRow = convertStringToFen(oldRow)\r\n        newRow = convertStringToFen(newRow)\r\n\r\n        let newBoard = [];\r\n\r\n        for (let i = 0; i < boardPosition.length; i++) {\r\n            if (i == x || i == oldX) {\r\n                if (x == oldX) {\r\n                    //TO DO: Implement capturing on the same row\r\n                    console.warn(\"Implement capturing on the same row\")\r\n                }\r\n                else if (i == x) {\r\n                    newBoard.push(newRow);\r\n                } else if (i == oldX) {\r\n                    newBoard.push(oldRow);\r\n                }\r\n            } else {\r\n                newBoard.push(boardPosition[i]);\r\n            }\r\n        }\r\n\r\n        setBoardPosition(newBoard)\r\n        setWhiteToMove(!whiteToMove)\r\n    }\r\n\r\n    function convertFenToString(fen) {\r\n        let result = '';\r\n\r\n        for (let i = 0; i < fen.length; i++) {\r\n            if (fen.charCodeAt(i) >= 48 && fen.charCodeAt(i) <= 57) {\r\n                result += ' '.repeat(Number(fen[i]))\r\n            } else {\r\n                result += fen[i];\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function convertStringToFen(str) {\r\n        for (let i = str.length - 1; i >= 0; i--) {\r\n            if (str[i] == ' ') {\r\n                if (i < str.length - 1) {\r\n                    if (str.charCodeAt(i + 1) >= 48 && str.charCodeAt(i + 1) <= 57) {\r\n                        str = str.substring(0, i) + (Number(str[i + 1]) + 1).toString() + str.substring(i + 1, str.length);\r\n                        str = str.slice(0, i + 1) + str.slice(i + 2);\r\n                    } else {\r\n                        str = str.substring(0, i) + '1' + str.substring(i + 1, str.length);\r\n                    }\r\n                } else {\r\n                    str = str.substring(0, i) + '1' + str.substring(i + 1, str.length);\r\n                }\r\n            }\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n    const Move = (p, c, x, y) => {\r\n        if (selectedPiece) {\r\n\r\n            //allows to deselect a piece\r\n            if (x == oldX) {\r\n                if (y == oldY) {\r\n                    setSelectedPiece('')\r\n                    setOldX('')\r\n                    setOldY('')\r\n                    return\r\n                }\r\n            }\r\n\r\n            //allow only king moves if in check\r\n            //TO DO: Allow check blocks and attacking pieces captures\r\n            if (whiteToMove) {\r\n                if (isWhiteInCheck) {\r\n                    if (p != 'k') {\r\n                        setSelectedPiece('')\r\n                        setOldX('')\r\n                        setOldY('')\r\n                        return\r\n                    }\r\n                }\r\n            } else {\r\n                if (isBlackInCheck) {\r\n                    if (p != 'k') {\r\n                        setSelectedPiece('')\r\n                        setOldX('')\r\n                        setOldY('')\r\n                        return\r\n                    }\r\n                }\r\n            }\r\n\r\n            let row = boardPosition[x];\r\n            let newRow = '';\r\n            let oldRow = '';\r\n            let allowed = false;\r\n\r\n            //check if the move you're making is legal\r\n            for (let i = 0; i < allowedMoves.length; i++) {\r\n                let move = allowedMoves[i];\r\n\r\n                if (x == move[0]) {\r\n                    if (y == move[1]) {\r\n                        allowed = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            //stop if illegal move is used\r\n            if (!allowed) {\r\n                setOldX('')\r\n                setOldY('')\r\n                setSelectedPiece('')\r\n                return\r\n            }\r\n\r\n            //convert FEN to string, update the position and convert back to FEN\r\n            newRow = convertFenToString(row);\r\n\r\n            if (newRow[y] != ' ') {\r\n                handleCapture(x, y, newRow[y]);\r\n                setOldX('')\r\n                setOldY('')\r\n                setSelectedPiece('')\r\n                return;\r\n            }\r\n\r\n            newRow = newRow.substring(0, y) + selectedPiece + newRow.substring(y + 1, newRow.length);\r\n            newRow = convertStringToFen(newRow);\r\n\r\n            //get the old position; if same row, get the current new position\r\n            row = x == oldX ? newRow : boardPosition[oldX];\r\n\r\n            //convert FEN to string, update the old position and convert back to FEN\r\n            oldRow = convertFenToString(row);\r\n            oldRow = oldRow.substring(0, oldY) + ' ' + oldRow.substring(oldY + 1, oldRow.length);\r\n            oldRow = convertStringToFen(oldRow);\r\n\r\n            //create a new board position and update the board\r\n            let newBoard = [];\r\n\r\n            for (let i = 0; i < boardPosition.length; i++) {\r\n                if (i == x || i == oldX) {\r\n                    //use the old position if it's the same row as the old position will be updating the current newPosition and will have the most up-to-date values\r\n                    if (x == oldX) {\r\n                        newBoard.push(oldRow);\r\n                    }\r\n                    else if (i == x) {\r\n                        newBoard.push(newRow);\r\n                    } else if (i == oldX) {\r\n                        newBoard.push(oldRow);\r\n                    }\r\n                } else {\r\n                    newBoard.push(boardPosition[i]);\r\n                }\r\n            }\r\n\r\n            //removes the right to castle if the rook has moved for white\r\n            if (selectedPiece == 'R') {\r\n                if (oldX == 7 && oldY == 0) {\r\n                    setCanWhiteLongCastle(false)\r\n                }\r\n                if (oldX == 7 && oldY == 7) {\r\n                    setCanWhiteShortCastle(false)\r\n                }\r\n            }\r\n\r\n            //removes the right to castle if the rook has moved for black\r\n            if (selectedPiece == 'r') {\r\n                if (oldX == 0 && oldY == 0) {\r\n                    setCanBlackLongCastle(false)\r\n                }\r\n                if (oldX == 0 && oldY == 7) {\r\n                    setCanBlackShortCastle(false)\r\n                }\r\n            }\r\n\r\n            //block castling when king moves for black\r\n            if (selectedPiece == 'k') {\r\n                setCanBlackLongCastle(false)\r\n                setCanBlackShortCastle(false)\r\n            }\r\n\r\n            //block castling when king moves for white\r\n            if (selectedPiece == 'K') {\r\n                setCanWhiteLongCastle(false)\r\n                setCanWhiteShortCastle(false)\r\n            }\r\n\r\n            //handle castling for white\r\n            if (selectedPiece == 'K') {\r\n                if (y - oldY == 2) {\r\n                    let castleRow = newBoard[7];\r\n                    castleRow = convertFenToString(castleRow)\r\n                    castleRow = castleRow.substring(0, 5) + \"RK \"\r\n                    castleRow = convertStringToFen(castleRow)\r\n                    newBoard[7] = castleRow\r\n                }\r\n\r\n                if (oldY - y == 2) {\r\n                    let castleRow = newBoard[7];\r\n                    castleRow = convertFenToString(castleRow)\r\n                    castleRow = \"  KR \" + castleRow.substring(5, 8)\r\n                    castleRow = convertStringToFen(castleRow)\r\n                    newBoard[7] = castleRow\r\n                }\r\n            }\r\n\r\n            //handle castling for black\r\n            if (selectedPiece == 'k') {\r\n                if (y - oldY == 2) {\r\n                    let castleRow = newBoard[0];\r\n                    castleRow = convertFenToString(castleRow)\r\n                    castleRow = castleRow.substring(0, 5) + \"rk \"\r\n                    castleRow = convertStringToFen(castleRow)\r\n                    newBoard[0] = castleRow\r\n                }\r\n\r\n                if (oldY - y == 2) {\r\n                    let castleRow = newBoard[0];\r\n                    castleRow = convertFenToString(castleRow)\r\n                    castleRow = \"  kr \" + castleRow.substring(5, 8)\r\n                    castleRow = convertStringToFen(castleRow)\r\n                    newBoard[0] = castleRow\r\n                }\r\n            }\r\n\r\n            //update the board and reset the variables\r\n            setBoardPosition(newBoard);\r\n            setOldX('')\r\n            setOldY('')\r\n            setSelectedPiece('')\r\n\r\n            setWhiteToMove(!whiteToMove)\r\n        } else {\r\n            if (c != whiteToMove) {\r\n                return\r\n            }\r\n\r\n            switch (p) {\r\n                case \"p\":\r\n                    let pawnMoves = [];\r\n                    if (c) {\r\n                        if (x == 6) {\r\n                            pawnMoves.push([x - 1, y])\r\n                            pawnMoves.push([x - 2, y])\r\n                        } else {\r\n                            pawnMoves.push([x - 1, y])\r\n                        }\r\n\r\n                        if (x > 0) {\r\n                            if (y > 0) {\r\n                                let currentRowPosition = boardPosition[x - 1];\r\n                                currentRowPosition = convertFenToString(currentRowPosition);\r\n                                if (currentRowPosition[y - 1] != ' ') {\r\n                                    pawnMoves.push([x - 1, y - 1])\r\n                                }\r\n                            }\r\n\r\n                            if (y < 8) {\r\n                                let currentRowPosition = boardPosition[x - 1];\r\n                                currentRowPosition = convertFenToString(currentRowPosition);\r\n                                if (currentRowPosition[y + 1] != ' ') {\r\n                                    pawnMoves.push([x - 1, y + 1])\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (x == 1) {\r\n                            pawnMoves.push([x + 1, y])\r\n                            pawnMoves.push([x + 2, y])\r\n                        } else {\r\n                            pawnMoves.push([x + 1, y])\r\n                        }\r\n\r\n                        if (x < 8) {\r\n                            if (y > 0) {\r\n                                let currentRowPosition = boardPosition[x + 1];\r\n                                currentRowPosition = convertFenToString(currentRowPosition);\r\n                                if (currentRowPosition[y - 1] != ' ') {\r\n                                    pawnMoves.push([x + 1, y - 1])\r\n                                }\r\n                            }\r\n\r\n                            if (y < 8) {\r\n                                let currentRowPosition = boardPosition[x + 1];\r\n                                currentRowPosition = convertFenToString(currentRowPosition);\r\n                                if (currentRowPosition[y + 1] != ' ') {\r\n                                    pawnMoves.push([x + 1, y + 1])\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    setAllowedMoves(pawnMoves)\r\n                    break;\r\n                case \"r\":\r\n                    let rookMoves = [];\r\n                    for (let i = 0; i < 8; i++) {\r\n                        rookMoves.push([i, y]);\r\n                        rookMoves.push([x, i]);\r\n                    }\r\n                    setAllowedMoves(rookMoves)\r\n                    break;\r\n                case \"n\":\r\n                    let knightMoves = [];\r\n\r\n                    if (x - 2 >= 0 && y - 1 >= 0) {\r\n                        knightMoves.push([x - 2, y - 1]);\r\n                    }\r\n\r\n                    if (x - 2 >= 0 && y + 1 < 8) {\r\n                        knightMoves.push([x - 2, y + 1]);\r\n                    }\r\n\r\n                    if (x + 2 < 8 && y - 1 >= 0) {\r\n                        knightMoves.push([x + 2, y - 1]);\r\n                    }\r\n\r\n                    if (x + 2 < 8 && y + 1 < 8) {\r\n                        knightMoves.push([x + 2, y + 1]);\r\n                    }\r\n\r\n                    if (x - 1 >= 0 && y - 2 >= 0) {\r\n                        knightMoves.push([x - 1, y - 2]);\r\n                    }\r\n\r\n                    if (x + 1 < 8 && y - 2 >= 0) {\r\n                        knightMoves.push([x + 1, y - 2]);\r\n                    }\r\n\r\n                    if (x - 1 >= 0 && y + 2 < 8) {\r\n                        knightMoves.push([x - 1, y + 2]);\r\n                    }\r\n\r\n                    if (x + 1 < 8 && y + 2 < 8) {\r\n                        knightMoves.push([x + 1, y + 2]);\r\n                    }\r\n\r\n                    setAllowedMoves(knightMoves)\r\n                    break;\r\n                case \"b\":\r\n                    let bishopMoves = [];\r\n                    for (let i = 1; i <= 8; i++) {\r\n                        if (x - i >= 0 && y - 1 >= 0) {\r\n                            bishopMoves.push([x - i, y - i]);\r\n                        }\r\n\r\n                        if (x + 1 < 8 && y + i < 8) {\r\n                            bishopMoves.push([x + i, y + i]);\r\n                        }\r\n\r\n                        if (x + 1 < 8 && y - 1 >= 0) {\r\n                            bishopMoves.push([x + i, y - i]);\r\n                        }\r\n\r\n                        if (x - i >= 0 && y + 1 < 8) {\r\n                            bishopMoves.push([x - i, y + i]);\r\n                        }\r\n                    }\r\n                    setAllowedMoves(bishopMoves);\r\n                    break;\r\n                case \"q\":\r\n                    let queenMoves = [];\r\n                    for (let i = 1; i <= 8; i++) {\r\n                        if (x - i >= 0 && y - 1 >= 0) {\r\n                            queenMoves.push([x - i, y - i]);\r\n                        }\r\n\r\n                        if (x + 1 < 8 && y + i < 8) {\r\n                            queenMoves.push([x + i, y + i]);\r\n                        }\r\n\r\n                        if (x + 1 < 8 && y - 1 >= 0) {\r\n                            queenMoves.push([x + i, y - i]);\r\n                        }\r\n\r\n                        if (x - i >= 0 && y + 1 < 8) {\r\n                            queenMoves.push([x - i, y + i]);\r\n                        }\r\n                    }\r\n                    for (let i = 0; i < 8; i++) {\r\n                        queenMoves.push([i, y]);\r\n                        queenMoves.push([x, i]);\r\n                    }\r\n                    setAllowedMoves(queenMoves)\r\n                    break;\r\n                case \"k\":\r\n                    let kingMoves = [];\r\n                    for (let i = x - 1; i <= x + 1; i++) {\r\n                        for (let j = y - 1; j <= y + 1; j++) {\r\n                            //handle edges\r\n                            if (i >= 0 && i < 8) {\r\n                                if (j >= 0 && j < 8) {\r\n                                    kingMoves.push([i, j]);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    //handle castling\r\n                    if (c) {\r\n                        let lastRow = boardPosition[7]\r\n                        lastRow = convertFenToString(lastRow)\r\n                        if (canWhiteShortCastle) {\r\n                            if (lastRow[5] == ' ' && lastRow[6] == ' ') {\r\n                                kingMoves.push([x, y + 2])\r\n                            }\r\n                        }\r\n\r\n                        if (canWhiteLongCastle) {\r\n                            if (lastRow[1] == ' ' && lastRow[2] == ' ' && lastRow[3] == ' ') {\r\n                                kingMoves.push([x, y - 2]);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        let firstRow = boardPosition[0]\r\n                        firstRow = convertFenToString(firstRow)\r\n\r\n                        if (canBlackShortCastle) {\r\n                            if (firstRow[5] == ' ' && firstRow[6] == ' ') {\r\n                                kingMoves.push([x, y + 2])\r\n                            }\r\n                        }\r\n\r\n                        if (canBlackLongCastle) {\r\n                            if (firstRow[1] == ' ' && firstRow[2] == ' ' && firstRow[3] == ' ') {\r\n                                kingMoves.push([x, y - 2]);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    setAllowedMoves(kingMoves);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            if (p != undefined && c != undefined) {\r\n                p = c ? p.toUpperCase() : p;\r\n\r\n                setSelectedPiece(p);\r\n                setOldX(x);\r\n                setOldY(y);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (<>\r\n        <div className=\"chessContainer\">\r\n            <div id=\"grid\" className=\"chessGrid\">\r\n                <Board position={boardPosition} move={Move}></Board>\r\n            </div>\r\n        </div>\r\n    </>)\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}