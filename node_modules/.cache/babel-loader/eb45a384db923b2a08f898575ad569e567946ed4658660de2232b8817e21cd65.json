{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vladi Gotsin\\\\Desktop\\\\react\\\\src\\\\Board.js\";\nimport { Component } from \"react\";\nimport { Square } from \"./Square.js\";\nimport { ConvertFENPieceToPiece, ConvertFenToString, UpdatePosition } from \"./HelperMethods.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DIM = 8; //8x8 Board\n\nexport class Board extends Component {\n  constructor(props) {\n    super(props);\n    this.checkForChecks = (square, targetSquare) => {\n      for (let i = 0; i < this.state.prevPossibleMoves.length; i++) {\n        let currentSquare = squares.find(s => s.props.x == this.state.selectedSquareX && s.props.y == this.state.selectedSquareY);\n        console.log(this.state.prevPossibleMoves[i]);\n      }\n    };\n    this.movePiece = (x, y) => {\n      let squares = this.renderSquares();\n      let targetSquare = squares.find(s => s.props.x == x && s.props.y == y);\n      let square = squares.find(s => s.props.x == this.state.selectedSquareX && s.props.y == this.state.selectedSquareY);\n      let color = square.props.piece.split(\"-\")[0];\n      let piece = square.props.piece.split(\"-\")[1];\n      this.checkForChecks(square, targetSquare);\n\n      //disable castling if the king moves\n      if (piece == \"king\") {\n        if (color == \"white\") {\n          this.setState({\n            canWhiteLongCastle: false,\n            canWhiteShortCastle: false\n          });\n        } else {\n          this.setState({\n            canBlackLongCastle: false,\n            canBlackShortCastle: false\n          });\n        }\n      }\n\n      //disable castling if the rook moves\n      if (piece == \"rook\") {\n        if (square.props.x == 7 && square.props.y == 7) {\n          this.setState({\n            canWhiteShortCastle: false\n          });\n        }\n        if (square.props.x == 0 && square.props.y == 7) {\n          this.setState({\n            canBlackShortCastle: false\n          });\n        }\n        if (square.props.x == 7 && square.props.y == 0) {\n          this.setState({\n            canWhiteLongCastle: false\n          });\n        }\n        if (square.props.x == 0 && square.props.y == 0) {\n          this.setState({\n            canBlackLongCastle: false\n          });\n        }\n      }\n      let p = UpdatePosition(square, targetSquare, this.state.position);\n      this.setState({\n        position: p,\n        prevPossibleMoves: this.state.possibleMoves,\n        possibleMoves: []\n      });\n\n      //enabling en passant\n\n      if (piece == \"pawn\") {\n        if (Math.abs(square.props.x - targetSquare.props.x) == 2) {\n          let enPassant1 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y - 1);\n          let enPassant2 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y + 1);\n          if (enPassant1) {\n            if (enPassant1.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (enPassant1.props.piece.split(\"-\")[0] != color) {\n                this.setState({\n                  enPassantPossible: true,\n                  enPassantX: targetSquare.props.x,\n                  enPassantY: targetSquare.props.y\n                });\n                return;\n              }\n            }\n          }\n          if (enPassant2) {\n            if (enPassant2.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (enPassant2.props.piece.split(\"-\")[0] != color) {\n                this.setState({\n                  enPassantPossible: true,\n                  enPassantX: targetSquare.props.x,\n                  enPassantY: targetSquare.props.y\n                });\n                return;\n              }\n            }\n          }\n        }\n      }\n      this.setState({\n        enPassantPossible: false,\n        enPassantX: \"\",\n        enPassantY: \"\"\n      });\n    };\n    this.updatePossibleMoves = moves => {\n      this.setState({\n        possibleMoves: moves\n      });\n    };\n    this.updateSelectedSquareX = x => {\n      this.setState({\n        selectedSquareX: x\n      });\n    };\n    this.updateSelectedSquareY = y => {\n      this.setState({\n        selectedSquareY: y\n      });\n    };\n    this.state = {\n      position: ['rnbqkbnr', 'pppppppp', '8', '8', '8', '8', 'PPPPPPPP', 'RNBQKBNR'],\n      possibleMoves: [],\n      selectedSquareX: \"\",\n      selectedSquareY: \"\",\n      canWhiteShortCastle: true,\n      canWhiteLongCastle: true,\n      canBlackShortCastle: true,\n      canBlackLongCastle: true,\n      enPassantPossible: false,\n      enPassantX: \"\",\n      enPassantY: \"\",\n      prevPossibleMoves: []\n    };\n  }\n  getPossibleMoves(square) {\n    const squares = this.renderSquares();\n    let possibleMoves = [];\n    if (square.props.piece) {\n      let color = square.props.piece.split('-')[0];\n      let piece = square.props.piece.split('-')[1];\n      switch (piece) {\n        case \"pawn\":\n          if (color === \"white\") {\n            //move one square ahead\n            const targetSquare1 = squares.find(s => s.props.x === square.props.x - 1 && s.props.y === square.props.y);\n            if (targetSquare1 && !targetSquare1.props.piece) {\n              possibleMoves.push({\n                x: square.props.x - 1,\n                y: square.props.y\n              });\n            }\n\n            //move two squares on the very first move\n            const targetSquare2 = squares.find(s => s.props.x === square.props.x - 2 && s.props.y === square.props.y);\n            if (square.props.x === 6 && targetSquare2 && !targetSquare2.props.piece && !targetSquare1.props.piece) {\n              possibleMoves.push({\n                x: square.props.x - 2,\n                y: square.props.y\n              });\n            }\n\n            //capture to the left diagonal\n            const leftNeigborToPotentuallyCapture1 = squares.find(s => s.props.x === square.props.x - 1 && s.props.y === square.props.y - 1);\n            if (leftNeigborToPotentuallyCapture1 && leftNeigborToPotentuallyCapture1.props.piece && leftNeigborToPotentuallyCapture1.props.piece.split('-')[0] != square.props.piece.split(\"-\")[0]) {\n              possibleMoves.push({\n                x: square.props.x - 1,\n                y: square.props.y - 1\n              });\n            }\n\n            //capture to the right diagonal\n            const leftNeigborToPotentuallyCapture2 = squares.find(s => s.props.x === square.props.x - 1 && s.props.y === square.props.y + 1);\n            if (leftNeigborToPotentuallyCapture2 && leftNeigborToPotentuallyCapture2.props.piece && leftNeigborToPotentuallyCapture2.props.piece.split('-')[0] != square.props.piece.split(\"-\")[0]) {\n              possibleMoves.push({\n                x: square.props.x - 1,\n                y: square.props.y + 1\n              });\n            }\n\n            //En Passant\n            const enPassant1 = squares.find(s => s.props.x == square.props.x && s.props.y == square.props.y - 1);\n            const enPassant2 = squares.find(s => s.props.x == square.props.x && s.props.y == square.props.y + 1);\n            if (square.props.x == 3) {\n              if (enPassant1) {\n                if (enPassant1.props.piece.split(\"-\")[1] == \"pawn\" && this.state.enPassantPossible) {\n                  if (enPassant1.props.piece.split(\"-\")[0] != color) {\n                    if (enPassant1.props.x == this.state.enPassantX && enPassant1.props.y == this.state.enPassantY) {\n                      possibleMoves.push({\n                        x: square.props.x - 1,\n                        y: square.props.y - 1\n                      });\n                    }\n                  }\n                }\n              }\n              if (enPassant2) {\n                if (enPassant2.props.piece.split(\"-\")[1] == \"pawn\" && this.state.enPassantPossible) {\n                  if (enPassant2.props.piece.split(\"-\")[0] != color) {\n                    if (enPassant2.props.x == this.state.enPassantX && enPassant2.props.y == this.state.enPassantY) {\n                      possibleMoves.push({\n                        x: square.props.x - 1,\n                        y: square.props.y + 1\n                      });\n                    }\n                  }\n                }\n              }\n            }\n\n            //TODO: Implement promotion\n          } else {\n            const targetSquare1 = squares.find(s => s.props.x === square.props.x + 1 && s.props.y === square.props.y);\n            if (targetSquare1 && !targetSquare1.props.piece) {\n              possibleMoves.push({\n                x: square.props.x + 1,\n                y: square.props.y\n              });\n            }\n\n            //move two squares on the very first move\n            const targetSquare2 = squares.find(s => s.props.x === square.props.x + 2 && s.props.y === square.props.y);\n            if (square.props.x === 1 && targetSquare2 && !targetSquare2.props.piece && !targetSquare1.props.piece) {\n              possibleMoves.push({\n                x: square.props.x + 2,\n                y: square.props.y\n              });\n            }\n\n            //capture to the left diagonal\n            const leftNeigborToPotentuallyCapture1 = squares.find(s => s.props.x === square.props.x + 1 && s.props.y === square.props.y - 1);\n            if (leftNeigborToPotentuallyCapture1 && leftNeigborToPotentuallyCapture1.props.piece && leftNeigborToPotentuallyCapture1.props.piece.split('-')[0] != square.props.piece.split(\"-\")[0]) {\n              possibleMoves.push({\n                x: square.props.x + 1,\n                y: square.props.y - 1\n              });\n            }\n\n            //capture to the right diagonal\n            const leftNeigborToPotentuallyCapture2 = squares.find(s => s.props.x === square.props.x + 1 && s.props.y === square.props.y + 1);\n            if (leftNeigborToPotentuallyCapture2 && leftNeigborToPotentuallyCapture2.props.piece && leftNeigborToPotentuallyCapture2.props.piece.split('-')[0] != square.props.piece.split(\"-\")[0]) {\n              possibleMoves.push({\n                x: square.props.x + 1,\n                y: square.props.y + 1\n              });\n            }\n\n            //En Passant\n            const enPassant1 = squares.find(s => s.props.x == square.props.x && s.props.y == square.props.y - 1);\n            const enPassant2 = squares.find(s => s.props.x == square.props.x && s.props.y == square.props.y + 1);\n            if (square.props.x == 4) {\n              if (enPassant1) {\n                if (enPassant1.props.piece.split(\"-\")[1] == \"pawn\" && this.state.enPassantPossible) {\n                  if (enPassant1.props.piece.split(\"-\")[0] != color) {\n                    if (enPassant1.props.x == this.state.enPassantX && enPassant1.props.y == this.state.enPassantY) {\n                      possibleMoves.push({\n                        x: square.props.x + 1,\n                        y: square.props.y - 1\n                      });\n                    }\n                  }\n                }\n              }\n              if (enPassant2) {\n                if (enPassant2.props.piece.split(\"-\")[1] == \"pawn\" && this.state.enPassantPossible) {\n                  if (enPassant2.props.piece.split(\"-\")[0] != color) {\n                    if (enPassant2.props.x == this.state.enPassantX && enPassant2.props.y == this.state.enPassantY) {\n                      possibleMoves.push({\n                        x: square.props.x + 1,\n                        y: square.props.y + 1\n                      });\n                    }\n                  }\n                }\n              }\n            }\n\n            //TODO: Implement promotion\n          }\n          break;\n        case \"rook\":\n          for (let i = square.props.x - 1; i >= 0; i--) {\n            let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.props.y);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: i,\n                y: square.props.y\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: i,\n                  y: square.props.y\n                });\n              }\n              break;\n            }\n          }\n          for (let i = square.props.y - 1; i >= 0; i--) {\n            let targetSquare = squares.find(s => s.props.x === square.props.x && s.props.y === i);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: square.props.x,\n                y: i\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: square.props.x,\n                  y: i\n                });\n              }\n              break;\n            }\n          }\n          for (let i = square.props.x + 1; i < DIM; i++) {\n            let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.props.y);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: i,\n                y: square.props.y\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: i,\n                  y: square.props.y\n                });\n              }\n              break;\n            }\n          }\n          for (let i = square.props.y + 1; i < DIM; i++) {\n            let targetSquare = squares.find(s => s.props.x === square.props.x && s.props.y === i);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: square.props.x,\n                y: i\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: square.props.x,\n                  y: i\n                });\n              }\n              break;\n            }\n          }\n          break;\n        case \"bishop\":\n          for (let i = 1; i <= DIM; i++) {\n            if (square.props.x - i >= 0 && square.props.y - i >= 0) {\n              let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.props.x - i,\n                  y: square.props.y - i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.props.x - i,\n                    y: square.props.y - i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          for (let i = 1; i <= DIM; i++) {\n            if (square.props.x + i < DIM && square.props.y + i < DIM) {\n              let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.props.x + i,\n                  y: square.props.y + i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.props.x + i,\n                    y: square.props.y + i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          for (let i = 1; i <= DIM; i++) {\n            if (square.props.x - i >= 0 && square.props.y + i < DIM) {\n              let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.props.x - i,\n                  y: square.props.y + i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.props.x - i,\n                    y: square.props.y + i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          for (let i = 1; i <= DIM; i++) {\n            if (square.props.x + i < DIM && square.props.y - i >= 0) {\n              let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.props.x + i,\n                  y: square.props.y - i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.props.x + i,\n                    y: square.props.y - i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          break;\n        case \"knight\":\n          let targetPiece1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1);\n          let targetPiece2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1);\n          let targetPiece3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1);\n          let targetPiece4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1);\n          let targetPiece5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2);\n          let targetPiece6 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2);\n          let targetPiece7 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2);\n          let targetPiece8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2);\n          if (targetPiece1) {\n            if (!targetPiece1.props.piece) {\n              possibleMoves.push({\n                x: targetPiece1.props.x,\n                y: targetPiece1.props.y\n              });\n            } else {\n              if (targetPiece1.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece1.props.x,\n                  y: targetPiece1.props.y\n                });\n              }\n            }\n          }\n          if (targetPiece2) {\n            if (!targetPiece2.props.piece) {\n              possibleMoves.push({\n                x: targetPiece2.props.x,\n                y: targetPiece2.props.y\n              });\n            } else {\n              if (targetPiece2.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece2.props.x,\n                  y: targetPiece2.props.y\n                });\n              }\n            }\n          }\n          if (targetPiece3) {\n            if (!targetPiece3.props.piece) {\n              possibleMoves.push({\n                x: targetPiece3.props.x,\n                y: targetPiece3.props.y\n              });\n            } else {\n              if (targetPiece3.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece3.props.x,\n                  y: targetPiece3.props.y\n                });\n              }\n            }\n          }\n          if (targetPiece4) {\n            if (!targetPiece4.props.piece) {\n              possibleMoves.push({\n                x: targetPiece4.props.x,\n                y: targetPiece4.props.y\n              });\n            } else {\n              if (targetPiece4.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece4.props.x,\n                  y: targetPiece4.props.y\n                });\n              }\n            }\n          }\n          if (targetPiece5) {\n            if (!targetPiece5.props.piece) {\n              possibleMoves.push({\n                x: targetPiece5.props.x,\n                y: targetPiece5.props.y\n              });\n            } else {\n              if (targetPiece5.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece5.props.x,\n                  y: targetPiece5.props.y\n                });\n              }\n            }\n          }\n          if (targetPiece6) {\n            if (!targetPiece6.props.piece) {\n              possibleMoves.push({\n                x: targetPiece6.props.x,\n                y: targetPiece6.props.y\n              });\n            } else {\n              if (targetPiece6.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece6.props.x,\n                  y: targetPiece6.props.y\n                });\n              }\n            }\n          }\n          if (targetPiece7) {\n            if (!targetPiece7.props.piece) {\n              possibleMoves.push({\n                x: targetPiece7.props.x,\n                y: targetPiece7.props.y\n              });\n            } else {\n              if (targetPiece7.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece7.props.x,\n                  y: targetPiece7.props.y\n                });\n              }\n            }\n          }\n          if (targetPiece8) {\n            if (!targetPiece8.props.piece) {\n              possibleMoves.push({\n                x: targetPiece8.props.x,\n                y: targetPiece8.props.y\n              });\n            } else {\n              if (targetPiece8.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece8.props.x,\n                  y: targetPiece8.props.y\n                });\n              }\n            }\n          }\n          break;\n        case \"king\":\n          for (let i = -1; i < 2; i++) {\n            for (let j = -1; j < 2; j++) {\n              let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + j);\n              if (targetPiece) {\n                if (!targetPiece.props.piece) {\n                  possibleMoves.push({\n                    x: targetPiece.props.x,\n                    y: targetPiece.props.y\n                  });\n                } else {\n                  if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                    possibleMoves.push({\n                      x: targetPiece.props.x,\n                      y: targetPiece.props.y\n                    });\n                  }\n                }\n              }\n            }\n          }\n\n          //Castling logic\n          if (color == \"white\") {\n            if (this.state.canWhiteLongCastle) {\n              if (this.state.position[7].charAt(1) == 3 && this.state.position[7].charAt(0) == 'R') {\n                possibleMoves.push({\n                  x: square.props.x,\n                  y: square.props.y - 2\n                });\n              }\n            }\n            if (this.state.canWhiteShortCastle) {\n              if (this.state.position[7].split(\"\").reverse().join(\"\").charAt(1) == 2 && this.state.position[7].split(\"\").reverse().join(\"\").charAt(0) == 'R') {\n                possibleMoves.push({\n                  x: square.props.x,\n                  y: square.props.y + 2\n                });\n              }\n            }\n          } else {\n            if (this.state.canBlackLongCastle) {\n              if (this.state.position[0].charAt(1) == 3 && this.state.position[0].charAt(0) == 'r') {\n                possibleMoves.push({\n                  x: square.props.x,\n                  y: square.props.y - 2\n                });\n              }\n            }\n            if (this.state.canBlackShortCastle) {\n              if (this.state.position[0].split(\"\").reverse().join(\"\").charAt(1) == 2 && this.state.position[0].split(\"\").reverse().join(\"\").charAt(0) == 'r') {\n                possibleMoves.push({\n                  x: square.props.x,\n                  y: square.props.y + 2\n                });\n              }\n            }\n          }\n          break;\n        case \"queen\":\n          for (let i = square.props.x - 1; i >= 0; i--) {\n            let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.props.y);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: i,\n                y: square.props.y\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: i,\n                  y: square.props.y\n                });\n              }\n              break;\n            }\n          }\n          for (let i = square.props.y - 1; i >= 0; i--) {\n            let targetSquare = squares.find(s => s.props.x === square.props.x && s.props.y === i);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: square.props.x,\n                y: i\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: square.props.x,\n                  y: i\n                });\n              }\n              break;\n            }\n          }\n          for (let i = square.props.x + 1; i < DIM; i++) {\n            let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.props.y);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: i,\n                y: square.props.y\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: i,\n                  y: square.props.y\n                });\n              }\n              break;\n            }\n          }\n          for (let i = square.props.y + 1; i < DIM; i++) {\n            let targetSquare = squares.find(s => s.props.x === square.props.x && s.props.y === i);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: square.props.x,\n                y: i\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: square.props.x,\n                  y: i\n                });\n              }\n              break;\n            }\n          }\n          for (let i = 1; i <= DIM; i++) {\n            if (square.props.x - i >= 0 && square.props.y - i >= 0) {\n              let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.props.x - i,\n                  y: square.props.y - i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.props.x - i,\n                    y: square.props.y - i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          for (let i = 1; i <= DIM; i++) {\n            if (square.props.x + i < DIM && square.props.y + i < DIM) {\n              let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.props.x + i,\n                  y: square.props.y + i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.props.x + i,\n                    y: square.props.y + i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          for (let i = 1; i <= DIM; i++) {\n            if (square.props.x - i >= 0 && square.props.y + i < DIM) {\n              let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.props.x - i,\n                  y: square.props.y + i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.props.x - i,\n                    y: square.props.y + i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          for (let i = 1; i <= DIM; i++) {\n            if (square.props.x + i < DIM && square.props.y - i >= 0) {\n              let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.props.x + i,\n                  y: square.props.y - i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.props.x + i,\n                    y: square.props.y - i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    console.log(\"Possible Moves:\", possibleMoves);\n    this.updatePossibleMoves(possibleMoves);\n  }\n  renderSquares() {\n    let squareColorIsWhite = true;\n    const squares = [];\n    for (let i = 0; i < DIM; i++) {\n      let row = ConvertFenToString(this.state.position[i]);\n      for (let j = 0; j < DIM; j++) {\n        const piece = row.charAt(j);\n        let color = squareColorIsWhite ? \"\" : \"dark\";\n        squares.push( /*#__PURE__*/_jsxDEV(Square, {\n          getPossibleMoves: this.getPossibleMoves.bind(this),\n          x: i,\n          y: j,\n          piece: ConvertFENPieceToPiece(piece.trim()),\n          color: color,\n          selectedSquareX: this.state.selectedSquareX,\n          setSelectedSquareX: this.updateSelectedSquareX,\n          selectedSquareY: this.state.selectedSquareY,\n          setSelectedSquareY: this.updateSelectedSquareY,\n          possibleMoves: this.state.possibleMoves,\n          updatePossibleMoves: this.updatePossibleMoves,\n          movePiece: this.movePiece\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 620,\n          columnNumber: 21\n        }, this));\n        squareColorIsWhite = !squareColorIsWhite;\n      }\n      squareColorIsWhite = !squareColorIsWhite;\n    }\n    return squares;\n  }\n  render() {\n    //const squares = this.renderSquares();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessGrid\",\n      children: this.renderSquares()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 646,\n      columnNumber: 13\n    }, this);\n  }\n}","map":{"version":3,"names":["Component","Square","ConvertFENPieceToPiece","ConvertFenToString","UpdatePosition","jsxDEV","_jsxDEV","DIM","Board","constructor","props","checkForChecks","square","targetSquare","i","state","prevPossibleMoves","length","currentSquare","squares","find","s","x","selectedSquareX","y","selectedSquareY","console","log","movePiece","renderSquares","color","piece","split","setState","canWhiteLongCastle","canWhiteShortCastle","canBlackLongCastle","canBlackShortCastle","p","position","possibleMoves","Math","abs","enPassant1","enPassant2","enPassantPossible","enPassantX","enPassantY","updatePossibleMoves","moves","updateSelectedSquareX","updateSelectedSquareY","getPossibleMoves","targetSquare1","push","targetSquare2","leftNeigborToPotentuallyCapture1","leftNeigborToPotentuallyCapture2","targetPiece","targetPiece1","targetPiece2","targetPiece3","targetPiece4","targetPiece5","targetPiece6","targetPiece7","targetPiece8","j","charAt","reverse","join","squareColorIsWhite","row","bind","trim","setSelectedSquareX","setSelectedSquareY","fileName","_jsxFileName","lineNumber","columnNumber","render","className","children"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/src/Board.js"],"sourcesContent":["import { Component } from \"react\";\r\nimport { Square } from \"./Square.js\"\r\nimport { ConvertFENPieceToPiece, ConvertFenToString, UpdatePosition } from \"./HelperMethods.js\";\r\n\r\nconst DIM = 8; //8x8 Board\r\n\r\nexport class Board extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            position: [\r\n                'rnbqkbnr',\r\n                'pppppppp',\r\n                '8',\r\n                '8',\r\n                '8',\r\n                '8',\r\n                'PPPPPPPP',\r\n                'RNBQKBNR'\r\n            ],\r\n            possibleMoves: [],\r\n            selectedSquareX: \"\",\r\n            selectedSquareY: \"\",\r\n            canWhiteShortCastle: true,\r\n            canWhiteLongCastle: true,\r\n            canBlackShortCastle: true,\r\n            canBlackLongCastle: true,\r\n            enPassantPossible: false,\r\n            enPassantX: \"\",\r\n            enPassantY: \"\",\r\n            prevPossibleMoves: []\r\n        };\r\n    }\r\n\r\n    checkForChecks = (square, targetSquare) => {\r\n        for (let i = 0; i < this.state.prevPossibleMoves.length; i++) {\r\n            let currentSquare = squares.find(s => s.props.x == this.state.selectedSquareX && s.props.y == this.state.selectedSquareY)\r\n            console.log(this.state.prevPossibleMoves[i])\r\n        }\r\n    }\r\n\r\n    movePiece = (x, y) => {\r\n        let squares = this.renderSquares();\r\n\r\n        let targetSquare = squares.find(s => s.props.x == x && s.props.y == y)\r\n        let square = squares.find(s => s.props.x == this.state.selectedSquareX && s.props.y == this.state.selectedSquareY)\r\n\r\n        let color = square.props.piece.split(\"-\")[0]\r\n        let piece = square.props.piece.split(\"-\")[1]\r\n\r\n        this.checkForChecks(square, targetSquare);\r\n\r\n        //disable castling if the king moves\r\n        if (piece == \"king\") {\r\n            if (color == \"white\") {\r\n                this.setState({ canWhiteLongCastle: false, canWhiteShortCastle: false })\r\n            } else {\r\n                this.setState({ canBlackLongCastle: false, canBlackShortCastle: false })\r\n            }\r\n        }\r\n\r\n        //disable castling if the rook moves\r\n        if (piece == \"rook\") {\r\n            if (square.props.x == 7 && square.props.y == 7) {\r\n                this.setState({ canWhiteShortCastle: false })\r\n            }\r\n\r\n            if (square.props.x == 0 && square.props.y == 7) {\r\n                this.setState({ canBlackShortCastle: false })\r\n            }\r\n\r\n            if (square.props.x == 7 && square.props.y == 0) {\r\n                this.setState({ canWhiteLongCastle: false })\r\n            }\r\n\r\n            if (square.props.x == 0 && square.props.y == 0) {\r\n                this.setState({ canBlackLongCastle: false })\r\n            }\r\n        }\r\n\r\n        let p = UpdatePosition(square, targetSquare, this.state.position)\r\n\r\n        this.setState({ position: p, prevPossibleMoves: this.state.possibleMoves, possibleMoves: [] })\r\n\r\n        //enabling en passant\r\n\r\n        if (piece == \"pawn\") {\r\n            if (Math.abs(square.props.x - targetSquare.props.x) == 2) {\r\n                let enPassant1 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y - 1)\r\n                let enPassant2 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y + 1)\r\n\r\n                if (enPassant1) {\r\n                    if (enPassant1.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (enPassant1.props.piece.split(\"-\")[0] != color) {\r\n                            this.setState({ enPassantPossible: true, enPassantX: targetSquare.props.x, enPassantY: targetSquare.props.y })\r\n                            return\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (enPassant2) {\r\n                    if (enPassant2.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (enPassant2.props.piece.split(\"-\")[0] != color) {\r\n                            this.setState({ enPassantPossible: true, enPassantX: targetSquare.props.x, enPassantY: targetSquare.props.y })\r\n                            return\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({ enPassantPossible: false, enPassantX: \"\", enPassantY: \"\" })\r\n    }\r\n\r\n    updatePossibleMoves = (moves) => {\r\n        this.setState({ possibleMoves: moves });\r\n    };\r\n\r\n    updateSelectedSquareX = (x) => {\r\n        this.setState({ selectedSquareX: x })\r\n    }\r\n\r\n    updateSelectedSquareY = (y) => {\r\n        this.setState({ selectedSquareY: y })\r\n    }\r\n\r\n    getPossibleMoves(square) {\r\n        const squares = this.renderSquares();\r\n        let possibleMoves = [];\r\n\r\n        if (square.props.piece) {\r\n            let color = square.props.piece.split('-')[0];\r\n            let piece = square.props.piece.split('-')[1];\r\n            switch (piece) {\r\n                case \"pawn\":\r\n                    if (color === \"white\") {\r\n                        //move one square ahead\r\n                        const targetSquare1 = squares.find(s => s.props.x === square.props.x - 1 && s.props.y === square.props.y);\r\n                        if (targetSquare1 && !targetSquare1.props.piece) {\r\n                            possibleMoves.push({ x: square.props.x - 1, y: square.props.y });\r\n                        }\r\n\r\n                        //move two squares on the very first move\r\n                        const targetSquare2 = squares.find(s => s.props.x === square.props.x - 2 && s.props.y === square.props.y);\r\n                        if (square.props.x === 6 && targetSquare2 && !targetSquare2.props.piece && !targetSquare1.props.piece) {\r\n                            possibleMoves.push({ x: square.props.x - 2, y: square.props.y });\r\n                        }\r\n\r\n                        //capture to the left diagonal\r\n                        const leftNeigborToPotentuallyCapture1 = squares.find(s => s.props.x === square.props.x - 1 && s.props.y === square.props.y - 1);\r\n                        if (leftNeigborToPotentuallyCapture1 && leftNeigborToPotentuallyCapture1.props.piece &&\r\n                            leftNeigborToPotentuallyCapture1.props.piece.split('-')[0] != square.props.piece.split(\"-\")[0]) {\r\n                            possibleMoves.push({ x: square.props.x - 1, y: square.props.y - 1 });\r\n                        }\r\n\r\n                        //capture to the right diagonal\r\n                        const leftNeigborToPotentuallyCapture2 = squares.find(s => s.props.x === square.props.x - 1 && s.props.y === square.props.y + 1);\r\n                        if (leftNeigborToPotentuallyCapture2 && leftNeigborToPotentuallyCapture2.props.piece &&\r\n                            leftNeigborToPotentuallyCapture2.props.piece.split('-')[0] != square.props.piece.split(\"-\")[0]) {\r\n                            possibleMoves.push({ x: square.props.x - 1, y: square.props.y + 1 });\r\n                        }\r\n\r\n                        //En Passant\r\n                        const enPassant1 = squares.find(s => s.props.x == square.props.x && s.props.y == square.props.y - 1)\r\n                        const enPassant2 = squares.find(s => s.props.x == square.props.x && s.props.y == square.props.y + 1)\r\n\r\n                        if (square.props.x == 3) {\r\n                            if (enPassant1) {\r\n                                if (enPassant1.props.piece.split(\"-\")[1] == \"pawn\" && this.state.enPassantPossible) {\r\n                                    if (enPassant1.props.piece.split(\"-\")[0] != color) {\r\n                                        if (enPassant1.props.x == this.state.enPassantX && enPassant1.props.y == this.state.enPassantY) {\r\n                                            possibleMoves.push({ x: square.props.x - 1, y: square.props.y - 1 })\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            if (enPassant2) {\r\n                                if (enPassant2.props.piece.split(\"-\")[1] == \"pawn\" && this.state.enPassantPossible) {\r\n                                    if (enPassant2.props.piece.split(\"-\")[0] != color) {\r\n                                        if (enPassant2.props.x == this.state.enPassantX && enPassant2.props.y == this.state.enPassantY) {\r\n                                            possibleMoves.push({ x: square.props.x - 1, y: square.props.y + 1 })\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        //TODO: Implement promotion\r\n                    } else {\r\n                        const targetSquare1 = squares.find(s => s.props.x === square.props.x + 1 && s.props.y === square.props.y);\r\n                        if (targetSquare1 && !targetSquare1.props.piece) {\r\n                            possibleMoves.push({ x: square.props.x + 1, y: square.props.y });\r\n                        }\r\n\r\n                        //move two squares on the very first move\r\n                        const targetSquare2 = squares.find(s => s.props.x === square.props.x + 2 && s.props.y === square.props.y);\r\n                        if (square.props.x === 1 && targetSquare2 && !targetSquare2.props.piece && !targetSquare1.props.piece) {\r\n                            possibleMoves.push({ x: square.props.x + 2, y: square.props.y });\r\n                        }\r\n\r\n                        //capture to the left diagonal\r\n                        const leftNeigborToPotentuallyCapture1 = squares.find(s => s.props.x === square.props.x + 1 && s.props.y === square.props.y - 1);\r\n                        if (leftNeigborToPotentuallyCapture1 && leftNeigborToPotentuallyCapture1.props.piece &&\r\n                            leftNeigborToPotentuallyCapture1.props.piece.split('-')[0] != square.props.piece.split(\"-\")[0]) {\r\n                            possibleMoves.push({ x: square.props.x + 1, y: square.props.y - 1 });\r\n                        }\r\n\r\n                        //capture to the right diagonal\r\n                        const leftNeigborToPotentuallyCapture2 = squares.find(s => s.props.x === square.props.x + 1 && s.props.y === square.props.y + 1);\r\n                        if (leftNeigborToPotentuallyCapture2 && leftNeigborToPotentuallyCapture2.props.piece &&\r\n                            leftNeigborToPotentuallyCapture2.props.piece.split('-')[0] != square.props.piece.split(\"-\")[0]) {\r\n                            possibleMoves.push({ x: square.props.x + 1, y: square.props.y + 1 });\r\n                        }\r\n\r\n                        //En Passant\r\n                        const enPassant1 = squares.find(s => s.props.x == square.props.x && s.props.y == square.props.y - 1)\r\n                        const enPassant2 = squares.find(s => s.props.x == square.props.x && s.props.y == square.props.y + 1)\r\n\r\n                        if (square.props.x == 4) {\r\n                            if (enPassant1) {\r\n                                if (enPassant1.props.piece.split(\"-\")[1] == \"pawn\" && this.state.enPassantPossible) {\r\n                                    if (enPassant1.props.piece.split(\"-\")[0] != color) {\r\n                                        if (enPassant1.props.x == this.state.enPassantX && enPassant1.props.y == this.state.enPassantY) {\r\n                                            possibleMoves.push({ x: square.props.x + 1, y: square.props.y - 1 })\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            if (enPassant2) {\r\n                                if (enPassant2.props.piece.split(\"-\")[1] == \"pawn\" && this.state.enPassantPossible) {\r\n                                    if (enPassant2.props.piece.split(\"-\")[0] != color) {\r\n                                        if (enPassant2.props.x == this.state.enPassantX && enPassant2.props.y == this.state.enPassantY) {\r\n                                            possibleMoves.push({ x: square.props.x + 1, y: square.props.y + 1 })\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        //TODO: Implement promotion\r\n                    }\r\n                    break;\r\n                case \"rook\":\r\n                    for (let i = square.props.x - 1; i >= 0; i--) {\r\n                        let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.props.y);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: i, y: square.props.y })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: i, y: square.props.y })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (let i = square.props.y - 1; i >= 0; i--) {\r\n                        let targetSquare = squares.find(s => s.props.x === square.props.x && s.props.y === i);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: square.props.x, y: i })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: square.props.x, y: i })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (let i = square.props.x + 1; i < DIM; i++) {\r\n                        let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.props.y);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: i, y: square.props.y })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: i, y: square.props.y })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (let i = square.props.y + 1; i < DIM; i++) {\r\n                        let targetSquare = squares.find(s => s.props.x === square.props.x && s.props.y === i);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: square.props.x, y: i })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: square.props.x, y: i })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"bishop\":\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.props.x - i >= 0 && square.props.y - i >= 0) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.props.x - i, y: square.props.y - i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.props.x - i, y: square.props.y - i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.props.x + i < DIM && square.props.y + i < DIM) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.props.x + i, y: square.props.y + i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.props.x + i, y: square.props.y + i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.props.x - i >= 0 && square.props.y + i < DIM) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.props.x - i, y: square.props.y + i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.props.x - i, y: square.props.y + i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.props.x + i < DIM && square.props.y - i >= 0) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.props.x + i, y: square.props.y - i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.props.x + i, y: square.props.y - i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"knight\":\r\n                    let targetPiece1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1)\r\n                    let targetPiece2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1)\r\n                    let targetPiece3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1)\r\n                    let targetPiece4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1)\r\n                    let targetPiece5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2)\r\n                    let targetPiece6 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2)\r\n                    let targetPiece7 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2)\r\n                    let targetPiece8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2)\r\n\r\n                    if (targetPiece1) {\r\n                        if (!targetPiece1.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece1.props.x, y: targetPiece1.props.y })\r\n                        } else {\r\n                            if (targetPiece1.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece1.props.x, y: targetPiece1.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (targetPiece2) {\r\n                        if (!targetPiece2.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece2.props.x, y: targetPiece2.props.y })\r\n                        } else {\r\n                            if (targetPiece2.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece2.props.x, y: targetPiece2.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (targetPiece3) {\r\n                        if (!targetPiece3.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece3.props.x, y: targetPiece3.props.y })\r\n                        } else {\r\n                            if (targetPiece3.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece3.props.x, y: targetPiece3.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (targetPiece4) {\r\n                        if (!targetPiece4.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece4.props.x, y: targetPiece4.props.y })\r\n                        } else {\r\n                            if (targetPiece4.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece4.props.x, y: targetPiece4.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (targetPiece5) {\r\n                        if (!targetPiece5.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece5.props.x, y: targetPiece5.props.y })\r\n                        } else {\r\n                            if (targetPiece5.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece5.props.x, y: targetPiece5.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (targetPiece6) {\r\n                        if (!targetPiece6.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece6.props.x, y: targetPiece6.props.y })\r\n                        } else {\r\n                            if (targetPiece6.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece6.props.x, y: targetPiece6.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (targetPiece7) {\r\n                        if (!targetPiece7.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece7.props.x, y: targetPiece7.props.y })\r\n                        } else {\r\n                            if (targetPiece7.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece7.props.x, y: targetPiece7.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (targetPiece8) {\r\n                        if (!targetPiece8.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece8.props.x, y: targetPiece8.props.y })\r\n                        } else {\r\n                            if (targetPiece8.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece8.props.x, y: targetPiece8.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    break;\r\n                case \"king\":\r\n                    for (let i = -1; i < 2; i++) {\r\n                        for (let j = -1; j < 2; j++) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + j)\r\n\r\n                            if (targetPiece) {\r\n                                if (!targetPiece.props.piece) {\r\n                                    possibleMoves.push({ x: targetPiece.props.x, y: targetPiece.props.y })\r\n                                } else {\r\n                                    if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                        possibleMoves.push({ x: targetPiece.props.x, y: targetPiece.props.y })\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    //Castling logic\r\n                    if (color == \"white\") {\r\n                        if (this.state.canWhiteLongCastle) {\r\n                            if (this.state.position[7].charAt(1) == 3 && this.state.position[7].charAt(0) == 'R') {\r\n                                possibleMoves.push({ x: square.props.x, y: square.props.y - 2 })\r\n                            }\r\n                        }\r\n\r\n                        if (this.state.canWhiteShortCastle) {\r\n                            if (this.state.position[7].split(\"\").reverse().join(\"\").charAt(1) == 2 && this.state.position[7].split(\"\").reverse().join(\"\").charAt(0) == 'R') {\r\n                                possibleMoves.push({ x: square.props.x, y: square.props.y + 2 })\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (this.state.canBlackLongCastle) {\r\n                            if (this.state.position[0].charAt(1) == 3 && this.state.position[0].charAt(0) == 'r') {\r\n                                possibleMoves.push({ x: square.props.x, y: square.props.y - 2 })\r\n                            }\r\n                        }\r\n\r\n                        if (this.state.canBlackShortCastle) {\r\n                            if (this.state.position[0].split(\"\").reverse().join(\"\").charAt(1) == 2 && this.state.position[0].split(\"\").reverse().join(\"\").charAt(0) == 'r') {\r\n                                possibleMoves.push({ x: square.props.x, y: square.props.y + 2 })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    break;\r\n                case \"queen\":\r\n                    for (let i = square.props.x - 1; i >= 0; i--) {\r\n                        let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.props.y);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: i, y: square.props.y })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: i, y: square.props.y })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (let i = square.props.y - 1; i >= 0; i--) {\r\n                        let targetSquare = squares.find(s => s.props.x === square.props.x && s.props.y === i);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: square.props.x, y: i })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: square.props.x, y: i })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (let i = square.props.x + 1; i < DIM; i++) {\r\n                        let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.props.y);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: i, y: square.props.y })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: i, y: square.props.y })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (let i = square.props.y + 1; i < DIM; i++) {\r\n                        let targetSquare = squares.find(s => s.props.x === square.props.x && s.props.y === i);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: square.props.x, y: i })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: square.props.x, y: i })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.props.x - i >= 0 && square.props.y - i >= 0) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.props.x - i, y: square.props.y - i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.props.x - i, y: square.props.y - i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.props.x + i < DIM && square.props.y + i < DIM) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.props.x + i, y: square.props.y + i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.props.x + i, y: square.props.y + i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.props.x - i >= 0 && square.props.y + i < DIM) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.props.x - i, y: square.props.y + i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.props.x - i, y: square.props.y + i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.props.x + i < DIM && square.props.y - i >= 0) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.props.x + i, y: square.props.y - i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.props.x + i, y: square.props.y - i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        console.log(\"Possible Moves:\", possibleMoves);\r\n        this.updatePossibleMoves(possibleMoves);\r\n    }\r\n\r\n    renderSquares() {\r\n        let squareColorIsWhite = true;\r\n        const squares = [];\r\n        for (let i = 0; i < DIM; i++) {\r\n            let row = ConvertFenToString(this.state.position[i]);\r\n            for (let j = 0; j < DIM; j++) {\r\n                const piece = row.charAt(j);\r\n                let color = squareColorIsWhite ? \"\" : \"dark\";\r\n                squares.push(\r\n                    <Square\r\n                        getPossibleMoves={this.getPossibleMoves.bind(this)}\r\n                        key={`${i}-${j}`}\r\n                        x={i}\r\n                        y={j}\r\n                        piece={ConvertFENPieceToPiece(piece.trim())}\r\n                        color={color}\r\n                        selectedSquareX={this.state.selectedSquareX}\r\n                        setSelectedSquareX={this.updateSelectedSquareX}\r\n                        selectedSquareY={this.state.selectedSquareY}\r\n                        setSelectedSquareY={this.updateSelectedSquareY}\r\n                        possibleMoves={this.state.possibleMoves}\r\n                        updatePossibleMoves={this.updatePossibleMoves}\r\n                        movePiece={this.movePiece}\r\n                    />\r\n                );\r\n                squareColorIsWhite = !squareColorIsWhite;\r\n            }\r\n            squareColorIsWhite = !squareColorIsWhite;\r\n        }\r\n        return squares;\r\n    }\r\n\r\n    render() {\r\n        //const squares = this.renderSquares();\r\n        return (\r\n            <div className=\"chessGrid\">\r\n                {this.renderSquares()}\r\n            </div>\r\n        );\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}