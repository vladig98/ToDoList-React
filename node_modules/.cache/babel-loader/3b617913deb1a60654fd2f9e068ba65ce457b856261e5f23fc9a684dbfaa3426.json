{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vladi Gotsin\\\\Desktop\\\\react\\\\src\\\\Board.js\";\nimport { Component } from \"react\";\nimport { Square } from \"./Square.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DIM = 8; //8x8 Board\n\nexport class Board extends Component {\n  constructor(props) {\n    super(props);\n    this.updatePossibleMoves = moves => {\n      this.setState({\n        possibleMoves: moves\n      });\n    };\n    this.state = {\n      position: ['rnbqkbnr', 'pppppppp', '8', '8', '8', '8', 'PPPPPPPP', 'RNBQKBNR'],\n      possibleMoves: []\n    };\n    this.selectedPiece = props.selectedPiece;\n    this.setSelectedPiece = props.setSelectedPiece;\n  }\n  getPossibleMoves(square) {\n    const squares = this.renderSquares();\n    let possibleMoves = [];\n    if (square.piece) {\n      let color = square.piece.split('-')[0];\n      let piece = square.piece.split('-')[1];\n      switch (piece) {\n        case \"pawn\":\n          if (color === \"white\") {\n            //move one square ahead\n            const targetSquare1 = squares.find(s => s.props.x === square.x - 1 && s.props.y === square.y);\n            if (targetSquare1 && !targetSquare1.props.piece) {\n              possibleMoves.push({\n                x: square.x - 1,\n                y: square.y\n              });\n            }\n\n            //move two squares on the very first move\n            const targetSquare2 = squares.find(s => s.props.x === square.x - 2 && s.props.y === square.y);\n            if (square.x === 6 && targetSquare2 && !targetSquare2.props.piece && !targetSquare1.props.piece) {\n              possibleMoves.push({\n                x: square.x - 2,\n                y: square.y\n              });\n            }\n\n            //capture to the left diagonal\n            const leftNeigborToPotentuallyCapture1 = squares.find(s => s.props.x === square.x - 1 && s.props.y === square.y - 1);\n            if (leftNeigborToPotentuallyCapture1 && leftNeigborToPotentuallyCapture1.props.piece && ConvertFENPieceToPiece(leftNeigborToPotentuallyCapture1.props.piece).split('-')[0] != square.piece.split(\"-\")[0]) {\n              possibleMoves.push({\n                x: square.x - 1,\n                y: square.y - 1\n              });\n            }\n\n            //capture to the right diagonal\n            const leftNeigborToPotentuallyCapture2 = squares.find(s => s.props.x === square.x - 1 && s.props.y === square.y + 1);\n            if (leftNeigborToPotentuallyCapture2 && leftNeigborToPotentuallyCapture2.props.piece && ConvertFENPieceToPiece(leftNeigborToPotentuallyCapture2.props.piece).split('-')[0] != square.piece.split(\"-\")[0]) {\n              possibleMoves.push({\n                x: square.x - 1,\n                y: square.y + 1\n              });\n            }\n\n            //TODO: Implement the french fancy move - En passant\n            //TODO: Implement promotion\n          } else {\n            const targetSquare1 = squares.find(s => s.props.x === square.x + 1 && s.props.y === square.y);\n            if (targetSquare1 && !targetSquare1.props.piece) {\n              possibleMoves.push({\n                x: square.x + 1,\n                y: square.y\n              });\n            }\n\n            //move two squares on the very first move\n            const targetSquare2 = squares.find(s => s.props.x === square.x + 2 && s.props.y === square.y);\n            if (square.x === 1 && targetSquare2 && !targetSquare2.props.piece && !targetSquare1.props.piece) {\n              possibleMoves.push({\n                x: square.x + 2,\n                y: square.y\n              });\n            }\n\n            //capture to the left diagonal\n            const leftNeigborToPotentuallyCapture1 = squares.find(s => s.props.x === square.x + 1 && s.props.y === square.y - 1);\n            if (leftNeigborToPotentuallyCapture1 && leftNeigborToPotentuallyCapture1.props.piece && ConvertFENPieceToPiece(leftNeigborToPotentuallyCapture1.props.piece).split('-')[0] != square.piece.split(\"-\")[0]) {\n              possibleMoves.push({\n                x: square.x + 1,\n                y: square.y - 1\n              });\n            }\n\n            //capture to the right diagonal\n            const leftNeigborToPotentuallyCapture2 = squares.find(s => s.props.x === square.x + 1 && s.props.y === square.y + 1);\n            if (leftNeigborToPotentuallyCapture2 && leftNeigborToPotentuallyCapture2.props.piece && ConvertFENPieceToPiece(leftNeigborToPotentuallyCapture2.props.piece).split('-')[0] != square.piece.split(\"-\")[0]) {\n              possibleMoves.push({\n                x: square.x + 1,\n                y: square.y + 1\n              });\n            }\n\n            //TODO: Implement the french fancy move - En passant\n            //TODO: Implement promotion\n          }\n          break;\n        case \"rook\":\n          break;\n        case \"bishop\":\n          break;\n        case \"knight\":\n          break;\n        case \"king\":\n          break;\n        case \"queen\":\n          break;\n        default:\n          break;\n      }\n    }\n    console.log(\"Possible Moves:\", possibleMoves);\n    this.updatePossibleMoves(possibleMoves);\n  }\n  renderSquares() {\n    let squareColorIsWhite = true;\n    const squares = [];\n    for (let i = 0; i < DIM; i++) {\n      let row = ConvertFenToString(this.state.position[i]);\n      for (let j = 0; j < DIM; j++) {\n        const piece = row.charAt(j);\n        let color = squareColorIsWhite ? \"\" : \"dark\";\n        squares.push( /*#__PURE__*/_jsxDEV(Square, {\n          getPossibleMoves: this.getPossibleMoves.bind(this),\n          x: i,\n          y: j,\n          piece: ConvertFENPieceToPiece(piece.trim()),\n          color: color,\n          selectedPiece: this.selectedPiece,\n          setSelectedPiece: this.setSelectedPiece,\n          possibleMoves: this.state.possibleMoves,\n          updatePossibleMoves: this.updatePossibleMoves\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this));\n        squareColorIsWhite = !squareColorIsWhite;\n      }\n      squareColorIsWhite = !squareColorIsWhite;\n    }\n    return squares;\n  }\n  render() {\n    const squares = this.renderSquares();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessGrid\",\n      children: squares\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n//Checks if a character is Uppercase\nfunction IsUpperCase(value) {\n  return value.charCodeAt(0) >= 65 && value.charCodeAt(0) <= 90;\n}\n\n//Checks if a character is Lowercase\n_c = IsUpperCase;\nfunction IsLowerCase(value) {\n  return value.charCodeAt(0) >= 97 && value.charCodeAt(0) <= 122;\n}\n\n//Checks if a character is a Digit\n_c2 = IsLowerCase;\nfunction IsDigit(value) {\n  return value.charCodeAt(0) >= 48 && value.charCodeAt(0) <= 57;\n}\n_c3 = IsDigit;\nfunction ConvertFENtoPiece(letter) {\n  switch (letter.toLowerCase()) {\n    case \"p\":\n      return 'pawn';\n    case \"n\":\n      return \"knight\";\n    case \"k\":\n      return \"king\";\n    case \"q\":\n      return \"queen\";\n    case \"r\":\n      return \"rook\";\n    case \"b\":\n      return \"bishop\";\n    default:\n      return \"\";\n  }\n}\n_c4 = ConvertFENtoPiece;\nfunction ConvertFENPieceToPiece(value) {\n  if (IsUpperCase(value)) {\n    return `white-${ConvertFENtoPiece(value)}`;\n  }\n  if (IsLowerCase(value)) {\n    return `black-${ConvertFENtoPiece(value)}`;\n  }\n  return \"\";\n}\n_c5 = ConvertFENPieceToPiece;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"IsUpperCase\");\n$RefreshReg$(_c2, \"IsLowerCase\");\n$RefreshReg$(_c3, \"IsDigit\");\n$RefreshReg$(_c4, \"ConvertFENtoPiece\");\n$RefreshReg$(_c5, \"ConvertFENPieceToPiece\");","map":{"version":3,"names":["Component","Square","jsxDEV","_jsxDEV","DIM","Board","constructor","props","updatePossibleMoves","moves","setState","possibleMoves","state","position","selectedPiece","setSelectedPiece","getPossibleMoves","square","squares","renderSquares","piece","color","split","targetSquare1","find","s","x","y","push","targetSquare2","leftNeigborToPotentuallyCapture1","ConvertFENPieceToPiece","leftNeigborToPotentuallyCapture2","console","log","squareColorIsWhite","i","row","ConvertFenToString","j","charAt","bind","trim","fileName","_jsxFileName","lineNumber","columnNumber","render","className","children","IsUpperCase","value","charCodeAt","_c","IsLowerCase","_c2","IsDigit","_c3","ConvertFENtoPiece","letter","toLowerCase","_c4","_c5","$RefreshReg$"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/src/Board.js"],"sourcesContent":["import { Component } from \"react\";\r\nimport { Square } from \"./Square.js\"\r\n\r\nconst DIM = 8; //8x8 Board\r\n\r\nexport class Board extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            position: [\r\n                'rnbqkbnr',\r\n                'pppppppp',\r\n                '8',\r\n                '8',\r\n                '8',\r\n                '8',\r\n                'PPPPPPPP',\r\n                'RNBQKBNR'\r\n            ],\r\n            possibleMoves: []\r\n        };\r\n        this.selectedPiece = props.selectedPiece;\r\n        this.setSelectedPiece = props.setSelectedPiece;\r\n    }\r\n\r\n    updatePossibleMoves = (moves) => {\r\n        this.setState({ possibleMoves: moves });\r\n    };\r\n\r\n    getPossibleMoves(square) {\r\n        const squares = this.renderSquares();\r\n        let possibleMoves = [];\r\n\r\n        if (square.piece) {\r\n            let color = square.piece.split('-')[0];\r\n            let piece = square.piece.split('-')[1];\r\n            switch (piece) {\r\n                case \"pawn\":\r\n                    if (color === \"white\") {\r\n                        //move one square ahead\r\n                        const targetSquare1 = squares.find(s => s.props.x === square.x - 1 && s.props.y === square.y);\r\n                        if (targetSquare1 && !targetSquare1.props.piece) {\r\n                            possibleMoves.push({ x: square.x - 1, y: square.y });\r\n                        }\r\n\r\n                        //move two squares on the very first move\r\n                        const targetSquare2 = squares.find(s => s.props.x === square.x - 2 && s.props.y === square.y);\r\n                        if (square.x === 6 && targetSquare2 && !targetSquare2.props.piece && !targetSquare1.props.piece) {\r\n                            possibleMoves.push({ x: square.x - 2, y: square.y });\r\n                        }\r\n\r\n                        //capture to the left diagonal\r\n                        const leftNeigborToPotentuallyCapture1 = squares.find(s => s.props.x === square.x - 1 && s.props.y === square.y - 1);\r\n                        if (leftNeigborToPotentuallyCapture1 && leftNeigborToPotentuallyCapture1.props.piece &&\r\n                            ConvertFENPieceToPiece(leftNeigborToPotentuallyCapture1.props.piece).split('-')[0] != square.piece.split(\"-\")[0]) {\r\n                            possibleMoves.push({ x: square.x - 1, y: square.y - 1 });\r\n                        }\r\n\r\n                        //capture to the right diagonal\r\n                        const leftNeigborToPotentuallyCapture2 = squares.find(s => s.props.x === square.x - 1 && s.props.y === square.y + 1);\r\n                        if (leftNeigborToPotentuallyCapture2 && leftNeigborToPotentuallyCapture2.props.piece &&\r\n                            ConvertFENPieceToPiece(leftNeigborToPotentuallyCapture2.props.piece).split('-')[0] != square.piece.split(\"-\")[0]) {\r\n                            possibleMoves.push({ x: square.x - 1, y: square.y + 1 });\r\n                        }\r\n\r\n                        //TODO: Implement the french fancy move - En passant\r\n                        //TODO: Implement promotion\r\n                    } else {\r\n                        const targetSquare1 = squares.find(s => s.props.x === square.x + 1 && s.props.y === square.y);\r\n                        if (targetSquare1 && !targetSquare1.props.piece) {\r\n                            possibleMoves.push({ x: square.x + 1, y: square.y });\r\n                        }\r\n\r\n                        //move two squares on the very first move\r\n                        const targetSquare2 = squares.find(s => s.props.x === square.x + 2 && s.props.y === square.y);\r\n                        if (square.x === 1 && targetSquare2 && !targetSquare2.props.piece && !targetSquare1.props.piece) {\r\n                            possibleMoves.push({ x: square.x + 2, y: square.y });\r\n                        }\r\n\r\n                        //capture to the left diagonal\r\n                        const leftNeigborToPotentuallyCapture1 = squares.find(s => s.props.x === square.x + 1 && s.props.y === square.y - 1);\r\n                        if (leftNeigborToPotentuallyCapture1 && leftNeigborToPotentuallyCapture1.props.piece &&\r\n                            ConvertFENPieceToPiece(leftNeigborToPotentuallyCapture1.props.piece).split('-')[0] != square.piece.split(\"-\")[0]) {\r\n                            possibleMoves.push({ x: square.x + 1, y: square.y - 1 });\r\n                        }\r\n\r\n                        //capture to the right diagonal\r\n                        const leftNeigborToPotentuallyCapture2 = squares.find(s => s.props.x === square.x + 1 && s.props.y === square.y + 1);\r\n                        if (leftNeigborToPotentuallyCapture2 && leftNeigborToPotentuallyCapture2.props.piece &&\r\n                            ConvertFENPieceToPiece(leftNeigborToPotentuallyCapture2.props.piece).split('-')[0] != square.piece.split(\"-\")[0]) {\r\n                            possibleMoves.push({ x: square.x + 1, y: square.y + 1 });\r\n                        }\r\n\r\n                        //TODO: Implement the french fancy move - En passant\r\n                        //TODO: Implement promotion\r\n                    }\r\n                    break;\r\n                case \"rook\":\r\n                    break;\r\n                case \"bishop\":\r\n                    break;\r\n                case \"knight\":\r\n                    break;\r\n                case \"king\":\r\n                    break;\r\n                case \"queen\":\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        console.log(\"Possible Moves:\", possibleMoves);\r\n        this.updatePossibleMoves(possibleMoves);\r\n    }\r\n\r\n    renderSquares() {\r\n        let squareColorIsWhite = true;\r\n        const squares = [];\r\n        for (let i = 0; i < DIM; i++) {\r\n            let row = ConvertFenToString(this.state.position[i]);\r\n            for (let j = 0; j < DIM; j++) {\r\n                const piece = row.charAt(j);\r\n                let color = squareColorIsWhite ? \"\" : \"dark\";\r\n                squares.push(\r\n                    <Square\r\n                        getPossibleMoves={this.getPossibleMoves.bind(this)}\r\n                        key={`${i}-${j}`}\r\n                        x={i}\r\n                        y={j}\r\n                        piece={ConvertFENPieceToPiece(piece.trim())}\r\n                        color={color}\r\n                        selectedPiece={this.selectedPiece}\r\n                        setSelectedPiece={this.setSelectedPiece}\r\n                        possibleMoves={this.state.possibleMoves}\r\n                        updatePossibleMoves={this.updatePossibleMoves}\r\n                    />\r\n                );\r\n                squareColorIsWhite = !squareColorIsWhite;\r\n            }\r\n            squareColorIsWhite = !squareColorIsWhite;\r\n        }\r\n        return squares;\r\n    }\r\n\r\n    render() {\r\n        const squares = this.renderSquares();\r\n        return (\r\n            <div className=\"chessGrid\">\r\n                {squares}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//Checks if a character is Uppercase\r\nfunction IsUpperCase(value) {\r\n    return value.charCodeAt(0) >= 65 && value.charCodeAt(0) <= 90\r\n}\r\n\r\n//Checks if a character is Lowercase\r\nfunction IsLowerCase(value) {\r\n    return value.charCodeAt(0) >= 97 && value.charCodeAt(0) <= 122\r\n}\r\n\r\n//Checks if a character is a Digit\r\nfunction IsDigit(value) {\r\n    return value.charCodeAt(0) >= 48 && value.charCodeAt(0) <= 57\r\n}\r\n\r\nfunction ConvertFENtoPiece(letter) {\r\n    switch (letter.toLowerCase()) {\r\n        case \"p\":\r\n            return 'pawn'\r\n        case \"n\":\r\n            return \"knight\"\r\n        case \"k\":\r\n            return \"king\";\r\n        case \"q\":\r\n            return \"queen\";\r\n        case \"r\":\r\n            return \"rook\";\r\n        case \"b\":\r\n            return \"bishop\";\r\n        default:\r\n            return \"\";\r\n    }\r\n}\r\n\r\nfunction ConvertFENPieceToPiece(value) {\r\n    if (IsUpperCase(value)) {\r\n        return `white-${ConvertFENtoPiece(value)}`;\r\n    }\r\n\r\n    if (IsLowerCase(value)) {\r\n        return `black-${ConvertFENtoPiece(value)}`;\r\n    }\r\n\r\n    return \"\";\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}