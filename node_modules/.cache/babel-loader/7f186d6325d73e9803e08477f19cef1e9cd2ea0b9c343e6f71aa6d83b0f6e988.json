{"ast":null,"code":"//Checks if a character is Uppercase\nexport function IsUpperCase(value) {\n  return value.charCodeAt(0) >= 65 && value.charCodeAt(0) <= 90;\n}\n\n//Checks if a character is Lowercase\n_c = IsUpperCase;\nexport function IsLowerCase(value) {\n  return value.charCodeAt(0) >= 97 && value.charCodeAt(0) <= 122;\n}\n\n//Checks if a character is a Digit\n_c2 = IsLowerCase;\nexport function IsDigit(value) {\n  return value.charCodeAt(0) >= 48 && value.charCodeAt(0) <= 57;\n}\n_c3 = IsDigit;\nexport function ConvertFENtoPiece(letter) {\n  switch (letter.toLowerCase()) {\n    case \"p\":\n      return 'pawn';\n    case \"n\":\n      return \"knight\";\n    case \"k\":\n      return \"king\";\n    case \"q\":\n      return \"queen\";\n    case \"r\":\n      return \"rook\";\n    case \"b\":\n      return \"bishop\";\n    default:\n      return \"\";\n  }\n}\n_c4 = ConvertFENtoPiece;\nexport function ConvertFENPieceToPiece(value) {\n  if (IsUpperCase(value)) {\n    return `white-${ConvertFENtoPiece(value)}`;\n  }\n  if (IsLowerCase(value)) {\n    return `black-${ConvertFENtoPiece(value)}`;\n  }\n  return \"\";\n}\n_c5 = ConvertFENPieceToPiece;\nexport function ConvertFenToString(value) {\n  let result = [];\n  for (let i = 0; i < value.length; i++) {\n    if (IsDigit(value.charAt(i))) {\n      for (let j = 0; j < Number(value.charAt(i)); j++) {\n        result.push(\" \");\n      }\n    } else {\n      result.push(value.charAt(i));\n    }\n  }\n  return result.join('');\n}\n_c6 = ConvertFenToString;\nexport function UpdatePosition(square, targetSquare, position) {\n  let pos = [];\n  for (let i = 0; i < position.length; i++) {\n    if (square.props.x == targetSquare.props.x) {} else if (square.props.x == i) {\n      let row = ConvertFenToString(position[i]);\n      row = replaceAt(row, ' ', Number(square.props.y));\n      row = ConvertStringToFEN(row);\n      pos.push(row);\n    } else if (targetSquare.props.x == i) {\n      let row = ConvertFenToString(position[i]);\n      row = replaceAt(row, ' ', Number(square.props.y));\n      row = ConvertStringToFEN(row);\n      pos.push(row);\n    }\n  }\n}\n_c7 = UpdatePosition;\nfunction ConvertStringToFEN(value) {\n  let result = [];\n  let counter = 0;\n  for (let i = 0; i < value.length; i++) {\n    if (value.charAt(i) == ' ') {\n      counter++;\n    } else {\n      if (counter != 0) {\n        result.push(counter);\n      }\n      result.push(value.charAt(i));\n      counter = 0;\n    }\n  }\n  return result.join('');\n}\n_c8 = ConvertStringToFEN;\nfunction replaceAt(value, replacement, index) {\n  return value.substring(0, index) + replacement + value.substring(index + replacement.toString().length);\n}\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n$RefreshReg$(_c, \"IsUpperCase\");\n$RefreshReg$(_c2, \"IsLowerCase\");\n$RefreshReg$(_c3, \"IsDigit\");\n$RefreshReg$(_c4, \"ConvertFENtoPiece\");\n$RefreshReg$(_c5, \"ConvertFENPieceToPiece\");\n$RefreshReg$(_c6, \"ConvertFenToString\");\n$RefreshReg$(_c7, \"UpdatePosition\");\n$RefreshReg$(_c8, \"ConvertStringToFEN\");","map":{"version":3,"names":["IsUpperCase","value","charCodeAt","_c","IsLowerCase","_c2","IsDigit","_c3","ConvertFENtoPiece","letter","toLowerCase","_c4","ConvertFENPieceToPiece","_c5","ConvertFenToString","result","i","length","charAt","j","Number","push","join","_c6","UpdatePosition","square","targetSquare","position","pos","props","x","row","replaceAt","y","ConvertStringToFEN","_c7","counter","_c8","replacement","index","substring","toString","$RefreshReg$"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/src/HelperMethods.js"],"sourcesContent":["//Checks if a character is Uppercase\r\nexport function IsUpperCase(value) {\r\n    return value.charCodeAt(0) >= 65 && value.charCodeAt(0) <= 90\r\n}\r\n\r\n//Checks if a character is Lowercase\r\nexport function IsLowerCase(value) {\r\n    return value.charCodeAt(0) >= 97 && value.charCodeAt(0) <= 122\r\n}\r\n\r\n//Checks if a character is a Digit\r\nexport function IsDigit(value) {\r\n    return value.charCodeAt(0) >= 48 && value.charCodeAt(0) <= 57\r\n}\r\n\r\nexport function ConvertFENtoPiece(letter) {\r\n    switch (letter.toLowerCase()) {\r\n        case \"p\":\r\n            return 'pawn'\r\n        case \"n\":\r\n            return \"knight\"\r\n        case \"k\":\r\n            return \"king\";\r\n        case \"q\":\r\n            return \"queen\";\r\n        case \"r\":\r\n            return \"rook\";\r\n        case \"b\":\r\n            return \"bishop\";\r\n        default:\r\n            return \"\";\r\n    }\r\n}\r\n\r\nexport function ConvertFENPieceToPiece(value) {\r\n    if (IsUpperCase(value)) {\r\n        return `white-${ConvertFENtoPiece(value)}`;\r\n    }\r\n\r\n    if (IsLowerCase(value)) {\r\n        return `black-${ConvertFENtoPiece(value)}`;\r\n    }\r\n\r\n    return \"\";\r\n}\r\n\r\nexport function ConvertFenToString(value) {\r\n    let result = [];\r\n\r\n    for (let i = 0; i < value.length; i++) {\r\n        if (IsDigit(value.charAt(i))) {\r\n            for (let j = 0; j < Number(value.charAt(i)); j++) {\r\n                result.push(\" \")\r\n            }\r\n        } else {\r\n            result.push(value.charAt(i))\r\n        }\r\n    }\r\n\r\n    return result.join('');\r\n}\r\n\r\nexport function UpdatePosition(square, targetSquare, position) {\r\n    let pos = [];\r\n\r\n    for (let i = 0; i < position.length; i++) {\r\n        if (square.props.x == targetSquare.props.x) {\r\n\r\n        } else if (square.props.x == i) {\r\n            let row = ConvertFenToString(position[i])\r\n            row = replaceAt(row, ' ', Number(square.props.y))\r\n            row = ConvertStringToFEN(row)\r\n            pos.push(row)\r\n        } else if (targetSquare.props.x == i) {\r\n            let row = ConvertFenToString(position[i])\r\n            row = replaceAt(row, ' ', Number(square.props.y))\r\n            row = ConvertStringToFEN(row)\r\n            pos.push(row)\r\n        }\r\n    }\r\n}\r\n\r\nfunction ConvertStringToFEN(value) {\r\n    let result = [];\r\n\r\n    let counter = 0;\r\n    for (let i = 0; i < value.length; i++) {\r\n        if (value.charAt(i) == ' ') {\r\n            counter++;\r\n        } else {\r\n            if (counter != 0) {\r\n                result.push(counter)\r\n            }\r\n            result.push(value.charAt(i))\r\n            counter = 0;\r\n        }\r\n    }\r\n\r\n    return result.join('')\r\n}\r\n\r\nfunction replaceAt(value, replacement, index) {\r\n    return value.substring(0, index) + replacement + value.substring(index + replacement.toString().length);\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}