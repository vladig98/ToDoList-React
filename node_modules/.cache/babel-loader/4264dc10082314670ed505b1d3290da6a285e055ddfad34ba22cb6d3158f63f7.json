{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vladi Gotsin\\\\Desktop\\\\react\\\\src\\\\Chess.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DIM = 8; //8x8 Board\n\nclass Square extends Comment {\n  constructor(x, y, piece, color) {\n    this.x = x;\n    this.y = y;\n    this.piece = piece;\n    this.color = color;\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'chessSquare piece',\n      x: this.x,\n      y: this.y,\n      onClick: () => move(p, cl, x, y)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 16\n    }, this);\n  }\n}\nclass Board extends Comment {\n  constructor() {\n    this.position = [];\n    for (let i = 0; i < DIM; i++) {\n      this.position[i] = [];\n      for (let j = 0; j < DIM; j++) {\n        this.position[i].push(new Square(i, j));\n      }\n    }\n  }\n}\nexport default function Chess() {\n  _s();\n  const [boardPosition, setBoardPosition] = useState(['rnbqkbnr', 'pppppppp', '8', '8', '8', '8', 'PPPPPPPP', 'RNBQKBNR']);\n  const [selectedPiece, setSelectedPiece] = useState('');\n  const [oldX, setOldX] = useState('');\n  const [oldY, setOldY] = useState('');\n  const [allowedMoves, setAllowedMoves] = useState([]);\n  const [whiteToMove, setWhiteToMove] = useState(true);\n  const [canWhiteShortCastle, setCanWhiteShortCastle] = useState(true);\n  const [canWhiteLongCastle, setCanWhiteLongCastle] = useState(true);\n  const [canBlackShortCastle, setCanBlackShortCastle] = useState(true);\n  const [canBlackLongCastle, setCanBlackLongCastle] = useState(true);\n  const [isWhiteInCheck, setIsWhiteInCheck] = useState(false);\n  const [isBlackInCheck, setIsBlackInCheck] = useState(false);\n  function handleCapture(x, y, pieceToCapture) {\n    if (selectedPiece.charCodeAt(0) >= 65 && selectedPiece.charCodeAt(0) <= 90) {\n      if (pieceToCapture.charCodeAt(0) >= 65 && pieceToCapture.charCodeAt(0) <= 90) {\n        return;\n      }\n    }\n    if (selectedPiece.charCodeAt(0) >= 97 && selectedPiece.charCodeAt(0) <= 122) {\n      if (pieceToCapture.charCodeAt(0) >= 97 && pieceToCapture.charCodeAt(0) <= 122) {\n        return;\n      }\n    }\n    let oldRow = boardPosition[oldX];\n    let newRow = boardPosition[x];\n    oldRow = convertFenToString(oldRow);\n    newRow = convertFenToString(newRow);\n    oldRow = oldRow.substring(0, oldY) + ' ' + oldRow.substring(oldY + 1, oldRow.length);\n    newRow = newRow.substring(0, y) + selectedPiece + newRow.substring(y + 1, newRow.length);\n    oldRow = convertStringToFen(oldRow);\n    newRow = convertStringToFen(newRow);\n    let newBoard = [];\n    for (let i = 0; i < boardPosition.length; i++) {\n      if (i == x || i == oldX) {\n        if (x == oldX) {\n          //TO DO: Implement capturing on the same row\n          console.warn(\"Implement capturing on the same row\");\n        } else if (i == x) {\n          newBoard.push(newRow);\n        } else if (i == oldX) {\n          newBoard.push(oldRow);\n        }\n      } else {\n        newBoard.push(boardPosition[i]);\n      }\n    }\n    setBoardPosition(newBoard);\n    setWhiteToMove(!whiteToMove);\n  }\n  function convertFenToString(fen) {\n    let result = '';\n    for (let i = 0; i < fen.length; i++) {\n      if (fen.charCodeAt(i) >= 48 && fen.charCodeAt(i) <= 57) {\n        result += ' '.repeat(Number(fen[i]));\n      } else {\n        result += fen[i];\n      }\n    }\n    return result;\n  }\n  function convertStringToFen(str) {\n    for (let i = str.length - 1; i >= 0; i--) {\n      if (str[i] == ' ') {\n        if (i < str.length - 1) {\n          if (str.charCodeAt(i + 1) >= 48 && str.charCodeAt(i + 1) <= 57) {\n            str = str.substring(0, i) + (Number(str[i + 1]) + 1).toString() + str.substring(i + 1, str.length);\n            str = str.slice(0, i + 1) + str.slice(i + 2);\n          } else {\n            str = str.substring(0, i) + '1' + str.substring(i + 1, str.length);\n          }\n        } else {\n          str = str.substring(0, i) + '1' + str.substring(i + 1, str.length);\n        }\n      }\n    }\n    return str;\n  }\n  const Move = (p, c, x, y) => {\n    if (selectedPiece) {\n      //allows to deselect a piece\n      if (x == oldX) {\n        if (y == oldY) {\n          setSelectedPiece('');\n          setOldX('');\n          setOldY('');\n          return;\n        }\n      }\n\n      //allow only king moves if in check\n      //TO DO: Allow check blocks and attacking pieces captures\n      if (whiteToMove) {\n        if (isWhiteInCheck) {\n          if (p != 'k') {\n            setSelectedPiece('');\n            setOldX('');\n            setOldY('');\n            return;\n          }\n        }\n      } else {\n        if (isBlackInCheck) {\n          if (p != 'k') {\n            setSelectedPiece('');\n            setOldX('');\n            setOldY('');\n            return;\n          }\n        }\n      }\n      let row = boardPosition[x];\n      let newRow = '';\n      let oldRow = '';\n      let allowed = false;\n\n      //check if the move you're making is legal\n      for (let i = 0; i < allowedMoves.length; i++) {\n        let move = allowedMoves[i];\n        if (x == move[0]) {\n          if (y == move[1]) {\n            allowed = true;\n          }\n        }\n      }\n\n      //stop if illegal move is used\n      if (!allowed) {\n        setOldX('');\n        setOldY('');\n        setSelectedPiece('');\n        return;\n      }\n\n      //convert FEN to string, update the position and convert back to FEN\n      newRow = convertFenToString(row);\n      if (newRow[y] != ' ') {\n        handleCapture(x, y, newRow[y]);\n        setOldX('');\n        setOldY('');\n        setSelectedPiece('');\n        return;\n      }\n      newRow = newRow.substring(0, y) + selectedPiece + newRow.substring(y + 1, newRow.length);\n      newRow = convertStringToFen(newRow);\n\n      //get the old position; if same row, get the current new position\n      row = x == oldX ? newRow : boardPosition[oldX];\n\n      //convert FEN to string, update the old position and convert back to FEN\n      oldRow = convertFenToString(row);\n      oldRow = oldRow.substring(0, oldY) + ' ' + oldRow.substring(oldY + 1, oldRow.length);\n      oldRow = convertStringToFen(oldRow);\n\n      //create a new board position and update the board\n      let newBoard = [];\n      for (let i = 0; i < boardPosition.length; i++) {\n        if (i == x || i == oldX) {\n          //use the old position if it's the same row as the old position will be updating the current newPosition and will have the most up-to-date values\n          if (x == oldX) {\n            newBoard.push(oldRow);\n          } else if (i == x) {\n            newBoard.push(newRow);\n          } else if (i == oldX) {\n            newBoard.push(oldRow);\n          }\n        } else {\n          newBoard.push(boardPosition[i]);\n        }\n      }\n\n      //removes the right to castle if the rook has moved for white\n      if (selectedPiece == 'R') {\n        if (oldX == 7 && oldY == 0) {\n          setCanWhiteLongCastle(false);\n        }\n        if (oldX == 7 && oldY == 7) {\n          setCanWhiteShortCastle(false);\n        }\n      }\n\n      //removes the right to castle if the rook has moved for black\n      if (selectedPiece == 'r') {\n        if (oldX == 0 && oldY == 0) {\n          setCanBlackLongCastle(false);\n        }\n        if (oldX == 0 && oldY == 7) {\n          setCanBlackShortCastle(false);\n        }\n      }\n\n      //block castling when king moves for black\n      if (selectedPiece == 'k') {\n        setCanBlackLongCastle(false);\n        setCanBlackShortCastle(false);\n      }\n\n      //block castling when king moves for white\n      if (selectedPiece == 'K') {\n        setCanWhiteLongCastle(false);\n        setCanWhiteShortCastle(false);\n      }\n\n      //handle castling for white\n      if (selectedPiece == 'K') {\n        if (y - oldY == 2) {\n          let castleRow = newBoard[7];\n          castleRow = convertFenToString(castleRow);\n          castleRow = castleRow.substring(0, 5) + \"RK \";\n          castleRow = convertStringToFen(castleRow);\n          newBoard[7] = castleRow;\n        }\n        if (oldY - y == 2) {\n          let castleRow = newBoard[7];\n          castleRow = convertFenToString(castleRow);\n          castleRow = \"  KR \" + castleRow.substring(5, 8);\n          castleRow = convertStringToFen(castleRow);\n          newBoard[7] = castleRow;\n        }\n      }\n\n      //handle castling for black\n      if (selectedPiece == 'k') {\n        if (y - oldY == 2) {\n          let castleRow = newBoard[0];\n          castleRow = convertFenToString(castleRow);\n          castleRow = castleRow.substring(0, 5) + \"rk \";\n          castleRow = convertStringToFen(castleRow);\n          newBoard[0] = castleRow;\n        }\n        if (oldY - y == 2) {\n          let castleRow = newBoard[0];\n          castleRow = convertFenToString(castleRow);\n          castleRow = \"  kr \" + castleRow.substring(5, 8);\n          castleRow = convertStringToFen(castleRow);\n          newBoard[0] = castleRow;\n        }\n      }\n\n      //update the board and reset the variables\n      setBoardPosition(newBoard);\n      setOldX('');\n      setOldY('');\n      setSelectedPiece('');\n      setWhiteToMove(!whiteToMove);\n    } else {\n      if (c != whiteToMove) {\n        return;\n      }\n      switch (p) {\n        case \"p\":\n          let pawnMoves = [];\n          if (c) {\n            if (x == 6) {\n              pawnMoves.push([x - 1, y]);\n              pawnMoves.push([x - 2, y]);\n            } else {\n              pawnMoves.push([x - 1, y]);\n            }\n            if (x > 0) {\n              if (y > 0) {\n                let currentRowPosition = boardPosition[x - 1];\n                currentRowPosition = convertFenToString(currentRowPosition);\n                if (currentRowPosition[y - 1] != ' ') {\n                  pawnMoves.push([x - 1, y - 1]);\n                }\n              }\n              if (y < 8) {\n                let currentRowPosition = boardPosition[x - 1];\n                currentRowPosition = convertFenToString(currentRowPosition);\n                if (currentRowPosition[y + 1] != ' ') {\n                  pawnMoves.push([x - 1, y + 1]);\n                }\n              }\n            }\n          } else {\n            if (x == 1) {\n              pawnMoves.push([x + 1, y]);\n              pawnMoves.push([x + 2, y]);\n            } else {\n              pawnMoves.push([x + 1, y]);\n            }\n            if (x < 8) {\n              if (y > 0) {\n                let currentRowPosition = boardPosition[x + 1];\n                currentRowPosition = convertFenToString(currentRowPosition);\n                if (currentRowPosition[y - 1] != ' ') {\n                  pawnMoves.push([x + 1, y - 1]);\n                }\n              }\n              if (y < 8) {\n                let currentRowPosition = boardPosition[x + 1];\n                currentRowPosition = convertFenToString(currentRowPosition);\n                if (currentRowPosition[y + 1] != ' ') {\n                  pawnMoves.push([x + 1, y + 1]);\n                }\n              }\n            }\n          }\n          setAllowedMoves(pawnMoves);\n          break;\n        case \"r\":\n          let rookMoves = [];\n          for (let i = 0; i < 8; i++) {\n            rookMoves.push([i, y]);\n            rookMoves.push([x, i]);\n          }\n          setAllowedMoves(rookMoves);\n          break;\n        case \"n\":\n          let knightMoves = [];\n          if (x - 2 >= 0 && y - 1 >= 0) {\n            knightMoves.push([x - 2, y - 1]);\n          }\n          if (x - 2 >= 0 && y + 1 < 8) {\n            knightMoves.push([x - 2, y + 1]);\n          }\n          if (x + 2 < 8 && y - 1 >= 0) {\n            knightMoves.push([x + 2, y - 1]);\n          }\n          if (x + 2 < 8 && y + 1 < 8) {\n            knightMoves.push([x + 2, y + 1]);\n          }\n          if (x - 1 >= 0 && y - 2 >= 0) {\n            knightMoves.push([x - 1, y - 2]);\n          }\n          if (x + 1 < 8 && y - 2 >= 0) {\n            knightMoves.push([x + 1, y - 2]);\n          }\n          if (x - 1 >= 0 && y + 2 < 8) {\n            knightMoves.push([x - 1, y + 2]);\n          }\n          if (x + 1 < 8 && y + 2 < 8) {\n            knightMoves.push([x + 1, y + 2]);\n          }\n          setAllowedMoves(knightMoves);\n          break;\n        case \"b\":\n          let bishopMoves = [];\n          for (let i = 1; i <= 8; i++) {\n            if (x - i >= 0 && y - 1 >= 0) {\n              bishopMoves.push([x - i, y - i]);\n            }\n            if (x + 1 < 8 && y + i < 8) {\n              bishopMoves.push([x + i, y + i]);\n            }\n            if (x + 1 < 8 && y - 1 >= 0) {\n              bishopMoves.push([x + i, y - i]);\n            }\n            if (x - i >= 0 && y + 1 < 8) {\n              bishopMoves.push([x - i, y + i]);\n            }\n          }\n          setAllowedMoves(bishopMoves);\n          break;\n        case \"q\":\n          let queenMoves = [];\n          for (let i = 1; i <= 8; i++) {\n            if (x - i >= 0 && y - 1 >= 0) {\n              queenMoves.push([x - i, y - i]);\n            }\n            if (x + 1 < 8 && y + i < 8) {\n              queenMoves.push([x + i, y + i]);\n            }\n            if (x + 1 < 8 && y - 1 >= 0) {\n              queenMoves.push([x + i, y - i]);\n            }\n            if (x - i >= 0 && y + 1 < 8) {\n              queenMoves.push([x - i, y + i]);\n            }\n          }\n          for (let i = 0; i < 8; i++) {\n            queenMoves.push([i, y]);\n            queenMoves.push([x, i]);\n          }\n          setAllowedMoves(queenMoves);\n          break;\n        case \"k\":\n          let kingMoves = [];\n          for (let i = x - 1; i <= x + 1; i++) {\n            for (let j = y - 1; j <= y + 1; j++) {\n              //handle edges\n              if (i >= 0 && i < 8) {\n                if (j >= 0 && j < 8) {\n                  kingMoves.push([i, j]);\n                }\n              }\n            }\n          }\n\n          //handle castling\n          if (c) {\n            let lastRow = boardPosition[7];\n            lastRow = convertFenToString(lastRow);\n            if (canWhiteShortCastle) {\n              if (lastRow[5] == ' ' && lastRow[6] == ' ') {\n                kingMoves.push([x, y + 2]);\n              }\n            }\n            if (canWhiteLongCastle) {\n              if (lastRow[1] == ' ' && lastRow[2] == ' ' && lastRow[3] == ' ') {\n                kingMoves.push([x, y - 2]);\n              }\n            }\n          } else {\n            let firstRow = boardPosition[0];\n            firstRow = convertFenToString(firstRow);\n            if (canBlackShortCastle) {\n              if (firstRow[5] == ' ' && firstRow[6] == ' ') {\n                kingMoves.push([x, y + 2]);\n              }\n            }\n            if (canBlackLongCastle) {\n              if (firstRow[1] == ' ' && firstRow[2] == ' ' && firstRow[3] == ' ') {\n                kingMoves.push([x, y - 2]);\n              }\n            }\n          }\n          setAllowedMoves(kingMoves);\n          break;\n        default:\n          break;\n      }\n      if (p != undefined && c != undefined) {\n        p = c ? p.toUpperCase() : p;\n        setSelectedPiece(p);\n        setOldX(x);\n        setOldY(y);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"grid\",\n        className: \"chessGrid\",\n        children: new Board()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(Chess, \"IhlxSP5GS1lVgwjDIGSJHLPT3iM=\");\n_c = Chess;\nvar _c;\n$RefreshReg$(_c, \"Chess\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","DIM","Square","Comment","constructor","x","y","piece","color","render","className","onClick","move","p","cl","fileName","_jsxFileName","lineNumber","columnNumber","Board","position","i","j","push","Chess","_s","boardPosition","setBoardPosition","selectedPiece","setSelectedPiece","oldX","setOldX","oldY","setOldY","allowedMoves","setAllowedMoves","whiteToMove","setWhiteToMove","canWhiteShortCastle","setCanWhiteShortCastle","canWhiteLongCastle","setCanWhiteLongCastle","canBlackShortCastle","setCanBlackShortCastle","canBlackLongCastle","setCanBlackLongCastle","isWhiteInCheck","setIsWhiteInCheck","isBlackInCheck","setIsBlackInCheck","handleCapture","pieceToCapture","charCodeAt","oldRow","newRow","convertFenToString","substring","length","convertStringToFen","newBoard","console","warn","fen","result","repeat","Number","str","toString","slice","Move","c","row","allowed","castleRow","pawnMoves","currentRowPosition","rookMoves","knightMoves","bishopMoves","queenMoves","kingMoves","lastRow","firstRow","undefined","toUpperCase","children","id","_c","$RefreshReg$"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/src/Chess.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\nconst DIM = 8; //8x8 Board\r\n\r\nclass Square extends Comment {\r\n    constructor(x, y, piece, color) {\r\n        this.x = x\r\n        this.y = y\r\n        this.piece = piece\r\n        this.color = color\r\n    }\r\n\r\n    onClick = function () {\r\n        //TODO: Implement clicking a square\r\n    }\r\n\r\n    render() {\r\n        return <div className={'chessSquare piece'} x={this.x} y={this.y} onClick={() => move(p, cl, x, y)}></div>\r\n    }\r\n}\r\n\r\nclass Board extends Comment {\r\n    constructor() {\r\n        this.position = []\r\n\r\n        for (let i = 0; i < DIM; i++) {\r\n            this.position[i] = [];\r\n\r\n            for (let j = 0; j < DIM; j++) {\r\n                this.position[i].push(new Square(i, j))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default function Chess() {\r\n\r\n    const [boardPosition, setBoardPosition] = useState(\r\n        [\r\n            'rnbqkbnr',\r\n            'pppppppp',\r\n            '8',\r\n            '8',\r\n            '8',\r\n            '8',\r\n            'PPPPPPPP',\r\n            'RNBQKBNR'\r\n        ]);\r\n\r\n    const [selectedPiece, setSelectedPiece] = useState('');\r\n    const [oldX, setOldX] = useState('');\r\n    const [oldY, setOldY] = useState('');\r\n    const [allowedMoves, setAllowedMoves] = useState([])\r\n    const [whiteToMove, setWhiteToMove] = useState(true);\r\n    const [canWhiteShortCastle, setCanWhiteShortCastle] = useState(true);\r\n    const [canWhiteLongCastle, setCanWhiteLongCastle] = useState(true);\r\n    const [canBlackShortCastle, setCanBlackShortCastle] = useState(true);\r\n    const [canBlackLongCastle, setCanBlackLongCastle] = useState(true);\r\n    const [isWhiteInCheck, setIsWhiteInCheck] = useState(false);\r\n    const [isBlackInCheck, setIsBlackInCheck] = useState(false);\r\n\r\n    function handleCapture(x, y, pieceToCapture) {\r\n        if (selectedPiece.charCodeAt(0) >= 65 && selectedPiece.charCodeAt(0) <= 90) {\r\n            if (pieceToCapture.charCodeAt(0) >= 65 && pieceToCapture.charCodeAt(0) <= 90) {\r\n                return\r\n            }\r\n        }\r\n\r\n        if (selectedPiece.charCodeAt(0) >= 97 && selectedPiece.charCodeAt(0) <= 122) {\r\n            if (pieceToCapture.charCodeAt(0) >= 97 && pieceToCapture.charCodeAt(0) <= 122) {\r\n                return\r\n            }\r\n        }\r\n\r\n        let oldRow = boardPosition[oldX];\r\n        let newRow = boardPosition[x];\r\n\r\n        oldRow = convertFenToString(oldRow);\r\n        newRow = convertFenToString(newRow);\r\n\r\n        oldRow = oldRow.substring(0, oldY) + ' ' + oldRow.substring(oldY + 1, oldRow.length)\r\n        newRow = newRow.substring(0, y) + selectedPiece + newRow.substring(y + 1, newRow.length)\r\n\r\n        oldRow = convertStringToFen(oldRow)\r\n        newRow = convertStringToFen(newRow)\r\n\r\n        let newBoard = [];\r\n\r\n        for (let i = 0; i < boardPosition.length; i++) {\r\n            if (i == x || i == oldX) {\r\n                if (x == oldX) {\r\n                    //TO DO: Implement capturing on the same row\r\n                    console.warn(\"Implement capturing on the same row\")\r\n                }\r\n                else if (i == x) {\r\n                    newBoard.push(newRow);\r\n                } else if (i == oldX) {\r\n                    newBoard.push(oldRow);\r\n                }\r\n            } else {\r\n                newBoard.push(boardPosition[i]);\r\n            }\r\n        }\r\n\r\n        setBoardPosition(newBoard)\r\n        setWhiteToMove(!whiteToMove)\r\n    }\r\n\r\n    function convertFenToString(fen) {\r\n        let result = '';\r\n\r\n        for (let i = 0; i < fen.length; i++) {\r\n            if (fen.charCodeAt(i) >= 48 && fen.charCodeAt(i) <= 57) {\r\n                result += ' '.repeat(Number(fen[i]))\r\n            } else {\r\n                result += fen[i];\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function convertStringToFen(str) {\r\n        for (let i = str.length - 1; i >= 0; i--) {\r\n            if (str[i] == ' ') {\r\n                if (i < str.length - 1) {\r\n                    if (str.charCodeAt(i + 1) >= 48 && str.charCodeAt(i + 1) <= 57) {\r\n                        str = str.substring(0, i) + (Number(str[i + 1]) + 1).toString() + str.substring(i + 1, str.length);\r\n                        str = str.slice(0, i + 1) + str.slice(i + 2);\r\n                    } else {\r\n                        str = str.substring(0, i) + '1' + str.substring(i + 1, str.length);\r\n                    }\r\n                } else {\r\n                    str = str.substring(0, i) + '1' + str.substring(i + 1, str.length);\r\n                }\r\n            }\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n    const Move = (p, c, x, y) => {\r\n        if (selectedPiece) {\r\n\r\n            //allows to deselect a piece\r\n            if (x == oldX) {\r\n                if (y == oldY) {\r\n                    setSelectedPiece('')\r\n                    setOldX('')\r\n                    setOldY('')\r\n                    return\r\n                }\r\n            }\r\n\r\n            //allow only king moves if in check\r\n            //TO DO: Allow check blocks and attacking pieces captures\r\n            if (whiteToMove) {\r\n                if (isWhiteInCheck) {\r\n                    if (p != 'k') {\r\n                        setSelectedPiece('')\r\n                        setOldX('')\r\n                        setOldY('')\r\n                        return\r\n                    }\r\n                }\r\n            } else {\r\n                if (isBlackInCheck) {\r\n                    if (p != 'k') {\r\n                        setSelectedPiece('')\r\n                        setOldX('')\r\n                        setOldY('')\r\n                        return\r\n                    }\r\n                }\r\n            }\r\n\r\n            let row = boardPosition[x];\r\n            let newRow = '';\r\n            let oldRow = '';\r\n            let allowed = false;\r\n\r\n            //check if the move you're making is legal\r\n            for (let i = 0; i < allowedMoves.length; i++) {\r\n                let move = allowedMoves[i];\r\n\r\n                if (x == move[0]) {\r\n                    if (y == move[1]) {\r\n                        allowed = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            //stop if illegal move is used\r\n            if (!allowed) {\r\n                setOldX('')\r\n                setOldY('')\r\n                setSelectedPiece('')\r\n                return\r\n            }\r\n\r\n            //convert FEN to string, update the position and convert back to FEN\r\n            newRow = convertFenToString(row);\r\n\r\n            if (newRow[y] != ' ') {\r\n                handleCapture(x, y, newRow[y]);\r\n                setOldX('')\r\n                setOldY('')\r\n                setSelectedPiece('')\r\n                return;\r\n            }\r\n\r\n            newRow = newRow.substring(0, y) + selectedPiece + newRow.substring(y + 1, newRow.length);\r\n            newRow = convertStringToFen(newRow);\r\n\r\n            //get the old position; if same row, get the current new position\r\n            row = x == oldX ? newRow : boardPosition[oldX];\r\n\r\n            //convert FEN to string, update the old position and convert back to FEN\r\n            oldRow = convertFenToString(row);\r\n            oldRow = oldRow.substring(0, oldY) + ' ' + oldRow.substring(oldY + 1, oldRow.length);\r\n            oldRow = convertStringToFen(oldRow);\r\n\r\n            //create a new board position and update the board\r\n            let newBoard = [];\r\n\r\n            for (let i = 0; i < boardPosition.length; i++) {\r\n                if (i == x || i == oldX) {\r\n                    //use the old position if it's the same row as the old position will be updating the current newPosition and will have the most up-to-date values\r\n                    if (x == oldX) {\r\n                        newBoard.push(oldRow);\r\n                    }\r\n                    else if (i == x) {\r\n                        newBoard.push(newRow);\r\n                    } else if (i == oldX) {\r\n                        newBoard.push(oldRow);\r\n                    }\r\n                } else {\r\n                    newBoard.push(boardPosition[i]);\r\n                }\r\n            }\r\n\r\n            //removes the right to castle if the rook has moved for white\r\n            if (selectedPiece == 'R') {\r\n                if (oldX == 7 && oldY == 0) {\r\n                    setCanWhiteLongCastle(false)\r\n                }\r\n                if (oldX == 7 && oldY == 7) {\r\n                    setCanWhiteShortCastle(false)\r\n                }\r\n            }\r\n\r\n            //removes the right to castle if the rook has moved for black\r\n            if (selectedPiece == 'r') {\r\n                if (oldX == 0 && oldY == 0) {\r\n                    setCanBlackLongCastle(false)\r\n                }\r\n                if (oldX == 0 && oldY == 7) {\r\n                    setCanBlackShortCastle(false)\r\n                }\r\n            }\r\n\r\n            //block castling when king moves for black\r\n            if (selectedPiece == 'k') {\r\n                setCanBlackLongCastle(false)\r\n                setCanBlackShortCastle(false)\r\n            }\r\n\r\n            //block castling when king moves for white\r\n            if (selectedPiece == 'K') {\r\n                setCanWhiteLongCastle(false)\r\n                setCanWhiteShortCastle(false)\r\n            }\r\n\r\n            //handle castling for white\r\n            if (selectedPiece == 'K') {\r\n                if (y - oldY == 2) {\r\n                    let castleRow = newBoard[7];\r\n                    castleRow = convertFenToString(castleRow)\r\n                    castleRow = castleRow.substring(0, 5) + \"RK \"\r\n                    castleRow = convertStringToFen(castleRow)\r\n                    newBoard[7] = castleRow\r\n                }\r\n\r\n                if (oldY - y == 2) {\r\n                    let castleRow = newBoard[7];\r\n                    castleRow = convertFenToString(castleRow)\r\n                    castleRow = \"  KR \" + castleRow.substring(5, 8)\r\n                    castleRow = convertStringToFen(castleRow)\r\n                    newBoard[7] = castleRow\r\n                }\r\n            }\r\n\r\n            //handle castling for black\r\n            if (selectedPiece == 'k') {\r\n                if (y - oldY == 2) {\r\n                    let castleRow = newBoard[0];\r\n                    castleRow = convertFenToString(castleRow)\r\n                    castleRow = castleRow.substring(0, 5) + \"rk \"\r\n                    castleRow = convertStringToFen(castleRow)\r\n                    newBoard[0] = castleRow\r\n                }\r\n\r\n                if (oldY - y == 2) {\r\n                    let castleRow = newBoard[0];\r\n                    castleRow = convertFenToString(castleRow)\r\n                    castleRow = \"  kr \" + castleRow.substring(5, 8)\r\n                    castleRow = convertStringToFen(castleRow)\r\n                    newBoard[0] = castleRow\r\n                }\r\n            }\r\n\r\n            //update the board and reset the variables\r\n            setBoardPosition(newBoard);\r\n            setOldX('')\r\n            setOldY('')\r\n            setSelectedPiece('')\r\n\r\n            setWhiteToMove(!whiteToMove)\r\n        } else {\r\n            if (c != whiteToMove) {\r\n                return\r\n            }\r\n\r\n            switch (p) {\r\n                case \"p\":\r\n                    let pawnMoves = [];\r\n                    if (c) {\r\n                        if (x == 6) {\r\n                            pawnMoves.push([x - 1, y])\r\n                            pawnMoves.push([x - 2, y])\r\n                        } else {\r\n                            pawnMoves.push([x - 1, y])\r\n                        }\r\n\r\n                        if (x > 0) {\r\n                            if (y > 0) {\r\n                                let currentRowPosition = boardPosition[x - 1];\r\n                                currentRowPosition = convertFenToString(currentRowPosition);\r\n                                if (currentRowPosition[y - 1] != ' ') {\r\n                                    pawnMoves.push([x - 1, y - 1])\r\n                                }\r\n                            }\r\n\r\n                            if (y < 8) {\r\n                                let currentRowPosition = boardPosition[x - 1];\r\n                                currentRowPosition = convertFenToString(currentRowPosition);\r\n                                if (currentRowPosition[y + 1] != ' ') {\r\n                                    pawnMoves.push([x - 1, y + 1])\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (x == 1) {\r\n                            pawnMoves.push([x + 1, y])\r\n                            pawnMoves.push([x + 2, y])\r\n                        } else {\r\n                            pawnMoves.push([x + 1, y])\r\n                        }\r\n\r\n                        if (x < 8) {\r\n                            if (y > 0) {\r\n                                let currentRowPosition = boardPosition[x + 1];\r\n                                currentRowPosition = convertFenToString(currentRowPosition);\r\n                                if (currentRowPosition[y - 1] != ' ') {\r\n                                    pawnMoves.push([x + 1, y - 1])\r\n                                }\r\n                            }\r\n\r\n                            if (y < 8) {\r\n                                let currentRowPosition = boardPosition[x + 1];\r\n                                currentRowPosition = convertFenToString(currentRowPosition);\r\n                                if (currentRowPosition[y + 1] != ' ') {\r\n                                    pawnMoves.push([x + 1, y + 1])\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    setAllowedMoves(pawnMoves)\r\n                    break;\r\n                case \"r\":\r\n                    let rookMoves = [];\r\n                    for (let i = 0; i < 8; i++) {\r\n                        rookMoves.push([i, y]);\r\n                        rookMoves.push([x, i]);\r\n                    }\r\n                    setAllowedMoves(rookMoves)\r\n                    break;\r\n                case \"n\":\r\n                    let knightMoves = [];\r\n\r\n                    if (x - 2 >= 0 && y - 1 >= 0) {\r\n                        knightMoves.push([x - 2, y - 1]);\r\n                    }\r\n\r\n                    if (x - 2 >= 0 && y + 1 < 8) {\r\n                        knightMoves.push([x - 2, y + 1]);\r\n                    }\r\n\r\n                    if (x + 2 < 8 && y - 1 >= 0) {\r\n                        knightMoves.push([x + 2, y - 1]);\r\n                    }\r\n\r\n                    if (x + 2 < 8 && y + 1 < 8) {\r\n                        knightMoves.push([x + 2, y + 1]);\r\n                    }\r\n\r\n                    if (x - 1 >= 0 && y - 2 >= 0) {\r\n                        knightMoves.push([x - 1, y - 2]);\r\n                    }\r\n\r\n                    if (x + 1 < 8 && y - 2 >= 0) {\r\n                        knightMoves.push([x + 1, y - 2]);\r\n                    }\r\n\r\n                    if (x - 1 >= 0 && y + 2 < 8) {\r\n                        knightMoves.push([x - 1, y + 2]);\r\n                    }\r\n\r\n                    if (x + 1 < 8 && y + 2 < 8) {\r\n                        knightMoves.push([x + 1, y + 2]);\r\n                    }\r\n\r\n                    setAllowedMoves(knightMoves)\r\n                    break;\r\n                case \"b\":\r\n                    let bishopMoves = [];\r\n                    for (let i = 1; i <= 8; i++) {\r\n                        if (x - i >= 0 && y - 1 >= 0) {\r\n                            bishopMoves.push([x - i, y - i]);\r\n                        }\r\n\r\n                        if (x + 1 < 8 && y + i < 8) {\r\n                            bishopMoves.push([x + i, y + i]);\r\n                        }\r\n\r\n                        if (x + 1 < 8 && y - 1 >= 0) {\r\n                            bishopMoves.push([x + i, y - i]);\r\n                        }\r\n\r\n                        if (x - i >= 0 && y + 1 < 8) {\r\n                            bishopMoves.push([x - i, y + i]);\r\n                        }\r\n                    }\r\n                    setAllowedMoves(bishopMoves);\r\n                    break;\r\n                case \"q\":\r\n                    let queenMoves = [];\r\n                    for (let i = 1; i <= 8; i++) {\r\n                        if (x - i >= 0 && y - 1 >= 0) {\r\n                            queenMoves.push([x - i, y - i]);\r\n                        }\r\n\r\n                        if (x + 1 < 8 && y + i < 8) {\r\n                            queenMoves.push([x + i, y + i]);\r\n                        }\r\n\r\n                        if (x + 1 < 8 && y - 1 >= 0) {\r\n                            queenMoves.push([x + i, y - i]);\r\n                        }\r\n\r\n                        if (x - i >= 0 && y + 1 < 8) {\r\n                            queenMoves.push([x - i, y + i]);\r\n                        }\r\n                    }\r\n                    for (let i = 0; i < 8; i++) {\r\n                        queenMoves.push([i, y]);\r\n                        queenMoves.push([x, i]);\r\n                    }\r\n                    setAllowedMoves(queenMoves)\r\n                    break;\r\n                case \"k\":\r\n                    let kingMoves = [];\r\n                    for (let i = x - 1; i <= x + 1; i++) {\r\n                        for (let j = y - 1; j <= y + 1; j++) {\r\n                            //handle edges\r\n                            if (i >= 0 && i < 8) {\r\n                                if (j >= 0 && j < 8) {\r\n                                    kingMoves.push([i, j]);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    //handle castling\r\n                    if (c) {\r\n                        let lastRow = boardPosition[7]\r\n                        lastRow = convertFenToString(lastRow)\r\n                        if (canWhiteShortCastle) {\r\n                            if (lastRow[5] == ' ' && lastRow[6] == ' ') {\r\n                                kingMoves.push([x, y + 2])\r\n                            }\r\n                        }\r\n\r\n                        if (canWhiteLongCastle) {\r\n                            if (lastRow[1] == ' ' && lastRow[2] == ' ' && lastRow[3] == ' ') {\r\n                                kingMoves.push([x, y - 2]);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        let firstRow = boardPosition[0]\r\n                        firstRow = convertFenToString(firstRow)\r\n\r\n                        if (canBlackShortCastle) {\r\n                            if (firstRow[5] == ' ' && firstRow[6] == ' ') {\r\n                                kingMoves.push([x, y + 2])\r\n                            }\r\n                        }\r\n\r\n                        if (canBlackLongCastle) {\r\n                            if (firstRow[1] == ' ' && firstRow[2] == ' ' && firstRow[3] == ' ') {\r\n                                kingMoves.push([x, y - 2]);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    setAllowedMoves(kingMoves);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            if (p != undefined && c != undefined) {\r\n                p = c ? p.toUpperCase() : p;\r\n\r\n                setSelectedPiece(p);\r\n                setOldX(x);\r\n                setOldY(y);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (<>\r\n        <div className=\"chessContainer\">\r\n            <div id=\"grid\" className=\"chessGrid\">\r\n                {new Board()}\r\n            </div>\r\n        </div>\r\n    </>)\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}