{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vladi Gotsin\\\\Desktop\\\\react\\\\src\\\\Board.js\";\nimport { Component } from \"react\";\nimport { Square } from \"./Square.js\";\nimport { ConvertFENPieceToPiece, ConvertFenToString, UpdatePosition } from \"./HelperMethods.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DIM = 8; //8x8 Board\n\nexport class Board extends Component {\n  constructor(props) {\n    super(props);\n    this.movePiece = (x, y) => {\n      let squares = this.renderSquares();\n      let currentSquare = squares.find(s => s.props.x == x && s.props.y == y);\n      let selectedSquare = squares.find(s => s.props.x == this.state.selectedSquareX && s.props.y == this.state.selectedSquareY);\n      let p = UpdatePosition(selectedSquare, currentSquare, this.state.position);\n      this.setState({\n        position: p,\n        possibleMoves: []\n      });\n    };\n    this.updatePossibleMoves = moves => {\n      this.setState({\n        possibleMoves: moves\n      });\n    };\n    this.updateSelectedSquareX = x => {\n      this.setState({\n        selectedSquareX: x\n      });\n    };\n    this.updateSelectedSquareY = y => {\n      this.setState({\n        selectedSquareY: y\n      });\n    };\n    this.state = {\n      position: ['rnbqkbnr', 'pppppppp', '8', '8', '8', '8', 'PPPPPPPP', 'RNBQKBNR'],\n      possibleMoves: [],\n      selectedSquareX: \"\",\n      selectedSquareY: \"\",\n      canWhiteShortCastle: true,\n      canWhiteLongCastle: true,\n      canBlackShortCastle: true,\n      canBlackLongCastle: true\n    };\n  }\n  getPossibleMoves(square) {\n    const squares = this.renderSquares();\n    let possibleMoves = [];\n    if (square.props.piece) {\n      let color = square.props.piece.split('-')[0];\n      let piece = square.props.piece.split('-')[1];\n      switch (piece) {\n        case \"pawn\":\n          if (color === \"white\") {\n            //move one square ahead\n            const targetSquare1 = squares.find(s => s.props.x === square.props.x - 1 && s.props.y === square.props.y);\n            if (targetSquare1 && !targetSquare1.props.piece) {\n              possibleMoves.push({\n                x: square.props.x - 1,\n                y: square.props.y\n              });\n            }\n\n            //move two squares on the very first move\n            const targetSquare2 = squares.find(s => s.props.x === square.props.x - 2 && s.props.y === square.props.y);\n            if (square.props.x === 6 && targetSquare2 && !targetSquare2.props.piece && !targetSquare1.props.piece) {\n              possibleMoves.push({\n                x: square.props.x - 2,\n                y: square.props.y\n              });\n            }\n\n            //capture to the left diagonal\n            const leftNeigborToPotentuallyCapture1 = squares.find(s => s.props.x === square.props.x - 1 && s.props.y === square.props.y - 1);\n            if (leftNeigborToPotentuallyCapture1 && leftNeigborToPotentuallyCapture1.props.piece && leftNeigborToPotentuallyCapture1.props.piece.split('-')[0] != square.props.piece.split(\"-\")[0]) {\n              possibleMoves.push({\n                x: square.props.x - 1,\n                y: square.props.y - 1\n              });\n            }\n\n            //capture to the right diagonal\n            const leftNeigborToPotentuallyCapture2 = squares.find(s => s.props.x === square.props.x - 1 && s.props.y === square.props.y + 1);\n            if (leftNeigborToPotentuallyCapture2 && leftNeigborToPotentuallyCapture2.props.piece && leftNeigborToPotentuallyCapture2.props.piece.split('-')[0] != square.props.piece.split(\"-\")[0]) {\n              possibleMoves.push({\n                x: square.props.x - 1,\n                y: square.props.y + 1\n              });\n            }\n\n            //TODO: Implement the french fancy move - En passant\n            //TODO: Implement promotion\n          } else {\n            const targetSquare1 = squares.find(s => s.props.x === square.props.x + 1 && s.props.y === square.props.y);\n            if (targetSquare1 && !targetSquare1.props.piece) {\n              possibleMoves.push({\n                x: square.props.x + 1,\n                y: square.props.y\n              });\n            }\n\n            //move two squares on the very first move\n            const targetSquare2 = squares.find(s => s.props.x === square.props.x + 2 && s.props.y === square.props.y);\n            if (square.props.x === 1 && targetSquare2 && !targetSquare2.props.piece && !targetSquare1.props.piece) {\n              possibleMoves.push({\n                x: square.props.x + 2,\n                y: square.props.y\n              });\n            }\n\n            //capture to the left diagonal\n            const leftNeigborToPotentuallyCapture1 = squares.find(s => s.props.x === square.props.x + 1 && s.props.y === square.props.y - 1);\n            if (leftNeigborToPotentuallyCapture1 && leftNeigborToPotentuallyCapture1.props.piece && leftNeigborToPotentuallyCapture1.props.piece.split('-')[0] != square.props.piece.split(\"-\")[0]) {\n              possibleMoves.push({\n                x: square.props.x + 1,\n                y: square.props.y - 1\n              });\n            }\n\n            //capture to the right diagonal\n            const leftNeigborToPotentuallyCapture2 = squares.find(s => s.props.x === square.props.x + 1 && s.props.y === square.props.y + 1);\n            if (leftNeigborToPotentuallyCapture2 && leftNeigborToPotentuallyCapture2.props.piece && leftNeigborToPotentuallyCapture2.props.piece.split('-')[0] != square.props.piece.split(\"-\")[0]) {\n              possibleMoves.push({\n                x: square.props.x + 1,\n                y: square.props.y + 1\n              });\n            }\n\n            //TODO: Implement the french fancy move - En passant\n            //TODO: Implement promotion\n          }\n          break;\n        case \"rook\":\n          for (let i = square.props.x - 1; i >= 0; i--) {\n            let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.props.y);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: i,\n                y: square.props.y\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: i,\n                  y: square.props.y\n                });\n              }\n              break;\n            }\n          }\n          for (let i = square.props.y - 1; i >= 0; i--) {\n            let targetSquare = squares.find(s => s.props.x === square.props.x && s.props.y === i);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: square.props.x,\n                y: i\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: square.props.x,\n                  y: i\n                });\n              }\n              break;\n            }\n          }\n          for (let i = square.props.x + 1; i < DIM; i++) {\n            let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.props.y);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: i,\n                y: square.props.y\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: i,\n                  y: square.props.y\n                });\n              }\n              break;\n            }\n          }\n          for (let i = square.props.y + 1; i < DIM; i++) {\n            let targetSquare = squares.find(s => s.props.x === square.props.x && s.props.y === i);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: square.props.x,\n                y: i\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: square.props.x,\n                  y: i\n                });\n              }\n              break;\n            }\n          }\n          break;\n        case \"bishop\":\n          for (let i = 1; i <= DIM; i++) {\n            if (square.props.x - i >= 0 && square.props.y - i >= 0) {\n              let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.props.x - i,\n                  y: square.props.y - i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.props.x - i,\n                    y: square.props.y - i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          for (let i = 1; i <= DIM; i++) {\n            if (square.props.x + i < DIM && square.props.y + i < DIM) {\n              let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.props.x + i,\n                  y: square.props.y + i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.props.x + i,\n                    y: square.props.y + i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          for (let i = 1; i <= DIM; i++) {\n            if (square.props.x - i >= 0 && square.props.y + i < DIM) {\n              let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.props.x - i,\n                  y: square.props.y + i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.props.x - i,\n                    y: square.props.y + i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          for (let i = 1; i <= DIM; i++) {\n            if (square.props.x + i < DIM && square.props.y - i >= 0) {\n              let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.props.x + i,\n                  y: square.props.y - i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.props.x + i,\n                    y: square.props.y - i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          break;\n        case \"knight\":\n          let targetPiece1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1);\n          let targetPiece2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1);\n          let targetPiece3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1);\n          let targetPiece4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1);\n          let targetPiece5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2);\n          let targetPiece6 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2);\n          let targetPiece7 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2);\n          let targetPiece8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2);\n          if (targetPiece1) {\n            if (!targetPiece1.props.piece) {\n              possibleMoves.push({\n                x: targetPiece1.props.x,\n                y: targetPiece1.props.y\n              });\n            } else {\n              if (targetPiece1.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece1.props.x,\n                  y: targetPiece1.props.y\n                });\n              }\n            }\n          }\n          if (targetPiece2) {\n            if (!targetPiece2.props.piece) {\n              possibleMoves.push({\n                x: targetPiece2.props.x,\n                y: targetPiece2.props.y\n              });\n            } else {\n              if (targetPiece2.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece2.props.x,\n                  y: targetPiece2.props.y\n                });\n              }\n            }\n          }\n          if (targetPiece3) {\n            if (!targetPiece3.props.piece) {\n              possibleMoves.push({\n                x: targetPiece3.props.x,\n                y: targetPiece3.props.y\n              });\n            } else {\n              if (targetPiece3.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece3.props.x,\n                  y: targetPiece3.props.y\n                });\n              }\n            }\n          }\n          if (targetPiece4) {\n            if (!targetPiece4.props.piece) {\n              possibleMoves.push({\n                x: targetPiece4.props.x,\n                y: targetPiece4.props.y\n              });\n            } else {\n              if (targetPiece4.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece4.props.x,\n                  y: targetPiece4.props.y\n                });\n              }\n            }\n          }\n          if (targetPiece5) {\n            if (!targetPiece5.props.piece) {\n              possibleMoves.push({\n                x: targetPiece5.props.x,\n                y: targetPiece5.props.y\n              });\n            } else {\n              if (targetPiece5.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece5.props.x,\n                  y: targetPiece5.props.y\n                });\n              }\n            }\n          }\n          if (targetPiece6) {\n            if (!targetPiece6.props.piece) {\n              possibleMoves.push({\n                x: targetPiece6.props.x,\n                y: targetPiece6.props.y\n              });\n            } else {\n              if (targetPiece6.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece6.props.x,\n                  y: targetPiece6.props.y\n                });\n              }\n            }\n          }\n          if (targetPiece7) {\n            if (!targetPiece7.props.piece) {\n              possibleMoves.push({\n                x: targetPiece7.props.x,\n                y: targetPiece7.props.y\n              });\n            } else {\n              if (targetPiece7.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece7.props.x,\n                  y: targetPiece7.props.y\n                });\n              }\n            }\n          }\n          if (targetPiece8) {\n            if (!targetPiece8.props.piece) {\n              possibleMoves.push({\n                x: targetPiece8.props.x,\n                y: targetPiece8.props.y\n              });\n            } else {\n              if (targetPiece8.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece8.props.x,\n                  y: targetPiece8.props.y\n                });\n              }\n            }\n          }\n          break;\n        case \"king\":\n          for (let i = -1; i < 2; i++) {\n            for (let j = -1; j < 2; j++) {\n              let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + j);\n              if (targetPiece) {\n                if (!targetPiece.props.piece) {\n                  possibleMoves.push({\n                    x: targetPiece.props.x,\n                    y: targetPiece.props.y\n                  });\n                } else {\n                  if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                    possibleMoves.push({\n                      x: targetPiece.props.x,\n                      y: targetPiece.props.y\n                    });\n                  }\n                }\n              }\n            }\n          }\n\n          //Castling logic\n          if (color == \"white\") {\n            if (this.state.canWhiteLongCastle) {\n              if (this.state.position[7].charAt(1) == 3) {\n                possibleMoves.push({\n                  x: square.props.x,\n                  y: square.props.y - 2\n                });\n                this.setState({\n                  canWhiteLongCastle: false\n                });\n              }\n            }\n            if (this.state.canWhiteShortCastle) {\n              if (this.state.position[7].split(\"\").reverse().join(\"\").charAt(1) == 2) {\n                possibleMoves.push({\n                  x: square.props.x,\n                  y: square.props.y + 2\n                });\n                this.setState({\n                  canWhiteShortCastle: false\n                });\n              }\n            }\n          } else {\n            if (this.state.canBlackLongCastle) {\n              if (this.state.position[0].charAt(1) == 3) {\n                possibleMoves.push({\n                  x: square.props.x,\n                  y: square.props.y - 2\n                });\n                this.setState({\n                  canBlackLongCastle: false\n                });\n              }\n            }\n          }\n          break;\n        case \"queen\":\n          for (let i = square.props.x - 1; i >= 0; i--) {\n            let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.props.y);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: i,\n                y: square.props.y\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: i,\n                  y: square.props.y\n                });\n              }\n              break;\n            }\n          }\n          for (let i = square.props.y - 1; i >= 0; i--) {\n            let targetSquare = squares.find(s => s.props.x === square.props.x && s.props.y === i);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: square.props.x,\n                y: i\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: square.props.x,\n                  y: i\n                });\n              }\n              break;\n            }\n          }\n          for (let i = square.props.x + 1; i < DIM; i++) {\n            let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.props.y);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: i,\n                y: square.props.y\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: i,\n                  y: square.props.y\n                });\n              }\n              break;\n            }\n          }\n          for (let i = square.props.y + 1; i < DIM; i++) {\n            let targetSquare = squares.find(s => s.props.x === square.props.x && s.props.y === i);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: square.props.x,\n                y: i\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: square.props.x,\n                  y: i\n                });\n              }\n              break;\n            }\n          }\n          for (let i = 1; i <= DIM; i++) {\n            if (square.props.x - i >= 0 && square.props.y - i >= 0) {\n              let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.props.x - i,\n                  y: square.props.y - i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.props.x - i,\n                    y: square.props.y - i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          for (let i = 1; i <= DIM; i++) {\n            if (square.props.x + i < DIM && square.props.y + i < DIM) {\n              let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.props.x + i,\n                  y: square.props.y + i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.props.x + i,\n                    y: square.props.y + i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          for (let i = 1; i <= DIM; i++) {\n            if (square.props.x - i >= 0 && square.props.y + i < DIM) {\n              let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.props.x - i,\n                  y: square.props.y + i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.props.x - i,\n                    y: square.props.y + i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          for (let i = 1; i <= DIM; i++) {\n            if (square.props.x + i < DIM && square.props.y - i >= 0) {\n              let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.props.x + i,\n                  y: square.props.y - i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.props.x + i,\n                    y: square.props.y - i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    console.log(\"Possible Moves:\", possibleMoves);\n    this.updatePossibleMoves(possibleMoves);\n  }\n  renderSquares() {\n    let squareColorIsWhite = true;\n    const squares = [];\n    for (let i = 0; i < DIM; i++) {\n      let row = ConvertFenToString(this.state.position[i]);\n      for (let j = 0; j < DIM; j++) {\n        const piece = row.charAt(j);\n        let color = squareColorIsWhite ? \"\" : \"dark\";\n        squares.push( /*#__PURE__*/_jsxDEV(Square, {\n          getPossibleMoves: this.getPossibleMoves.bind(this),\n          x: i,\n          y: j,\n          piece: ConvertFENPieceToPiece(piece.trim()),\n          color: color,\n          selectedSquareX: this.state.selectedSquareX,\n          setSelectedSquareX: this.updateSelectedSquareX,\n          selectedSquareY: this.state.selectedSquareY,\n          setSelectedSquareY: this.updateSelectedSquareY,\n          possibleMoves: this.state.possibleMoves,\n          updatePossibleMoves: this.updatePossibleMoves,\n          movePiece: this.movePiece\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 21\n        }, this));\n        squareColorIsWhite = !squareColorIsWhite;\n      }\n      squareColorIsWhite = !squareColorIsWhite;\n    }\n    return squares;\n  }\n  render() {\n    //const squares = this.renderSquares();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessGrid\",\n      children: this.renderSquares()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 13\n    }, this);\n  }\n}","map":{"version":3,"names":["Component","Square","ConvertFENPieceToPiece","ConvertFenToString","UpdatePosition","jsxDEV","_jsxDEV","DIM","Board","constructor","props","movePiece","x","y","squares","renderSquares","currentSquare","find","s","selectedSquare","state","selectedSquareX","selectedSquareY","p","position","setState","possibleMoves","updatePossibleMoves","moves","updateSelectedSquareX","updateSelectedSquareY","canWhiteShortCastle","canWhiteLongCastle","canBlackShortCastle","canBlackLongCastle","getPossibleMoves","square","piece","color","split","targetSquare1","push","targetSquare2","leftNeigborToPotentuallyCapture1","leftNeigborToPotentuallyCapture2","i","targetSquare","targetPiece","targetPiece1","targetPiece2","targetPiece3","targetPiece4","targetPiece5","targetPiece6","targetPiece7","targetPiece8","j","charAt","reverse","join","console","log","squareColorIsWhite","row","bind","trim","setSelectedSquareX","setSelectedSquareY","fileName","_jsxFileName","lineNumber","columnNumber","render","className","children"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/src/Board.js"],"sourcesContent":["import { Component } from \"react\";\r\nimport { Square } from \"./Square.js\"\r\nimport { ConvertFENPieceToPiece, ConvertFenToString, UpdatePosition } from \"./HelperMethods.js\";\r\n\r\nconst DIM = 8; //8x8 Board\r\n\r\nexport class Board extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            position: [\r\n                'rnbqkbnr',\r\n                'pppppppp',\r\n                '8',\r\n                '8',\r\n                '8',\r\n                '8',\r\n                'PPPPPPPP',\r\n                'RNBQKBNR'\r\n            ],\r\n            possibleMoves: [],\r\n            selectedSquareX: \"\",\r\n            selectedSquareY: \"\",\r\n            canWhiteShortCastle: true,\r\n            canWhiteLongCastle: true,\r\n            canBlackShortCastle: true,\r\n            canBlackLongCastle: true\r\n        };\r\n    }\r\n\r\n    movePiece = (x, y) => {\r\n        let squares = this.renderSquares();\r\n\r\n        let currentSquare = squares.find(s => s.props.x == x && s.props.y == y)\r\n        let selectedSquare = squares.find(s => s.props.x == this.state.selectedSquareX && s.props.y == this.state.selectedSquareY)\r\n\r\n        let p = UpdatePosition(selectedSquare, currentSquare, this.state.position)\r\n\r\n        this.setState({ position: p, possibleMoves: [] })\r\n    }\r\n\r\n    updatePossibleMoves = (moves) => {\r\n        this.setState({ possibleMoves: moves });\r\n    };\r\n\r\n    updateSelectedSquareX = (x) => {\r\n        this.setState({ selectedSquareX: x })\r\n    }\r\n\r\n    updateSelectedSquareY = (y) => {\r\n        this.setState({ selectedSquareY: y })\r\n    }\r\n\r\n    getPossibleMoves(square) {\r\n        const squares = this.renderSquares();\r\n        let possibleMoves = [];\r\n\r\n        if (square.props.piece) {\r\n            let color = square.props.piece.split('-')[0];\r\n            let piece = square.props.piece.split('-')[1];\r\n            switch (piece) {\r\n                case \"pawn\":\r\n                    if (color === \"white\") {\r\n                        //move one square ahead\r\n                        const targetSquare1 = squares.find(s => s.props.x === square.props.x - 1 && s.props.y === square.props.y);\r\n                        if (targetSquare1 && !targetSquare1.props.piece) {\r\n                            possibleMoves.push({ x: square.props.x - 1, y: square.props.y });\r\n                        }\r\n\r\n                        //move two squares on the very first move\r\n                        const targetSquare2 = squares.find(s => s.props.x === square.props.x - 2 && s.props.y === square.props.y);\r\n                        if (square.props.x === 6 && targetSquare2 && !targetSquare2.props.piece && !targetSquare1.props.piece) {\r\n                            possibleMoves.push({ x: square.props.x - 2, y: square.props.y });\r\n                        }\r\n\r\n                        //capture to the left diagonal\r\n                        const leftNeigborToPotentuallyCapture1 = squares.find(s => s.props.x === square.props.x - 1 && s.props.y === square.props.y - 1);\r\n                        if (leftNeigborToPotentuallyCapture1 && leftNeigborToPotentuallyCapture1.props.piece &&\r\n                            leftNeigborToPotentuallyCapture1.props.piece.split('-')[0] != square.props.piece.split(\"-\")[0]) {\r\n                            possibleMoves.push({ x: square.props.x - 1, y: square.props.y - 1 });\r\n                        }\r\n\r\n                        //capture to the right diagonal\r\n                        const leftNeigborToPotentuallyCapture2 = squares.find(s => s.props.x === square.props.x - 1 && s.props.y === square.props.y + 1);\r\n                        if (leftNeigborToPotentuallyCapture2 && leftNeigborToPotentuallyCapture2.props.piece &&\r\n                            leftNeigborToPotentuallyCapture2.props.piece.split('-')[0] != square.props.piece.split(\"-\")[0]) {\r\n                            possibleMoves.push({ x: square.props.x - 1, y: square.props.y + 1 });\r\n                        }\r\n\r\n                        //TODO: Implement the french fancy move - En passant\r\n                        //TODO: Implement promotion\r\n                    } else {\r\n                        const targetSquare1 = squares.find(s => s.props.x === square.props.x + 1 && s.props.y === square.props.y);\r\n                        if (targetSquare1 && !targetSquare1.props.piece) {\r\n                            possibleMoves.push({ x: square.props.x + 1, y: square.props.y });\r\n                        }\r\n\r\n                        //move two squares on the very first move\r\n                        const targetSquare2 = squares.find(s => s.props.x === square.props.x + 2 && s.props.y === square.props.y);\r\n                        if (square.props.x === 1 && targetSquare2 && !targetSquare2.props.piece && !targetSquare1.props.piece) {\r\n                            possibleMoves.push({ x: square.props.x + 2, y: square.props.y });\r\n                        }\r\n\r\n                        //capture to the left diagonal\r\n                        const leftNeigborToPotentuallyCapture1 = squares.find(s => s.props.x === square.props.x + 1 && s.props.y === square.props.y - 1);\r\n                        if (leftNeigborToPotentuallyCapture1 && leftNeigborToPotentuallyCapture1.props.piece &&\r\n                            leftNeigborToPotentuallyCapture1.props.piece.split('-')[0] != square.props.piece.split(\"-\")[0]) {\r\n                            possibleMoves.push({ x: square.props.x + 1, y: square.props.y - 1 });\r\n                        }\r\n\r\n                        //capture to the right diagonal\r\n                        const leftNeigborToPotentuallyCapture2 = squares.find(s => s.props.x === square.props.x + 1 && s.props.y === square.props.y + 1);\r\n                        if (leftNeigborToPotentuallyCapture2 && leftNeigborToPotentuallyCapture2.props.piece &&\r\n                            leftNeigborToPotentuallyCapture2.props.piece.split('-')[0] != square.props.piece.split(\"-\")[0]) {\r\n                            possibleMoves.push({ x: square.props.x + 1, y: square.props.y + 1 });\r\n                        }\r\n\r\n                        //TODO: Implement the french fancy move - En passant\r\n                        //TODO: Implement promotion\r\n                    }\r\n                    break;\r\n                case \"rook\":\r\n                    for (let i = square.props.x - 1; i >= 0; i--) {\r\n                        let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.props.y);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: i, y: square.props.y })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: i, y: square.props.y })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (let i = square.props.y - 1; i >= 0; i--) {\r\n                        let targetSquare = squares.find(s => s.props.x === square.props.x && s.props.y === i);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: square.props.x, y: i })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: square.props.x, y: i })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (let i = square.props.x + 1; i < DIM; i++) {\r\n                        let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.props.y);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: i, y: square.props.y })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: i, y: square.props.y })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (let i = square.props.y + 1; i < DIM; i++) {\r\n                        let targetSquare = squares.find(s => s.props.x === square.props.x && s.props.y === i);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: square.props.x, y: i })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: square.props.x, y: i })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"bishop\":\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.props.x - i >= 0 && square.props.y - i >= 0) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.props.x - i, y: square.props.y - i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.props.x - i, y: square.props.y - i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.props.x + i < DIM && square.props.y + i < DIM) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.props.x + i, y: square.props.y + i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.props.x + i, y: square.props.y + i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.props.x - i >= 0 && square.props.y + i < DIM) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.props.x - i, y: square.props.y + i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.props.x - i, y: square.props.y + i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.props.x + i < DIM && square.props.y - i >= 0) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.props.x + i, y: square.props.y - i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.props.x + i, y: square.props.y - i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"knight\":\r\n                    let targetPiece1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1)\r\n                    let targetPiece2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1)\r\n                    let targetPiece3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1)\r\n                    let targetPiece4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1)\r\n                    let targetPiece5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2)\r\n                    let targetPiece6 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2)\r\n                    let targetPiece7 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2)\r\n                    let targetPiece8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2)\r\n\r\n                    if (targetPiece1) {\r\n                        if (!targetPiece1.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece1.props.x, y: targetPiece1.props.y })\r\n                        } else {\r\n                            if (targetPiece1.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece1.props.x, y: targetPiece1.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (targetPiece2) {\r\n                        if (!targetPiece2.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece2.props.x, y: targetPiece2.props.y })\r\n                        } else {\r\n                            if (targetPiece2.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece2.props.x, y: targetPiece2.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (targetPiece3) {\r\n                        if (!targetPiece3.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece3.props.x, y: targetPiece3.props.y })\r\n                        } else {\r\n                            if (targetPiece3.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece3.props.x, y: targetPiece3.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (targetPiece4) {\r\n                        if (!targetPiece4.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece4.props.x, y: targetPiece4.props.y })\r\n                        } else {\r\n                            if (targetPiece4.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece4.props.x, y: targetPiece4.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (targetPiece5) {\r\n                        if (!targetPiece5.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece5.props.x, y: targetPiece5.props.y })\r\n                        } else {\r\n                            if (targetPiece5.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece5.props.x, y: targetPiece5.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (targetPiece6) {\r\n                        if (!targetPiece6.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece6.props.x, y: targetPiece6.props.y })\r\n                        } else {\r\n                            if (targetPiece6.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece6.props.x, y: targetPiece6.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (targetPiece7) {\r\n                        if (!targetPiece7.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece7.props.x, y: targetPiece7.props.y })\r\n                        } else {\r\n                            if (targetPiece7.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece7.props.x, y: targetPiece7.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (targetPiece8) {\r\n                        if (!targetPiece8.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece8.props.x, y: targetPiece8.props.y })\r\n                        } else {\r\n                            if (targetPiece8.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece8.props.x, y: targetPiece8.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    break;\r\n                case \"king\":\r\n                    for (let i = -1; i < 2; i++) {\r\n                        for (let j = -1; j < 2; j++) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + j)\r\n\r\n                            if (targetPiece) {\r\n                                if (!targetPiece.props.piece) {\r\n                                    possibleMoves.push({ x: targetPiece.props.x, y: targetPiece.props.y })\r\n                                } else {\r\n                                    if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                        possibleMoves.push({ x: targetPiece.props.x, y: targetPiece.props.y })\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    //Castling logic\r\n                    if (color == \"white\") {\r\n                        if (this.state.canWhiteLongCastle) {\r\n                            if (this.state.position[7].charAt(1) == 3) {\r\n                                possibleMoves.push({ x: square.props.x, y: square.props.y - 2 })\r\n                                this.setState({ canWhiteLongCastle: false })\r\n                            }\r\n                        }\r\n\r\n                        if (this.state.canWhiteShortCastle) {\r\n                            if (this.state.position[7].split(\"\").reverse().join(\"\").charAt(1) == 2) {\r\n                                possibleMoves.push({ x: square.props.x, y: square.props.y + 2 })\r\n                                this.setState({ canWhiteShortCastle: false })\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (this.state.canBlackLongCastle) {\r\n                            if (this.state.position[0].charAt(1) == 3) {\r\n                                possibleMoves.push({ x: square.props.x, y: square.props.y - 2 })\r\n                                this.setState({ canBlackLongCastle: false })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    break;\r\n                case \"queen\":\r\n                    for (let i = square.props.x - 1; i >= 0; i--) {\r\n                        let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.props.y);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: i, y: square.props.y })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: i, y: square.props.y })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (let i = square.props.y - 1; i >= 0; i--) {\r\n                        let targetSquare = squares.find(s => s.props.x === square.props.x && s.props.y === i);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: square.props.x, y: i })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: square.props.x, y: i })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (let i = square.props.x + 1; i < DIM; i++) {\r\n                        let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.props.y);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: i, y: square.props.y })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: i, y: square.props.y })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (let i = square.props.y + 1; i < DIM; i++) {\r\n                        let targetSquare = squares.find(s => s.props.x === square.props.x && s.props.y === i);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: square.props.x, y: i })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: square.props.x, y: i })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.props.x - i >= 0 && square.props.y - i >= 0) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.props.x - i, y: square.props.y - i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.props.x - i, y: square.props.y - i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.props.x + i < DIM && square.props.y + i < DIM) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.props.x + i, y: square.props.y + i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.props.x + i, y: square.props.y + i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.props.x - i >= 0 && square.props.y + i < DIM) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.props.x - i, y: square.props.y + i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.props.x - i, y: square.props.y + i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.props.x + i < DIM && square.props.y - i >= 0) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.props.x + i, y: square.props.y - i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.props.x + i, y: square.props.y - i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        console.log(\"Possible Moves:\", possibleMoves);\r\n        this.updatePossibleMoves(possibleMoves);\r\n    }\r\n\r\n    renderSquares() {\r\n        let squareColorIsWhite = true;\r\n        const squares = [];\r\n        for (let i = 0; i < DIM; i++) {\r\n            let row = ConvertFenToString(this.state.position[i]);\r\n            for (let j = 0; j < DIM; j++) {\r\n                const piece = row.charAt(j);\r\n                let color = squareColorIsWhite ? \"\" : \"dark\";\r\n                squares.push(\r\n                    <Square\r\n                        getPossibleMoves={this.getPossibleMoves.bind(this)}\r\n                        key={`${i}-${j}`}\r\n                        x={i}\r\n                        y={j}\r\n                        piece={ConvertFENPieceToPiece(piece.trim())}\r\n                        color={color}\r\n                        selectedSquareX={this.state.selectedSquareX}\r\n                        setSelectedSquareX={this.updateSelectedSquareX}\r\n                        selectedSquareY={this.state.selectedSquareY}\r\n                        setSelectedSquareY={this.updateSelectedSquareY}\r\n                        possibleMoves={this.state.possibleMoves}\r\n                        updatePossibleMoves={this.updatePossibleMoves}\r\n                        movePiece={this.movePiece}\r\n                    />\r\n                );\r\n                squareColorIsWhite = !squareColorIsWhite;\r\n            }\r\n            squareColorIsWhite = !squareColorIsWhite;\r\n        }\r\n        return squares;\r\n    }\r\n\r\n    render() {\r\n        //const squares = this.renderSquares();\r\n        return (\r\n            <div className=\"chessGrid\">\r\n                {this.renderSquares()}\r\n            </div>\r\n        );\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}