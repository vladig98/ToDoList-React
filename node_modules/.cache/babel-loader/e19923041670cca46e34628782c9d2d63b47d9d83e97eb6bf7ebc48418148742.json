{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vladi Gotsin\\\\Desktop\\\\react\\\\src\\\\Chess.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DIM = 8; //8x8 Board\n\n//Checks if a character is Uppercase\nfunction IsUpperCase(value) {\n  return value.charCodeAt(0) >= 65 && value.charCodeAt(0) <= 90;\n}\n\n//Checks if a character is Lowercase\n_c = IsUpperCase;\nfunction IsLowerCase(value) {\n  return value.charCodeAt(0) >= 97 && value.charCodeAt(0) <= 122;\n}\n\n//Checks if a character is a Digit\n_c2 = IsLowerCase;\nfunction IsDigit(value) {\n  return value.charCodeAt(0) >= 48 && value.charCodeAt(0) <= 57;\n}\n_c3 = IsDigit;\nfunction ConvertFENtoPiece(letter) {\n  switch (letter.toLowerCase()) {\n    case \"p\":\n      return 'pawn';\n    case \"n\":\n      return \"knight\";\n    case \"k\":\n      return \"king\";\n    case \"q\":\n      return \"queen\";\n    case \"r\":\n      return \"rook\";\n    case \"b\":\n      return \"bishop\";\n    default:\n      return \"\";\n  }\n}\n_c4 = ConvertFENtoPiece;\nfunction ConvertFENPieceToPiece(value) {\n  if (IsUpperCase(value)) {\n    return `white-${ConvertFENtoPiece(value)}`;\n  }\n  if (IsLowerCase(value)) {\n    return `black-${ConvertFENtoPiece(value)}`;\n  }\n}\n_c5 = ConvertFENPieceToPiece;\nclass Square extends Component {\n  constructor(props) {\n    super(props);\n    this.onClick = () => {\n      this.props.setSelectedPiece(this.piece);\n      this.props.getPossibleMoves(this);\n    };\n    this.x = props.x;\n    this.y = props.y;\n    this.fenPiece = props.piece;\n    this.color = props.color;\n    this.piece = ConvertFENPieceToPiece(this.fenPiece);\n  }\n  render() {\n    let styles = ['chessSquare', 'piece'];\n    styles.push(this.color);\n    styles.push(this.piece);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: this.onClick,\n      className: styles.filter(Boolean).join(\" \")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 16\n    }, this);\n  }\n}\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      position: ['rnbqkbnr', 'pppppppp', '8', '8', '8', '8', 'PPPPPPPP', 'RNBQKBNR']\n    };\n    this.setSelectedPiece = props.setSelectedPiece;\n    this.squares = [];\n  }\n  getPossibleMoves(square) {\n    let possibleMoves = [];\n    if (square.piece) {\n      let color = square.piece.split('-')[0];\n      let piece = square.piece.split('-')[1];\n      switch (piece) {\n        case \"pawn\":\n          if (color == \"white\") {\n            if (square.x == 6) {\n              possibleMoves.push({\n                x: square.x - 1,\n                y: square.y\n              });\n              possibleMoves.push({\n                x: square.x - 2,\n                y: square.y\n              });\n            }\n          }\n          break;\n        case \"rook\":\n          break;\n        case \"bishop\":\n          break;\n        case \"knight\":\n          break;\n        case \"king\":\n          break;\n        case \"queen\":\n          break;\n        default:\n          break;\n      }\n    }\n    console.log(possibleMoves);\n  }\n  generateSquares() {\n    let squareColorIsWhite = true;\n    for (let i = 0; i < DIM; i++) {\n      for (let j = 0; j < DIM; j++) {\n        const piece = this.state.position[i].charAt(j);\n        let color = squareColorIsWhite ? \"\" : \"dark\";\n        this.squares.push( /*#__PURE__*/_jsxDEV(Square, {\n          getPossibleMoves: this.getPossibleMoves,\n          x: i,\n          y: j,\n          piece: piece,\n          color: color,\n          setSelectedPiece: this.setSelectedPiece\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, this));\n        squareColorIsWhite = !squareColorIsWhite;\n      }\n      squareColorIsWhite = !squareColorIsWhite;\n    }\n  }\n  render() {\n    this.squares = []; // Reset squares before generating\n    this.generateSquares(); // Generate squares\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessGrid\",\n      children: this.squares\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default function Chess() {\n  _s();\n  const [selectedPiece, setSelectedPiece] = useState('');\n  function updateSelectedPiece(value) {\n    setSelectedPiece(value);\n  }\n  useEffect(() => {\n    console.log(selectedPiece);\n  }, [selectedPiece]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"grid\",\n        className: \"chessGrid\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          setSelectedPiece: updateSelectedPiece\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(Chess, \"PKLrixe8Qg9MSCA9ul/T2CeBF5g=\");\n_c6 = Chess;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"IsUpperCase\");\n$RefreshReg$(_c2, \"IsLowerCase\");\n$RefreshReg$(_c3, \"IsDigit\");\n$RefreshReg$(_c4, \"ConvertFENtoPiece\");\n$RefreshReg$(_c5, \"ConvertFENPieceToPiece\");\n$RefreshReg$(_c6, \"Chess\");","map":{"version":3,"names":["useState","useEffect","Component","jsxDEV","_jsxDEV","Fragment","_Fragment","DIM","IsUpperCase","value","charCodeAt","_c","IsLowerCase","_c2","IsDigit","_c3","ConvertFENtoPiece","letter","toLowerCase","_c4","ConvertFENPieceToPiece","_c5","Square","constructor","props","onClick","setSelectedPiece","piece","getPossibleMoves","x","y","fenPiece","color","render","styles","push","className","filter","Boolean","join","fileName","_jsxFileName","lineNumber","columnNumber","Board","state","position","squares","square","possibleMoves","split","console","log","generateSquares","squareColorIsWhite","i","j","charAt","children","Chess","_s","selectedPiece","updateSelectedPiece","id","_c6","$RefreshReg$"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/src/Chess.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { Component } from \"react\";\r\n\r\nconst DIM = 8; //8x8 Board\r\n\r\n//Checks if a character is Uppercase\r\nfunction IsUpperCase(value) {\r\n    return value.charCodeAt(0) >= 65 && value.charCodeAt(0) <= 90\r\n}\r\n\r\n//Checks if a character is Lowercase\r\nfunction IsLowerCase(value) {\r\n    return value.charCodeAt(0) >= 97 && value.charCodeAt(0) <= 122\r\n}\r\n\r\n//Checks if a character is a Digit\r\nfunction IsDigit(value) {\r\n    return value.charCodeAt(0) >= 48 && value.charCodeAt(0) <= 57\r\n}\r\n\r\nfunction ConvertFENtoPiece(letter) {\r\n    switch (letter.toLowerCase()) {\r\n        case \"p\":\r\n            return 'pawn'\r\n        case \"n\":\r\n            return \"knight\"\r\n        case \"k\":\r\n            return \"king\";\r\n        case \"q\":\r\n            return \"queen\";\r\n        case \"r\":\r\n            return \"rook\";\r\n        case \"b\":\r\n            return \"bishop\";\r\n        default:\r\n            return \"\";\r\n    }\r\n}\r\n\r\nfunction ConvertFENPieceToPiece(value) {\r\n    if (IsUpperCase(value)) {\r\n        return `white-${ConvertFENtoPiece(value)}`;\r\n    }\r\n\r\n    if (IsLowerCase(value)) {\r\n        return `black-${ConvertFENtoPiece(value)}`;\r\n    }\r\n}\r\n\r\nclass Square extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.x = props.x\r\n        this.y = props.y\r\n        this.fenPiece = props.piece\r\n        this.color = props.color\r\n        this.piece = ConvertFENPieceToPiece(this.fenPiece)\r\n    }\r\n\r\n    onClick = () => {\r\n        this.props.setSelectedPiece(this.piece)\r\n        this.props.getPossibleMoves(this)\r\n    }\r\n\r\n    render() {\r\n        let styles = ['chessSquare', 'piece'];\r\n        styles.push(this.color);\r\n        styles.push(this.piece);\r\n        return <div onClick={this.onClick} className={styles.filter(Boolean).join(\" \")}></div>\r\n    }\r\n}\r\n\r\nclass Board extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            position: [\r\n                'rnbqkbnr',\r\n                'pppppppp',\r\n                '8',\r\n                '8',\r\n                '8',\r\n                '8',\r\n                'PPPPPPPP',\r\n                'RNBQKBNR'\r\n            ]\r\n        };\r\n        this.setSelectedPiece = props.setSelectedPiece;\r\n        this.squares = [];\r\n    }\r\n\r\n    getPossibleMoves(square) {\r\n        let possibleMoves = [];\r\n\r\n        if (square.piece) {\r\n            let color = square.piece.split('-')[0];\r\n            let piece = square.piece.split('-')[1];\r\n            switch (piece) {\r\n                case \"pawn\":\r\n                    if (color == \"white\") {\r\n                        if (square.x == 6) {\r\n                            possibleMoves.push({ x: square.x - 1, y: square.y })\r\n                            possibleMoves.push({ x: square.x - 2, y: square.y })\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"rook\":\r\n                    break;\r\n                case \"bishop\":\r\n                    break;\r\n                case \"knight\":\r\n                    break;\r\n                case \"king\":\r\n                    break;\r\n                case \"queen\":\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        console.log(possibleMoves)\r\n    }\r\n\r\n    generateSquares() {\r\n        let squareColorIsWhite = true;\r\n        for (let i = 0; i < DIM; i++) {\r\n            for (let j = 0; j < DIM; j++) {\r\n                const piece = this.state.position[i].charAt(j);\r\n                let color = squareColorIsWhite ? \"\" : \"dark\";\r\n                this.squares.push(\r\n                    <Square\r\n                        getPossibleMoves={this.getPossibleMoves}\r\n                        key={`${i}-${j}`}\r\n                        x={i}\r\n                        y={j}\r\n                        piece={piece}\r\n                        color={color}\r\n                        setSelectedPiece={this.setSelectedPiece}\r\n                    />\r\n                );\r\n                squareColorIsWhite = !squareColorIsWhite;\r\n            }\r\n            squareColorIsWhite = !squareColorIsWhite;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        this.squares = []; // Reset squares before generating\r\n        this.generateSquares(); // Generate squares\r\n        return (\r\n            <div className=\"chessGrid\">\r\n                {this.squares}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default function Chess() {\r\n\r\n    const [selectedPiece, setSelectedPiece] = useState('');\r\n\r\n    function updateSelectedPiece(value) {\r\n        setSelectedPiece(value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log(selectedPiece);\r\n    }, [selectedPiece]);\r\n\r\n    return (<>\r\n        <div className=\"chessContainer\">\r\n            <div id=\"grid\" className=\"chessGrid\">\r\n                <Board setSelectedPiece={updateSelectedPiece} />\r\n            </div>\r\n        </div>\r\n    </>)\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}