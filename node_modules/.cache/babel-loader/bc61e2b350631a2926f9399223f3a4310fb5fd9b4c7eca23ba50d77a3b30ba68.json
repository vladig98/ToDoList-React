{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vladi Gotsin\\\\Desktop\\\\react\\\\src\\\\Board.js\";\nimport { Component } from \"react\";\nimport React from 'react';\nimport { Square } from \"./Square.js\";\nimport { ConvertFENPieceToPiece, ConvertFenToString, UpdatePosition } from \"./HelperMethods.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DIM = 8; //8x8 Board\n\nexport class Board extends Component {\n  constructor(props) {\n    super(props);\n    this.movePiece = (x, y) => {\n      let squares = this.renderSquares();\n      let targetSquare = squares.find(s => s.props.x == x && s.props.y == y);\n      let square = squares.find(s => s.props.x == this.state.selectedSquareX && s.props.y == this.state.selectedSquareY);\n      let color = square.props.piece.split(\"-\")[0];\n      let piece = square.props.piece.split(\"-\")[1];\n\n      //disable castling if the king moves\n      if (piece == \"king\") {\n        if (color == \"white\") {\n          this.setState({\n            canWhiteLongCastle: false,\n            canWhiteShortCastle: false\n          });\n        } else {\n          this.setState({\n            canBlackLongCastle: false,\n            canBlackShortCastle: false\n          });\n        }\n      }\n\n      //disable castling if the rook moves\n      if (piece == \"rook\") {\n        if (square.props.x == 7 && square.props.y == 7) {\n          this.setState({\n            canWhiteShortCastle: false\n          });\n        }\n        if (square.props.x == 0 && square.props.y == 7) {\n          this.setState({\n            canBlackShortCastle: false\n          });\n        }\n        if (square.props.x == 7 && square.props.y == 0) {\n          this.setState({\n            canWhiteLongCastle: false\n          });\n        }\n        if (square.props.x == 0 && square.props.y == 0) {\n          this.setState({\n            canBlackLongCastle: false\n          });\n        }\n      }\n      let p = UpdatePosition(square, targetSquare, this.state.position);\n\n      //capturing enPassant\n      if (this.state.enPassantX && this.state.enPassantY && this.state.enPassantPossible) {\n        let enPassantTargetSquare = color == \"white\" ? squares.find(s => s.props.x == x + 1 && s.props.y == y) : squares.find(s => s.props.x == x - 1 && s.props.y == y);\n        let enPassantSquare = /*#__PURE__*/_jsxDEV(Square, {\n          x: square.props.x,\n          y: square.props.y,\n          piece: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 35\n        }, this);\n        p = UpdatePosition(enPassantSquare, enPassantTargetSquare, p);\n      }\n      this.setState({\n        position: p,\n        possibleMoves: []\n      });\n\n      //enabling en passant\n\n      if (piece == \"pawn\") {\n        if (Math.abs(square.props.x - targetSquare.props.x) == 2) {\n          let enPassant1 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y - 1);\n          let enPassant2 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y + 1);\n          if (enPassant1) {\n            if (enPassant1.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (enPassant1.props.piece.split(\"-\")[0] != color) {\n                this.setState({\n                  enPassantPossible: true,\n                  enPassantX: targetSquare.props.x,\n                  enPassantY: targetSquare.props.y\n                });\n                return;\n              }\n            }\n          }\n          if (enPassant2) {\n            if (enPassant2.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (enPassant2.props.piece.split(\"-\")[0] != color) {\n                this.setState({\n                  enPassantPossible: true,\n                  enPassantX: targetSquare.props.x,\n                  enPassantY: targetSquare.props.y\n                });\n                return;\n              }\n            }\n          }\n        }\n      }\n      this.setState({\n        enPassantPossible: false,\n        enPassantX: \"\",\n        enPassantY: \"\",\n        isWhiteToMove: !isWhiteToMove\n      });\n    };\n    this.updatePossibleMoves = moves => {\n      this.setState({\n        possibleMoves: moves\n      });\n    };\n    this.updateSelectedSquareX = x => {\n      this.setState({\n        selectedSquareX: x\n      });\n    };\n    this.updateSelectedSquareY = y => {\n      this.setState({\n        selectedSquareY: y\n      });\n    };\n    this.state = {\n      position: ['rnbqkbnr', 'pppppppp', '8', '8', '8', '8', 'PPPPPPPP', 'RNBQKBNR'],\n      possibleMoves: [],\n      selectedSquareX: \"\",\n      selectedSquareY: \"\",\n      canWhiteShortCastle: true,\n      canWhiteLongCastle: true,\n      canBlackShortCastle: true,\n      canBlackLongCastle: true,\n      enPassantPossible: false,\n      enPassantX: \"\",\n      enPassantY: \"\",\n      isWhiteToMove: false\n    };\n  }\n  isWhiteInCheck(square, pseudo) {\n    let squares = this.renderSquares();\n    if (pseudo) {\n      const updatedSquares = squares.map(s => {\n        if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\n          // Return a new Square component with the updated piece\n          return /*#__PURE__*/React.cloneElement(s, {\n            piece: pseudo.props.piece\n          });\n        } else {\n          // For other squares, return the original Square component\n          return s;\n        }\n      });\n      squares = updatedSquares;\n    }\n\n    //check for attackers in front of the white king\n    for (let i = square.props.x - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from behind\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers behind the white king\n    for (let i = square.props.x + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the front\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the left of the white king\n    for (let i = square.props.y - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the left\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the right of the white king\n    for (let i = square.props.y + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"white\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the right\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == -1) {\n                //console.log(\"in check from top half of counterclockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from top half of counterclockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == 1) {\n                //console.log(\"in check from top half of clockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from top half of clockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"white\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for knights check\n    let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1);\n    let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1);\n    let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1);\n    let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1);\n    let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2);\n    let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2);\n    let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2);\n    let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2);\n    if (knight1) {\n      if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight1.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 1\")\n          return true;\n        }\n      }\n    }\n    if (knight2) {\n      if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight2.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 2\")\n          return true;\n        }\n      }\n    }\n    if (knight3) {\n      if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight3.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 3\")\n          return true;\n        }\n      }\n    }\n    if (knight4) {\n      if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight4.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 4\")\n          return true;\n        }\n      }\n    }\n    if (knight5) {\n      if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight5.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 5\")\n          return true;\n        }\n      }\n    }\n    if (knight6) {\n      if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight6.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 6\")\n          return true;\n        }\n      }\n    }\n    if (knight7) {\n      if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight7.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 7\")\n          return true;\n        }\n      }\n    }\n    if (knight8) {\n      if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight8.props.piece.split(\"-\")[0] != \"white\") {\n          //console.log(\"in check by knight 8\")\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  isBlackInCheck(square, pseudo) {\n    let squares = this.renderSquares();\n    if (pseudo) {\n      const updatedSquares = squares.map(s => {\n        if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\n          // Return a new Square component with the updated piece\n          return /*#__PURE__*/React.cloneElement(s, {\n            piece: pseudo.props.piece\n          });\n        } else {\n          // For other squares, return the original Square component\n          return s;\n        }\n      });\n      squares = updatedSquares;\n    }\n\n    //check for attackers behind the black king\n    for (let i = square.props.x - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from behind\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers in front of the black king\n    for (let i = square.props.x + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the front\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the left of the black king\n    for (let i = square.props.y - 1; i >= 0; i--) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the left\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers to the right of the black king\n    for (let i = square.props.y + 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i);\n      if (piece.props.piece.split(\"-\")[0] != \"black\") {\n        if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\n          //console.log(\"in check from the right\")\n          return true;\n        } else {\n          if (piece.props.piece) {\n            break;\n          }\n        }\n      } else {\n        break;\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            //console.log(\"in check from top half of counterclockwise diagonal\")\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == 1) {\n                //console.log(\"in check from bottom half of counterclockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from bottom half of counterclockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on a half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\n            //console.log(\"in check from top half of clockwise diagonal\")\n            return true;\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for attackers on the other half of one of the diagonals (tlted clockwise)\n    for (let i = 1; i < DIM; i++) {\n      let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i);\n      if (piece) {\n        if (piece.props.piece.split(\"-\")[0] != \"black\") {\n          if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\n            if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\n              if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == -1) {\n                //console.log(\"in check from bottom half of clockwise diagonal by a pawn\")\n                return true;\n              } else {\n                break;\n              }\n            } else {\n              //console.log(\"in check from bottom half of clockwise diagonal\")\n              return true;\n            }\n          } else {\n            if (piece.props.piece) {\n              break;\n            }\n          }\n        } else {\n          break;\n        }\n      }\n    }\n\n    //check for knights check\n    let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1);\n    let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1);\n    let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1);\n    let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1);\n    let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2);\n    let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2);\n    let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2);\n    let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2);\n    if (knight1) {\n      if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight1.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 1\")\n          return true;\n        }\n      }\n    }\n    if (knight2) {\n      if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight2.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 2\")\n          return true;\n        }\n      }\n    }\n    if (knight3) {\n      if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight3.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 3\")\n          return true;\n        }\n      }\n    }\n    if (knight4) {\n      if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight4.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 4\")\n          return true;\n        }\n      }\n    }\n    if (knight5) {\n      if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight5.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 5\")\n          return true;\n        }\n      }\n    }\n    if (knight6) {\n      if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight6.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 6\")\n          return true;\n        }\n      }\n    }\n    if (knight7) {\n      if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight7.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 7\")\n          return true;\n        }\n      }\n    }\n    if (knight8) {\n      if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\n        if (knight8.props.piece.split(\"-\")[0] != \"black\") {\n          //console.log(\"in check by knight 8\")\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  getPossibleMoves(square) {\n    const squares = this.renderSquares();\n    let possibleMoves = [];\n    let blackKing = squares.find(s => s.props.piece == \"black-king\");\n    let whiteKing = squares.find(s => s.props.piece == \"white-king\");\n    if (square.props.piece) {\n      let color = square.props.piece.split('-')[0];\n      let piece = square.props.piece.split('-')[1];\n\n      //handle turns\n      if (color == \"white\") {\n        if (!this.state.isWhiteToMove) {\n          return;\n        }\n      } else {\n        if (this.state.isWhiteToMove) {\n          return;\n        }\n      }\n      switch (piece) {\n        case \"pawn\":\n          if (color === \"white\") {\n            //move one square ahead\n            const targetSquare1 = squares.find(s => s.props.x === square.props.x - 1 && s.props.y === square.props.y);\n            if (targetSquare1 && !targetSquare1.props.piece) {\n              possibleMoves.push({\n                x: square.props.x - 1,\n                y: square.props.y\n              });\n            }\n\n            //move two squares on the very first move\n            const targetSquare2 = squares.find(s => s.props.x === square.props.x - 2 && s.props.y === square.props.y);\n            if (square.props.x === 6 && targetSquare2 && !targetSquare2.props.piece && !targetSquare1.props.piece) {\n              possibleMoves.push({\n                x: square.props.x - 2,\n                y: square.props.y\n              });\n            }\n\n            //capture to the left diagonal\n            const leftNeigborToPotentuallyCapture1 = squares.find(s => s.props.x === square.props.x - 1 && s.props.y === square.props.y - 1);\n            if (leftNeigborToPotentuallyCapture1 && leftNeigborToPotentuallyCapture1.props.piece && leftNeigborToPotentuallyCapture1.props.piece.split('-')[0] != square.props.piece.split(\"-\")[0]) {\n              possibleMoves.push({\n                x: square.props.x - 1,\n                y: square.props.y - 1\n              });\n            }\n\n            //capture to the right diagonal\n            const leftNeigborToPotentuallyCapture2 = squares.find(s => s.props.x === square.props.x - 1 && s.props.y === square.props.y + 1);\n            if (leftNeigborToPotentuallyCapture2 && leftNeigborToPotentuallyCapture2.props.piece && leftNeigborToPotentuallyCapture2.props.piece.split('-')[0] != square.props.piece.split(\"-\")[0]) {\n              possibleMoves.push({\n                x: square.props.x - 1,\n                y: square.props.y + 1\n              });\n            }\n\n            //En Passant\n            const enPassant1 = squares.find(s => s.props.x == square.props.x && s.props.y == square.props.y - 1);\n            const enPassant2 = squares.find(s => s.props.x == square.props.x && s.props.y == square.props.y + 1);\n            if (square.props.x == 3) {\n              if (enPassant1) {\n                if (enPassant1.props.piece.split(\"-\")[1] == \"pawn\" && this.state.enPassantPossible) {\n                  if (enPassant1.props.piece.split(\"-\")[0] != color) {\n                    if (enPassant1.props.x == this.state.enPassantX && enPassant1.props.y == this.state.enPassantY) {\n                      possibleMoves.push({\n                        x: square.props.x - 1,\n                        y: square.props.y - 1\n                      });\n                    }\n                  }\n                }\n              }\n              if (enPassant2) {\n                if (enPassant2.props.piece.split(\"-\")[1] == \"pawn\" && this.state.enPassantPossible) {\n                  if (enPassant2.props.piece.split(\"-\")[0] != color) {\n                    if (enPassant2.props.x == this.state.enPassantX && enPassant2.props.y == this.state.enPassantY) {\n                      possibleMoves.push({\n                        x: square.props.x - 1,\n                        y: square.props.y + 1\n                      });\n                    }\n                  }\n                }\n              }\n            }\n\n            //TODO: Implement promotion\n          } else {\n            const targetSquare1 = squares.find(s => s.props.x === square.props.x + 1 && s.props.y === square.props.y);\n            if (targetSquare1 && !targetSquare1.props.piece) {\n              possibleMoves.push({\n                x: square.props.x + 1,\n                y: square.props.y\n              });\n            }\n\n            //move two squares on the very first move\n            const targetSquare2 = squares.find(s => s.props.x === square.props.x + 2 && s.props.y === square.props.y);\n            if (square.props.x === 1 && targetSquare2 && !targetSquare2.props.piece && !targetSquare1.props.piece) {\n              possibleMoves.push({\n                x: square.props.x + 2,\n                y: square.props.y\n              });\n            }\n\n            //capture to the left diagonal\n            const leftNeigborToPotentuallyCapture1 = squares.find(s => s.props.x === square.props.x + 1 && s.props.y === square.props.y - 1);\n            if (leftNeigborToPotentuallyCapture1 && leftNeigborToPotentuallyCapture1.props.piece && leftNeigborToPotentuallyCapture1.props.piece.split('-')[0] != square.props.piece.split(\"-\")[0]) {\n              possibleMoves.push({\n                x: square.props.x + 1,\n                y: square.props.y - 1\n              });\n            }\n\n            //capture to the right diagonal\n            const leftNeigborToPotentuallyCapture2 = squares.find(s => s.props.x === square.props.x + 1 && s.props.y === square.props.y + 1);\n            if (leftNeigborToPotentuallyCapture2 && leftNeigborToPotentuallyCapture2.props.piece && leftNeigborToPotentuallyCapture2.props.piece.split('-')[0] != square.props.piece.split(\"-\")[0]) {\n              possibleMoves.push({\n                x: square.props.x + 1,\n                y: square.props.y + 1\n              });\n            }\n\n            //En Passant\n            const enPassant1 = squares.find(s => s.props.x == square.props.x && s.props.y == square.props.y - 1);\n            const enPassant2 = squares.find(s => s.props.x == square.props.x && s.props.y == square.props.y + 1);\n            if (square.props.x == 4) {\n              if (enPassant1) {\n                if (enPassant1.props.piece.split(\"-\")[1] == \"pawn\" && this.state.enPassantPossible) {\n                  if (enPassant1.props.piece.split(\"-\")[0] != color) {\n                    if (enPassant1.props.x == this.state.enPassantX && enPassant1.props.y == this.state.enPassantY) {\n                      possibleMoves.push({\n                        x: square.props.x + 1,\n                        y: square.props.y - 1\n                      });\n                    }\n                  }\n                }\n              }\n              if (enPassant2) {\n                if (enPassant2.props.piece.split(\"-\")[1] == \"pawn\" && this.state.enPassantPossible) {\n                  if (enPassant2.props.piece.split(\"-\")[0] != color) {\n                    if (enPassant2.props.x == this.state.enPassantX && enPassant2.props.y == this.state.enPassantY) {\n                      possibleMoves.push({\n                        x: square.props.x + 1,\n                        y: square.props.y + 1\n                      });\n                    }\n                  }\n                }\n              }\n            }\n\n            //TODO: Implement promotion\n          }\n          break;\n        case \"rook\":\n          for (let i = square.props.x - 1; i >= 0; i--) {\n            let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.props.y);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: i,\n                y: square.props.y\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: i,\n                  y: square.props.y\n                });\n              }\n              break;\n            }\n          }\n          for (let i = square.props.y - 1; i >= 0; i--) {\n            let targetSquare = squares.find(s => s.props.x === square.props.x && s.props.y === i);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: square.props.x,\n                y: i\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: square.props.x,\n                  y: i\n                });\n              }\n              break;\n            }\n          }\n          for (let i = square.props.x + 1; i < DIM; i++) {\n            let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.props.y);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: i,\n                y: square.props.y\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: i,\n                  y: square.props.y\n                });\n              }\n              break;\n            }\n          }\n          for (let i = square.props.y + 1; i < DIM; i++) {\n            let targetSquare = squares.find(s => s.props.x === square.props.x && s.props.y === i);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: square.props.x,\n                y: i\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: square.props.x,\n                  y: i\n                });\n              }\n              break;\n            }\n          }\n          break;\n        case \"bishop\":\n          for (let i = 1; i <= DIM; i++) {\n            if (square.props.x - i >= 0 && square.props.y - i >= 0) {\n              let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.props.x - i,\n                  y: square.props.y - i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.props.x - i,\n                    y: square.props.y - i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          for (let i = 1; i <= DIM; i++) {\n            if (square.props.x + i < DIM && square.props.y + i < DIM) {\n              let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.props.x + i,\n                  y: square.props.y + i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.props.x + i,\n                    y: square.props.y + i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          for (let i = 1; i <= DIM; i++) {\n            if (square.props.x - i >= 0 && square.props.y + i < DIM) {\n              let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.props.x - i,\n                  y: square.props.y + i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.props.x - i,\n                    y: square.props.y + i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          for (let i = 1; i <= DIM; i++) {\n            if (square.props.x + i < DIM && square.props.y - i >= 0) {\n              let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.props.x + i,\n                  y: square.props.y - i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.props.x + i,\n                    y: square.props.y - i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          break;\n        case \"knight\":\n          let targetPiece1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1);\n          let targetPiece2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1);\n          let targetPiece3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1);\n          let targetPiece4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1);\n          let targetPiece5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2);\n          let targetPiece6 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2);\n          let targetPiece7 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2);\n          let targetPiece8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2);\n          if (targetPiece1) {\n            if (!targetPiece1.props.piece) {\n              possibleMoves.push({\n                x: targetPiece1.props.x,\n                y: targetPiece1.props.y\n              });\n            } else {\n              if (targetPiece1.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece1.props.x,\n                  y: targetPiece1.props.y\n                });\n              }\n            }\n          }\n          if (targetPiece2) {\n            if (!targetPiece2.props.piece) {\n              possibleMoves.push({\n                x: targetPiece2.props.x,\n                y: targetPiece2.props.y\n              });\n            } else {\n              if (targetPiece2.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece2.props.x,\n                  y: targetPiece2.props.y\n                });\n              }\n            }\n          }\n          if (targetPiece3) {\n            if (!targetPiece3.props.piece) {\n              possibleMoves.push({\n                x: targetPiece3.props.x,\n                y: targetPiece3.props.y\n              });\n            } else {\n              if (targetPiece3.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece3.props.x,\n                  y: targetPiece3.props.y\n                });\n              }\n            }\n          }\n          if (targetPiece4) {\n            if (!targetPiece4.props.piece) {\n              possibleMoves.push({\n                x: targetPiece4.props.x,\n                y: targetPiece4.props.y\n              });\n            } else {\n              if (targetPiece4.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece4.props.x,\n                  y: targetPiece4.props.y\n                });\n              }\n            }\n          }\n          if (targetPiece5) {\n            if (!targetPiece5.props.piece) {\n              possibleMoves.push({\n                x: targetPiece5.props.x,\n                y: targetPiece5.props.y\n              });\n            } else {\n              if (targetPiece5.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece5.props.x,\n                  y: targetPiece5.props.y\n                });\n              }\n            }\n          }\n          if (targetPiece6) {\n            if (!targetPiece6.props.piece) {\n              possibleMoves.push({\n                x: targetPiece6.props.x,\n                y: targetPiece6.props.y\n              });\n            } else {\n              if (targetPiece6.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece6.props.x,\n                  y: targetPiece6.props.y\n                });\n              }\n            }\n          }\n          if (targetPiece7) {\n            if (!targetPiece7.props.piece) {\n              possibleMoves.push({\n                x: targetPiece7.props.x,\n                y: targetPiece7.props.y\n              });\n            } else {\n              if (targetPiece7.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece7.props.x,\n                  y: targetPiece7.props.y\n                });\n              }\n            }\n          }\n          if (targetPiece8) {\n            if (!targetPiece8.props.piece) {\n              possibleMoves.push({\n                x: targetPiece8.props.x,\n                y: targetPiece8.props.y\n              });\n            } else {\n              if (targetPiece8.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: targetPiece8.props.x,\n                  y: targetPiece8.props.y\n                });\n              }\n            }\n          }\n          break;\n        case \"king\":\n          for (let i = -1; i < 2; i++) {\n            for (let j = -1; j < 2; j++) {\n              let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + j);\n              if (targetPiece) {\n                if (!targetPiece.props.piece) {\n                  possibleMoves.push({\n                    x: targetPiece.props.x,\n                    y: targetPiece.props.y\n                  });\n                } else {\n                  if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                    possibleMoves.push({\n                      x: targetPiece.props.x,\n                      y: targetPiece.props.y\n                    });\n                  }\n                }\n              }\n            }\n          }\n\n          //Castling logic\n          if (color == \"white\") {\n            if (this.state.canWhiteLongCastle) {\n              if (this.state.position[7].charAt(1) == 3 && this.state.position[7].charAt(0) == 'R') {\n                possibleMoves.push({\n                  x: square.props.x,\n                  y: square.props.y - 2\n                });\n              }\n            }\n            if (this.state.canWhiteShortCastle) {\n              if (this.state.position[7].split(\"\").reverse().join(\"\").charAt(1) == 2 && this.state.position[7].split(\"\").reverse().join(\"\").charAt(0) == 'R') {\n                possibleMoves.push({\n                  x: square.props.x,\n                  y: square.props.y + 2\n                });\n              }\n            }\n          } else {\n            if (this.state.canBlackLongCastle) {\n              if (this.state.position[0].charAt(1) == 3 && this.state.position[0].charAt(0) == 'r') {\n                possibleMoves.push({\n                  x: square.props.x,\n                  y: square.props.y - 2\n                });\n              }\n            }\n            if (this.state.canBlackShortCastle) {\n              if (this.state.position[0].split(\"\").reverse().join(\"\").charAt(1) == 2 && this.state.position[0].split(\"\").reverse().join(\"\").charAt(0) == 'r') {\n                possibleMoves.push({\n                  x: square.props.x,\n                  y: square.props.y + 2\n                });\n              }\n            }\n          }\n          break;\n        case \"queen\":\n          for (let i = square.props.x - 1; i >= 0; i--) {\n            let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.props.y);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: i,\n                y: square.props.y\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: i,\n                  y: square.props.y\n                });\n              }\n              break;\n            }\n          }\n          for (let i = square.props.y - 1; i >= 0; i--) {\n            let targetSquare = squares.find(s => s.props.x === square.props.x && s.props.y === i);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: square.props.x,\n                y: i\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: square.props.x,\n                  y: i\n                });\n              }\n              break;\n            }\n          }\n          for (let i = square.props.x + 1; i < DIM; i++) {\n            let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.props.y);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: i,\n                y: square.props.y\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: i,\n                  y: square.props.y\n                });\n              }\n              break;\n            }\n          }\n          for (let i = square.props.y + 1; i < DIM; i++) {\n            let targetSquare = squares.find(s => s.props.x === square.props.x && s.props.y === i);\n            if (!targetSquare.props.piece) {\n              possibleMoves.push({\n                x: square.props.x,\n                y: i\n              });\n            } else {\n              if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                possibleMoves.push({\n                  x: square.props.x,\n                  y: i\n                });\n              }\n              break;\n            }\n          }\n          for (let i = 1; i <= DIM; i++) {\n            if (square.props.x - i >= 0 && square.props.y - i >= 0) {\n              let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.props.x - i,\n                  y: square.props.y - i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.props.x - i,\n                    y: square.props.y - i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          for (let i = 1; i <= DIM; i++) {\n            if (square.props.x + i < DIM && square.props.y + i < DIM) {\n              let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.props.x + i,\n                  y: square.props.y + i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.props.x + i,\n                    y: square.props.y + i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          for (let i = 1; i <= DIM; i++) {\n            if (square.props.x - i >= 0 && square.props.y + i < DIM) {\n              let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.props.x - i,\n                  y: square.props.y + i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.props.x - i,\n                    y: square.props.y + i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          for (let i = 1; i <= DIM; i++) {\n            if (square.props.x + i < DIM && square.props.y - i >= 0) {\n              let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i);\n              if (!targetPiece.props.piece) {\n                possibleMoves.push({\n                  x: square.props.x + i,\n                  y: square.props.y - i\n                });\n              } else {\n                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\n                  possibleMoves.push({\n                    x: square.props.x + i,\n                    y: square.props.y - i\n                  });\n                }\n                break;\n              }\n            }\n          }\n          break;\n        default:\n          break;\n      }\n    }\n\n    //check if black is in check\n    if (square.props.piece.split(\"-\")[0] == \"black\") {\n      if (square.props.piece.split(\"-\")[1] == \"king\") {\n        for (let i = 0; i < possibleMoves.length; i++) {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].x,\n            y: possibleMoves[i].y,\n            piece: \"black-king\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1160,\n            columnNumber: 32\n          }, this);\n          let pseudo = /*#__PURE__*/_jsxDEV(Square, {\n            x: blackKing.props.x,\n            y: blackKing.props.y,\n            piece: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1161,\n            columnNumber: 34\n          }, this);\n          let isInCheck = this.isBlackInCheck(move, pseudo);\n          if (isInCheck) {\n            possibleMoves.splice(i, 1);\n            i--;\n          }\n        }\n      } else {\n        for (let i = 0; i < possibleMoves.length; i++) {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].x,\n            y: possibleMoves[i].y,\n            piece: square.props.piece\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1171,\n            columnNumber: 32\n          }, this);\n          let isInCheck = this.isBlackInCheck(blackKing, move);\n          if (isInCheck) {\n            possibleMoves.splice(i, 1);\n            i--;\n          }\n        }\n      }\n    }\n\n    //check if white is in check\n    if (square.props.piece.split(\"-\")[0] == \"white\") {\n      if (square.props.piece.split(\"-\")[1] == \"king\") {\n        for (let i = 0; i < possibleMoves.length; i++) {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].x,\n            y: possibleMoves[i].y,\n            piece: \"white-king\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1186,\n            columnNumber: 32\n          }, this);\n          let pseudo = /*#__PURE__*/_jsxDEV(Square, {\n            x: whiteKing.props.x,\n            y: whiteKing.props.y,\n            piece: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1187,\n            columnNumber: 34\n          }, this);\n          let isInCheck = this.isWhiteInCheck(move, pseudo);\n          if (isInCheck) {\n            possibleMoves.splice(i, 1);\n            i--;\n          }\n        }\n      } else {\n        for (let i = 0; i < possibleMoves.length; i++) {\n          let move = /*#__PURE__*/_jsxDEV(Square, {\n            x: possibleMoves[i].x,\n            y: possibleMoves[i].y,\n            piece: square.props.piece\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1197,\n            columnNumber: 32\n          }, this);\n          let isInCheck = this.isWhiteInCheck(whiteKing, move);\n          if (isInCheck) {\n            possibleMoves.splice(i, 1);\n            i--;\n          }\n        }\n      }\n    }\n\n    //removes the right to castle if any of the castle squares is under attack\n    if (square.props.piece.split(\"-\")[1] == \"king\") {\n      let whiteCastle1 = possibleMoves.find(m => m.x == 7 && m.y == 6);\n      let whiteCastle2 = possibleMoves.find(m => m.x == 7 && m.y == 2);\n      let blackCastle1 = possibleMoves.find(m => m.x == 0 && m.y == 6);\n      let blackCastle2 = possibleMoves.find(m => m.x == 0 && m.y == 2);\n      if (whiteCastle1) {\n        let pieceAcross = possibleMoves.find(m => m.x == 7 && m.y == 5);\n        if (!pieceAcross) {\n          possibleMoves.splice(possibleMoves.indexOf(pieceAcross), 1);\n        }\n      }\n      if (whiteCastle2) {\n        let pieceAcross = possibleMoves.find(m => m.x == 7 && m.y == 3);\n        if (!pieceAcross) {\n          possibleMoves.splice(possibleMoves.indexOf(pieceAcross), 1);\n        }\n      }\n      if (blackCastle1) {\n        let pieceAcross = possibleMoves.find(m => m.x == 0 && m.y == 5);\n        if (!pieceAcross) {\n          possibleMoves.splice(possibleMoves.indexOf(pieceAcross), 1);\n        }\n      }\n      if (blackCastle2) {\n        let pieceAcross = possibleMoves.find(m => m.x == 0 && m.y == 3);\n        if (!pieceAcross) {\n          possibleMoves.splice(possibleMoves.indexOf(pieceAcross), 1);\n        }\n      }\n    }\n\n    //prevents black to castle if in check\n    if (this.isBlackInCheck(blackKing)) {\n      let castleMove = possibleMoves.find(m => m.x == 0 && m.y == 2);\n      let castleMove2 = possibleMoves.find(m => m.x == 0 && m.y == 6);\n      if (castleMove) {\n        possibleMoves.splice(possibleMoves.indexOf(castleMove), 1);\n      }\n      if (castleMove2) {\n        possibleMoves.splice(possibleMoves.indexOf(castleMove2), 1);\n      }\n    }\n\n    //prevents white to castle if in check\n    if (this.isWhiteInCheck(whiteKing)) {\n      let castleMove = possibleMoves.find(m => m.x == 7 && m.y == 2);\n      let castleMove2 = possibleMoves.find(m => m.x == 7 && m.y == 6);\n      if (castleMove) {\n        possibleMoves.splice(possibleMoves.indexOf(castleMove), 1);\n      }\n      if (castleMove2) {\n        possibleMoves.splice(possibleMoves.indexOf(castleMove2), 1);\n      }\n    }\n    console.log(\"Possible Moves:\", possibleMoves);\n    this.updatePossibleMoves(possibleMoves);\n  }\n  renderSquares() {\n    let squareColorIsWhite = true;\n    const squares = [];\n    for (let i = 0; i < DIM; i++) {\n      let row = ConvertFenToString(this.state.position[i]);\n      for (let j = 0; j < DIM; j++) {\n        const piece = row.charAt(j);\n        let color = squareColorIsWhite ? \"\" : \"dark\";\n        squares.push( /*#__PURE__*/_jsxDEV(Square, {\n          getPossibleMoves: this.getPossibleMoves.bind(this),\n          x: i,\n          y: j,\n          piece: ConvertFENPieceToPiece(piece.trim()),\n          color: color,\n          selectedSquareX: this.state.selectedSquareX,\n          setSelectedSquareX: this.updateSelectedSquareX,\n          selectedSquareY: this.state.selectedSquareY,\n          setSelectedSquareY: this.updateSelectedSquareY,\n          possibleMoves: this.state.possibleMoves,\n          updatePossibleMoves: this.updatePossibleMoves,\n          movePiece: this.movePiece\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1285,\n          columnNumber: 21\n        }, this));\n        squareColorIsWhite = !squareColorIsWhite;\n      }\n      squareColorIsWhite = !squareColorIsWhite;\n    }\n    return squares;\n  }\n  render() {\n    //const squares = this.renderSquares();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chessGrid\",\n      children: this.renderSquares()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1311,\n      columnNumber: 13\n    }, this);\n  }\n}","map":{"version":3,"names":["Component","React","Square","ConvertFENPieceToPiece","ConvertFenToString","UpdatePosition","jsxDEV","_jsxDEV","DIM","Board","constructor","props","movePiece","x","y","squares","renderSquares","targetSquare","find","s","square","state","selectedSquareX","selectedSquareY","color","piece","split","setState","canWhiteLongCastle","canWhiteShortCastle","canBlackLongCastle","canBlackShortCastle","p","position","enPassantX","enPassantY","enPassantPossible","enPassantTargetSquare","enPassantSquare","fileName","_jsxFileName","lineNumber","columnNumber","possibleMoves","Math","abs","enPassant1","enPassant2","isWhiteToMove","updatePossibleMoves","moves","updateSelectedSquareX","updateSelectedSquareY","isWhiteInCheck","pseudo","updatedSquares","map","cloneElement","i","knight1","knight2","knight3","knight4","knight5","knight6","knight7","knight8","isBlackInCheck","getPossibleMoves","blackKing","whiteKing","targetSquare1","push","targetSquare2","leftNeigborToPotentuallyCapture1","leftNeigborToPotentuallyCapture2","targetPiece","targetPiece1","targetPiece2","targetPiece3","targetPiece4","targetPiece5","targetPiece6","targetPiece7","targetPiece8","j","charAt","reverse","join","length","move","isInCheck","splice","whiteCastle1","m","whiteCastle2","blackCastle1","blackCastle2","pieceAcross","indexOf","castleMove","castleMove2","console","log","squareColorIsWhite","row","bind","trim","setSelectedSquareX","setSelectedSquareY","render","className","children"],"sources":["C:/Users/Vladi Gotsin/Desktop/react/src/Board.js"],"sourcesContent":["import { Component } from \"react\";\r\nimport React from 'react';\r\nimport { Square } from \"./Square.js\"\r\nimport { ConvertFENPieceToPiece, ConvertFenToString, UpdatePosition } from \"./HelperMethods.js\";\r\n\r\nconst DIM = 8; //8x8 Board\r\n\r\nexport class Board extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            position: [\r\n                'rnbqkbnr',\r\n                'pppppppp',\r\n                '8',\r\n                '8',\r\n                '8',\r\n                '8',\r\n                'PPPPPPPP',\r\n                'RNBQKBNR'\r\n            ],\r\n            possibleMoves: [],\r\n            selectedSquareX: \"\",\r\n            selectedSquareY: \"\",\r\n            canWhiteShortCastle: true,\r\n            canWhiteLongCastle: true,\r\n            canBlackShortCastle: true,\r\n            canBlackLongCastle: true,\r\n            enPassantPossible: false,\r\n            enPassantX: \"\",\r\n            enPassantY: \"\",\r\n            isWhiteToMove: false\r\n        };\r\n    }\r\n\r\n    isWhiteInCheck(square, pseudo) {\r\n        let squares = this.renderSquares()\r\n\r\n        if (pseudo) {\r\n            const updatedSquares = squares.map(s => {\r\n                if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\r\n                    // Return a new Square component with the updated piece\r\n                    return React.cloneElement(s, { piece: pseudo.props.piece });\r\n                } else {\r\n                    // For other squares, return the original Square component\r\n                    return s;\r\n                }\r\n            });\r\n\r\n            squares = updatedSquares;\r\n        }\r\n\r\n        //check for attackers in front of the white king\r\n        for (let i = square.props.x - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from behind\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers behind the white king\r\n        for (let i = square.props.x + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the front\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the left of the white king\r\n        for (let i = square.props.y - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the left\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the right of the white king\r\n        for (let i = square.props.y + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the right\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == -1) {\r\n                                //console.log(\"in check from top half of counterclockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from top half of counterclockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        return true\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == -1 && piece.props.y - square.props.y == 1) {\r\n                                //console.log(\"in check from top half of clockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from top half of clockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"white\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        return true;\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for knights check\r\n        let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1)\r\n        let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1)\r\n        let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1)\r\n        let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1)\r\n        let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2)\r\n        let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2)\r\n        let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2)\r\n        let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2)\r\n\r\n        if (knight1) {\r\n            if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight1.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 1\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight2) {\r\n            if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight2.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 2\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight3) {\r\n            if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight3.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 3\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight4) {\r\n            if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight4.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 4\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight5) {\r\n            if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight5.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 5\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight6) {\r\n            if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight6.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 6\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight7) {\r\n            if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight7.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 7\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight8) {\r\n            if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight8.props.piece.split(\"-\")[0] != \"white\") {\r\n                    //console.log(\"in check by knight 8\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    isBlackInCheck(square, pseudo) {\r\n        let squares = this.renderSquares()\r\n\r\n        if (pseudo) {\r\n            const updatedSquares = squares.map(s => {\r\n                if (s.props.x === pseudo.props.x && s.props.y === pseudo.props.y) {\r\n                    // Return a new Square component with the updated piece\r\n                    return React.cloneElement(s, { piece: pseudo.props.piece });\r\n                } else {\r\n                    // For other squares, return the original Square component\r\n                    return s;\r\n                }\r\n            });\r\n\r\n            squares = updatedSquares;\r\n        }\r\n\r\n        //check for attackers behind the black king\r\n        for (let i = square.props.x - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from behind\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers in front of the black king\r\n        for (let i = square.props.x + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == i && s.props.y == square.props.y)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the front\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the left of the black king\r\n        for (let i = square.props.y - 1; i >= 0; i--) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the left\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers to the right of the black king\r\n        for (let i = square.props.y + 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x && s.props.y == i)\r\n            if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"rook\") {\r\n                    //console.log(\"in check from the right\")\r\n                    return true\r\n                } else {\r\n                    if (piece.props.piece) {\r\n                        break\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        //console.log(\"in check from top half of counterclockwise diagonal\")\r\n                        return true\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted counterclockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == 1) {\r\n                                //console.log(\"in check from bottom half of counterclockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from bottom half of counterclockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on a half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\") {\r\n                        //console.log(\"in check from top half of clockwise diagonal\")\r\n                        return true\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for attackers on the other half of one of the diagonals (tlted clockwise)\r\n        for (let i = 1; i < DIM; i++) {\r\n            let piece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i)\r\n\r\n            if (piece) {\r\n                if (piece.props.piece.split(\"-\")[0] != \"black\") {\r\n                    if (piece.props.piece.split(\"-\")[1] == \"queen\" || piece.props.piece.split(\"-\")[1] == \"bishop\" || piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (piece.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                            if (piece.props.x - square.props.x == 1 && piece.props.y - square.props.y == -1) {\r\n                                //console.log(\"in check from bottom half of clockwise diagonal by a pawn\")\r\n                                return true\r\n                            } else {\r\n                                break\r\n                            }\r\n                        } else {\r\n                            //console.log(\"in check from bottom half of clockwise diagonal\")\r\n                            return true\r\n                        }\r\n                    } else {\r\n                        if (piece.props.piece) {\r\n                            break\r\n                        }\r\n                    }\r\n                } else {\r\n                    break\r\n                }\r\n            }\r\n        }\r\n\r\n        //check for knights check\r\n        let knight1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1)\r\n        let knight2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1)\r\n        let knight3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1)\r\n        let knight4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1)\r\n        let knight5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2)\r\n        let knight6 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2)\r\n        let knight7 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2)\r\n        let knight8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2)\r\n\r\n        if (knight1) {\r\n            if (knight1.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight1.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 1\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight2) {\r\n            if (knight2.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight2.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 2\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight3) {\r\n            if (knight3.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight3.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 3\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight4) {\r\n            if (knight4.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight4.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 4\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight5) {\r\n            if (knight5.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight5.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 5\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight6) {\r\n            if (knight6.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight6.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 6\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight7) {\r\n            if (knight7.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight7.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 7\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        if (knight8) {\r\n            if (knight8.props.piece.split(\"-\")[1] == \"knight\") {\r\n                if (knight8.props.piece.split(\"-\")[0] != \"black\") {\r\n                    //console.log(\"in check by knight 8\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    movePiece = (x, y) => {\r\n        let squares = this.renderSquares();\r\n\r\n        let targetSquare = squares.find(s => s.props.x == x && s.props.y == y)\r\n        let square = squares.find(s => s.props.x == this.state.selectedSquareX && s.props.y == this.state.selectedSquareY)\r\n\r\n        let color = square.props.piece.split(\"-\")[0]\r\n        let piece = square.props.piece.split(\"-\")[1]\r\n\r\n        //disable castling if the king moves\r\n        if (piece == \"king\") {\r\n            if (color == \"white\") {\r\n                this.setState({ canWhiteLongCastle: false, canWhiteShortCastle: false })\r\n            } else {\r\n                this.setState({ canBlackLongCastle: false, canBlackShortCastle: false })\r\n            }\r\n        }\r\n\r\n        //disable castling if the rook moves\r\n        if (piece == \"rook\") {\r\n            if (square.props.x == 7 && square.props.y == 7) {\r\n                this.setState({ canWhiteShortCastle: false })\r\n            }\r\n\r\n            if (square.props.x == 0 && square.props.y == 7) {\r\n                this.setState({ canBlackShortCastle: false })\r\n            }\r\n\r\n            if (square.props.x == 7 && square.props.y == 0) {\r\n                this.setState({ canWhiteLongCastle: false })\r\n            }\r\n\r\n            if (square.props.x == 0 && square.props.y == 0) {\r\n                this.setState({ canBlackLongCastle: false })\r\n            }\r\n        }\r\n\r\n        let p = UpdatePosition(square, targetSquare, this.state.position)\r\n\r\n        //capturing enPassant\r\n        if (this.state.enPassantX && this.state.enPassantY && this.state.enPassantPossible) {\r\n            let enPassantTargetSquare = color == \"white\" ? squares.find(s => s.props.x == x + 1 && s.props.y == y) : squares.find(s => s.props.x == x - 1 && s.props.y == y)\r\n            let enPassantSquare = <Square x={square.props.x} y={square.props.y} piece={\"\"} />\r\n\r\n            p = UpdatePosition(enPassantSquare, enPassantTargetSquare, p)\r\n        }\r\n\r\n        this.setState({ position: p, possibleMoves: [] })\r\n\r\n        //enabling en passant\r\n\r\n        if (piece == \"pawn\") {\r\n            if (Math.abs(square.props.x - targetSquare.props.x) == 2) {\r\n                let enPassant1 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y - 1)\r\n                let enPassant2 = squares.find(s => s.props.x == targetSquare.props.x && s.props.y == targetSquare.props.y + 1)\r\n\r\n                if (enPassant1) {\r\n                    if (enPassant1.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (enPassant1.props.piece.split(\"-\")[0] != color) {\r\n                            this.setState({ enPassantPossible: true, enPassantX: targetSquare.props.x, enPassantY: targetSquare.props.y })\r\n                            return\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (enPassant2) {\r\n                    if (enPassant2.props.piece.split(\"-\")[1] == \"pawn\") {\r\n                        if (enPassant2.props.piece.split(\"-\")[0] != color) {\r\n                            this.setState({ enPassantPossible: true, enPassantX: targetSquare.props.x, enPassantY: targetSquare.props.y })\r\n                            return\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({ enPassantPossible: false, enPassantX: \"\", enPassantY: \"\", isWhiteToMove: !isWhiteToMove })\r\n    }\r\n\r\n    updatePossibleMoves = (moves) => {\r\n        this.setState({ possibleMoves: moves });\r\n    };\r\n\r\n    updateSelectedSquareX = (x) => {\r\n        this.setState({ selectedSquareX: x })\r\n    }\r\n\r\n    updateSelectedSquareY = (y) => {\r\n        this.setState({ selectedSquareY: y })\r\n    }\r\n\r\n    getPossibleMoves(square) {\r\n        const squares = this.renderSquares();\r\n        let possibleMoves = [];\r\n\r\n        let blackKing = squares.find(s => s.props.piece == \"black-king\")\r\n        let whiteKing = squares.find(s => s.props.piece == \"white-king\")\r\n\r\n        if (square.props.piece) {\r\n            let color = square.props.piece.split('-')[0];\r\n            let piece = square.props.piece.split('-')[1];\r\n\r\n            //handle turns\r\n            if (color == \"white\") {\r\n                if (!this.state.isWhiteToMove) {\r\n                    return\r\n                }\r\n            } else {\r\n                if (this.state.isWhiteToMove) {\r\n                    return\r\n                }\r\n            }\r\n\r\n            switch (piece) {\r\n                case \"pawn\":\r\n                    if (color === \"white\") {\r\n                        //move one square ahead\r\n                        const targetSquare1 = squares.find(s => s.props.x === square.props.x - 1 && s.props.y === square.props.y);\r\n                        if (targetSquare1 && !targetSquare1.props.piece) {\r\n                            possibleMoves.push({ x: square.props.x - 1, y: square.props.y });\r\n                        }\r\n\r\n                        //move two squares on the very first move\r\n                        const targetSquare2 = squares.find(s => s.props.x === square.props.x - 2 && s.props.y === square.props.y);\r\n                        if (square.props.x === 6 && targetSquare2 && !targetSquare2.props.piece && !targetSquare1.props.piece) {\r\n                            possibleMoves.push({ x: square.props.x - 2, y: square.props.y });\r\n                        }\r\n\r\n                        //capture to the left diagonal\r\n                        const leftNeigborToPotentuallyCapture1 = squares.find(s => s.props.x === square.props.x - 1 && s.props.y === square.props.y - 1);\r\n                        if (leftNeigborToPotentuallyCapture1 && leftNeigborToPotentuallyCapture1.props.piece &&\r\n                            leftNeigborToPotentuallyCapture1.props.piece.split('-')[0] != square.props.piece.split(\"-\")[0]) {\r\n                            possibleMoves.push({ x: square.props.x - 1, y: square.props.y - 1 });\r\n                        }\r\n\r\n                        //capture to the right diagonal\r\n                        const leftNeigborToPotentuallyCapture2 = squares.find(s => s.props.x === square.props.x - 1 && s.props.y === square.props.y + 1);\r\n                        if (leftNeigborToPotentuallyCapture2 && leftNeigborToPotentuallyCapture2.props.piece &&\r\n                            leftNeigborToPotentuallyCapture2.props.piece.split('-')[0] != square.props.piece.split(\"-\")[0]) {\r\n                            possibleMoves.push({ x: square.props.x - 1, y: square.props.y + 1 });\r\n                        }\r\n\r\n                        //En Passant\r\n                        const enPassant1 = squares.find(s => s.props.x == square.props.x && s.props.y == square.props.y - 1)\r\n                        const enPassant2 = squares.find(s => s.props.x == square.props.x && s.props.y == square.props.y + 1)\r\n\r\n                        if (square.props.x == 3) {\r\n                            if (enPassant1) {\r\n                                if (enPassant1.props.piece.split(\"-\")[1] == \"pawn\" && this.state.enPassantPossible) {\r\n                                    if (enPassant1.props.piece.split(\"-\")[0] != color) {\r\n                                        if (enPassant1.props.x == this.state.enPassantX && enPassant1.props.y == this.state.enPassantY) {\r\n                                            possibleMoves.push({ x: square.props.x - 1, y: square.props.y - 1 })\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            if (enPassant2) {\r\n                                if (enPassant2.props.piece.split(\"-\")[1] == \"pawn\" && this.state.enPassantPossible) {\r\n                                    if (enPassant2.props.piece.split(\"-\")[0] != color) {\r\n                                        if (enPassant2.props.x == this.state.enPassantX && enPassant2.props.y == this.state.enPassantY) {\r\n                                            possibleMoves.push({ x: square.props.x - 1, y: square.props.y + 1 })\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        //TODO: Implement promotion\r\n                    } else {\r\n                        const targetSquare1 = squares.find(s => s.props.x === square.props.x + 1 && s.props.y === square.props.y);\r\n                        if (targetSquare1 && !targetSquare1.props.piece) {\r\n                            possibleMoves.push({ x: square.props.x + 1, y: square.props.y });\r\n                        }\r\n\r\n                        //move two squares on the very first move\r\n                        const targetSquare2 = squares.find(s => s.props.x === square.props.x + 2 && s.props.y === square.props.y);\r\n                        if (square.props.x === 1 && targetSquare2 && !targetSquare2.props.piece && !targetSquare1.props.piece) {\r\n                            possibleMoves.push({ x: square.props.x + 2, y: square.props.y });\r\n                        }\r\n\r\n                        //capture to the left diagonal\r\n                        const leftNeigborToPotentuallyCapture1 = squares.find(s => s.props.x === square.props.x + 1 && s.props.y === square.props.y - 1);\r\n                        if (leftNeigborToPotentuallyCapture1 && leftNeigborToPotentuallyCapture1.props.piece &&\r\n                            leftNeigborToPotentuallyCapture1.props.piece.split('-')[0] != square.props.piece.split(\"-\")[0]) {\r\n                            possibleMoves.push({ x: square.props.x + 1, y: square.props.y - 1 });\r\n                        }\r\n\r\n                        //capture to the right diagonal\r\n                        const leftNeigborToPotentuallyCapture2 = squares.find(s => s.props.x === square.props.x + 1 && s.props.y === square.props.y + 1);\r\n                        if (leftNeigborToPotentuallyCapture2 && leftNeigborToPotentuallyCapture2.props.piece &&\r\n                            leftNeigborToPotentuallyCapture2.props.piece.split('-')[0] != square.props.piece.split(\"-\")[0]) {\r\n                            possibleMoves.push({ x: square.props.x + 1, y: square.props.y + 1 });\r\n                        }\r\n\r\n                        //En Passant\r\n                        const enPassant1 = squares.find(s => s.props.x == square.props.x && s.props.y == square.props.y - 1)\r\n                        const enPassant2 = squares.find(s => s.props.x == square.props.x && s.props.y == square.props.y + 1)\r\n\r\n                        if (square.props.x == 4) {\r\n                            if (enPassant1) {\r\n                                if (enPassant1.props.piece.split(\"-\")[1] == \"pawn\" && this.state.enPassantPossible) {\r\n                                    if (enPassant1.props.piece.split(\"-\")[0] != color) {\r\n                                        if (enPassant1.props.x == this.state.enPassantX && enPassant1.props.y == this.state.enPassantY) {\r\n                                            possibleMoves.push({ x: square.props.x + 1, y: square.props.y - 1 })\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            if (enPassant2) {\r\n                                if (enPassant2.props.piece.split(\"-\")[1] == \"pawn\" && this.state.enPassantPossible) {\r\n                                    if (enPassant2.props.piece.split(\"-\")[0] != color) {\r\n                                        if (enPassant2.props.x == this.state.enPassantX && enPassant2.props.y == this.state.enPassantY) {\r\n                                            possibleMoves.push({ x: square.props.x + 1, y: square.props.y + 1 })\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        //TODO: Implement promotion\r\n                    }\r\n                    break;\r\n                case \"rook\":\r\n                    for (let i = square.props.x - 1; i >= 0; i--) {\r\n                        let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.props.y);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: i, y: square.props.y })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: i, y: square.props.y })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (let i = square.props.y - 1; i >= 0; i--) {\r\n                        let targetSquare = squares.find(s => s.props.x === square.props.x && s.props.y === i);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: square.props.x, y: i })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: square.props.x, y: i })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (let i = square.props.x + 1; i < DIM; i++) {\r\n                        let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.props.y);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: i, y: square.props.y })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: i, y: square.props.y })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (let i = square.props.y + 1; i < DIM; i++) {\r\n                        let targetSquare = squares.find(s => s.props.x === square.props.x && s.props.y === i);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: square.props.x, y: i })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: square.props.x, y: i })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"bishop\":\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.props.x - i >= 0 && square.props.y - i >= 0) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.props.x - i, y: square.props.y - i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.props.x - i, y: square.props.y - i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.props.x + i < DIM && square.props.y + i < DIM) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.props.x + i, y: square.props.y + i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.props.x + i, y: square.props.y + i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.props.x - i >= 0 && square.props.y + i < DIM) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.props.x - i, y: square.props.y + i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.props.x - i, y: square.props.y + i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.props.x + i < DIM && square.props.y - i >= 0) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.props.x + i, y: square.props.y - i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.props.x + i, y: square.props.y - i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"knight\":\r\n                    let targetPiece1 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y - 1)\r\n                    let targetPiece2 = squares.find(s => s.props.x == square.props.x - 2 && s.props.y == square.props.y + 1)\r\n                    let targetPiece3 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y - 1)\r\n                    let targetPiece4 = squares.find(s => s.props.x == square.props.x + 2 && s.props.y == square.props.y + 1)\r\n                    let targetPiece5 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y - 2)\r\n                    let targetPiece6 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y - 2)\r\n                    let targetPiece7 = squares.find(s => s.props.x == square.props.x - 1 && s.props.y == square.props.y + 2)\r\n                    let targetPiece8 = squares.find(s => s.props.x == square.props.x + 1 && s.props.y == square.props.y + 2)\r\n\r\n                    if (targetPiece1) {\r\n                        if (!targetPiece1.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece1.props.x, y: targetPiece1.props.y })\r\n                        } else {\r\n                            if (targetPiece1.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece1.props.x, y: targetPiece1.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (targetPiece2) {\r\n                        if (!targetPiece2.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece2.props.x, y: targetPiece2.props.y })\r\n                        } else {\r\n                            if (targetPiece2.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece2.props.x, y: targetPiece2.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (targetPiece3) {\r\n                        if (!targetPiece3.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece3.props.x, y: targetPiece3.props.y })\r\n                        } else {\r\n                            if (targetPiece3.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece3.props.x, y: targetPiece3.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (targetPiece4) {\r\n                        if (!targetPiece4.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece4.props.x, y: targetPiece4.props.y })\r\n                        } else {\r\n                            if (targetPiece4.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece4.props.x, y: targetPiece4.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (targetPiece5) {\r\n                        if (!targetPiece5.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece5.props.x, y: targetPiece5.props.y })\r\n                        } else {\r\n                            if (targetPiece5.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece5.props.x, y: targetPiece5.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (targetPiece6) {\r\n                        if (!targetPiece6.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece6.props.x, y: targetPiece6.props.y })\r\n                        } else {\r\n                            if (targetPiece6.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece6.props.x, y: targetPiece6.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (targetPiece7) {\r\n                        if (!targetPiece7.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece7.props.x, y: targetPiece7.props.y })\r\n                        } else {\r\n                            if (targetPiece7.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece7.props.x, y: targetPiece7.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (targetPiece8) {\r\n                        if (!targetPiece8.props.piece) {\r\n                            possibleMoves.push({ x: targetPiece8.props.x, y: targetPiece8.props.y })\r\n                        } else {\r\n                            if (targetPiece8.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: targetPiece8.props.x, y: targetPiece8.props.y })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    break;\r\n                case \"king\":\r\n                    for (let i = -1; i < 2; i++) {\r\n                        for (let j = -1; j < 2; j++) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + j)\r\n\r\n                            if (targetPiece) {\r\n                                if (!targetPiece.props.piece) {\r\n                                    possibleMoves.push({ x: targetPiece.props.x, y: targetPiece.props.y })\r\n                                } else {\r\n                                    if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                        possibleMoves.push({ x: targetPiece.props.x, y: targetPiece.props.y })\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    //Castling logic\r\n                    if (color == \"white\") {\r\n                        if (this.state.canWhiteLongCastle) {\r\n                            if (this.state.position[7].charAt(1) == 3 && this.state.position[7].charAt(0) == 'R') {\r\n                                possibleMoves.push({ x: square.props.x, y: square.props.y - 2 })\r\n                            }\r\n                        }\r\n\r\n                        if (this.state.canWhiteShortCastle) {\r\n                            if (this.state.position[7].split(\"\").reverse().join(\"\").charAt(1) == 2 && this.state.position[7].split(\"\").reverse().join(\"\").charAt(0) == 'R') {\r\n                                possibleMoves.push({ x: square.props.x, y: square.props.y + 2 })\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (this.state.canBlackLongCastle) {\r\n                            if (this.state.position[0].charAt(1) == 3 && this.state.position[0].charAt(0) == 'r') {\r\n                                possibleMoves.push({ x: square.props.x, y: square.props.y - 2 })\r\n                            }\r\n                        }\r\n\r\n                        if (this.state.canBlackShortCastle) {\r\n                            if (this.state.position[0].split(\"\").reverse().join(\"\").charAt(1) == 2 && this.state.position[0].split(\"\").reverse().join(\"\").charAt(0) == 'r') {\r\n                                possibleMoves.push({ x: square.props.x, y: square.props.y + 2 })\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    break;\r\n                case \"queen\":\r\n                    for (let i = square.props.x - 1; i >= 0; i--) {\r\n                        let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.props.y);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: i, y: square.props.y })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: i, y: square.props.y })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (let i = square.props.y - 1; i >= 0; i--) {\r\n                        let targetSquare = squares.find(s => s.props.x === square.props.x && s.props.y === i);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: square.props.x, y: i })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: square.props.x, y: i })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (let i = square.props.x + 1; i < DIM; i++) {\r\n                        let targetSquare = squares.find(s => s.props.x === i && s.props.y === square.props.y);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: i, y: square.props.y })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: i, y: square.props.y })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (let i = square.props.y + 1; i < DIM; i++) {\r\n                        let targetSquare = squares.find(s => s.props.x === square.props.x && s.props.y === i);\r\n\r\n                        if (!targetSquare.props.piece) {\r\n                            possibleMoves.push({ x: square.props.x, y: i })\r\n                        } else {\r\n                            if (targetSquare.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                possibleMoves.push({ x: square.props.x, y: i })\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.props.x - i >= 0 && square.props.y - i >= 0) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y - i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.props.x - i, y: square.props.y - i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.props.x - i, y: square.props.y - i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.props.x + i < DIM && square.props.y + i < DIM) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y + i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.props.x + i, y: square.props.y + i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.props.x + i, y: square.props.y + i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.props.x - i >= 0 && square.props.y + i < DIM) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.props.x - i && s.props.y == square.props.y + i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.props.x - i, y: square.props.y + i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.props.x - i, y: square.props.y + i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for (let i = 1; i <= DIM; i++) {\r\n                        if (square.props.x + i < DIM && square.props.y - i >= 0) {\r\n                            let targetPiece = squares.find(s => s.props.x == square.props.x + i && s.props.y == square.props.y - i)\r\n\r\n                            if (!targetPiece.props.piece) {\r\n                                possibleMoves.push({ x: square.props.x + i, y: square.props.y - i })\r\n                            } else {\r\n                                if (targetPiece.props.piece.split(\"-\")[0] != square.props.piece.split(\"-\")[0]) {\r\n                                    possibleMoves.push({ x: square.props.x + i, y: square.props.y - i })\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        //check if black is in check\r\n        if (square.props.piece.split(\"-\")[0] == \"black\") {\r\n            if (square.props.piece.split(\"-\")[1] == \"king\") {\r\n                for (let i = 0; i < possibleMoves.length; i++) {\r\n                    let move = <Square x={possibleMoves[i].x} y={possibleMoves[i].y} piece={\"black-king\"} />\r\n                    let pseudo = <Square x={blackKing.props.x} y={blackKing.props.y} piece={\"\"} />\r\n                    let isInCheck = this.isBlackInCheck(move, pseudo)\r\n\r\n                    if (isInCheck) {\r\n                        possibleMoves.splice(i, 1);\r\n                        i--;\r\n                    }\r\n                }\r\n            } else {\r\n                for (let i = 0; i < possibleMoves.length; i++) {\r\n                    let move = <Square x={possibleMoves[i].x} y={possibleMoves[i].y} piece={square.props.piece} />\r\n                    let isInCheck = this.isBlackInCheck(blackKing, move)\r\n\r\n                    if (isInCheck) {\r\n                        possibleMoves.splice(i, 1);\r\n                        i--;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //check if white is in check\r\n        if (square.props.piece.split(\"-\")[0] == \"white\") {\r\n            if (square.props.piece.split(\"-\")[1] == \"king\") {\r\n                for (let i = 0; i < possibleMoves.length; i++) {\r\n                    let move = <Square x={possibleMoves[i].x} y={possibleMoves[i].y} piece={\"white-king\"} />\r\n                    let pseudo = <Square x={whiteKing.props.x} y={whiteKing.props.y} piece={\"\"} />\r\n                    let isInCheck = this.isWhiteInCheck(move, pseudo)\r\n\r\n                    if (isInCheck) {\r\n                        possibleMoves.splice(i, 1);\r\n                        i--;\r\n                    }\r\n                }\r\n            } else {\r\n                for (let i = 0; i < possibleMoves.length; i++) {\r\n                    let move = <Square x={possibleMoves[i].x} y={possibleMoves[i].y} piece={square.props.piece} />\r\n                    let isInCheck = this.isWhiteInCheck(whiteKing, move)\r\n\r\n                    if (isInCheck) {\r\n                        possibleMoves.splice(i, 1);\r\n                        i--;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //removes the right to castle if any of the castle squares is under attack\r\n        if (square.props.piece.split(\"-\")[1] == \"king\") {\r\n            let whiteCastle1 = possibleMoves.find(m => m.x == 7 && m.y == 6)\r\n            let whiteCastle2 = possibleMoves.find(m => m.x == 7 && m.y == 2)\r\n            let blackCastle1 = possibleMoves.find(m => m.x == 0 && m.y == 6)\r\n            let blackCastle2 = possibleMoves.find(m => m.x == 0 && m.y == 2)\r\n\r\n            if (whiteCastle1) {\r\n                let pieceAcross = possibleMoves.find(m => m.x == 7 && m.y == 5)\r\n                if (!pieceAcross) {\r\n                    possibleMoves.splice(possibleMoves.indexOf(pieceAcross), 1)\r\n                }\r\n            }\r\n\r\n            if (whiteCastle2) {\r\n                let pieceAcross = possibleMoves.find(m => m.x == 7 && m.y == 3)\r\n                if (!pieceAcross) {\r\n                    possibleMoves.splice(possibleMoves.indexOf(pieceAcross), 1)\r\n                }\r\n            }\r\n\r\n            if (blackCastle1) {\r\n                let pieceAcross = possibleMoves.find(m => m.x == 0 && m.y == 5)\r\n                if (!pieceAcross) {\r\n                    possibleMoves.splice(possibleMoves.indexOf(pieceAcross), 1)\r\n                }\r\n            }\r\n\r\n            if (blackCastle2) {\r\n                let pieceAcross = possibleMoves.find(m => m.x == 0 && m.y == 3)\r\n                if (!pieceAcross) {\r\n                    possibleMoves.splice(possibleMoves.indexOf(pieceAcross), 1)\r\n                }\r\n            }\r\n        }\r\n\r\n        //prevents black to castle if in check\r\n        if (this.isBlackInCheck(blackKing)) {\r\n            let castleMove = possibleMoves.find(m => m.x == 0 && m.y == 2)\r\n            let castleMove2 = possibleMoves.find(m => m.x == 0 && m.y == 6)\r\n\r\n            if (castleMove) {\r\n                possibleMoves.splice(possibleMoves.indexOf(castleMove), 1)\r\n            }\r\n\r\n            if (castleMove2) {\r\n                possibleMoves.splice(possibleMoves.indexOf(castleMove2), 1)\r\n            }\r\n        }\r\n\r\n        //prevents white to castle if in check\r\n        if (this.isWhiteInCheck(whiteKing)) {\r\n            let castleMove = possibleMoves.find(m => m.x == 7 && m.y == 2)\r\n            let castleMove2 = possibleMoves.find(m => m.x == 7 && m.y == 6)\r\n\r\n            if (castleMove) {\r\n                possibleMoves.splice(possibleMoves.indexOf(castleMove), 1)\r\n            }\r\n\r\n            if (castleMove2) {\r\n                possibleMoves.splice(possibleMoves.indexOf(castleMove2), 1)\r\n            }\r\n        }\r\n\r\n        console.log(\"Possible Moves:\", possibleMoves);\r\n        this.updatePossibleMoves(possibleMoves);\r\n    }\r\n\r\n    renderSquares() {\r\n        let squareColorIsWhite = true;\r\n        const squares = [];\r\n        for (let i = 0; i < DIM; i++) {\r\n            let row = ConvertFenToString(this.state.position[i]);\r\n            for (let j = 0; j < DIM; j++) {\r\n                const piece = row.charAt(j);\r\n                let color = squareColorIsWhite ? \"\" : \"dark\";\r\n                squares.push(\r\n                    <Square\r\n                        getPossibleMoves={this.getPossibleMoves.bind(this)}\r\n                        key={`${i}-${j}`}\r\n                        x={i}\r\n                        y={j}\r\n                        piece={ConvertFENPieceToPiece(piece.trim())}\r\n                        color={color}\r\n                        selectedSquareX={this.state.selectedSquareX}\r\n                        setSelectedSquareX={this.updateSelectedSquareX}\r\n                        selectedSquareY={this.state.selectedSquareY}\r\n                        setSelectedSquareY={this.updateSelectedSquareY}\r\n                        possibleMoves={this.state.possibleMoves}\r\n                        updatePossibleMoves={this.updatePossibleMoves}\r\n                        movePiece={this.movePiece}\r\n                    />\r\n                );\r\n                squareColorIsWhite = !squareColorIsWhite;\r\n            }\r\n            squareColorIsWhite = !squareColorIsWhite;\r\n        }\r\n        return squares;\r\n    }\r\n\r\n    render() {\r\n        //const squares = this.renderSquares();\r\n        return (\r\n            <div className=\"chessGrid\">\r\n                {this.renderSquares()}\r\n            </div>\r\n        );\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}